Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: FTM

; Microsoft Dynamics AX MENUITEM : SysCheckList_Budget unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #SysCheckList_Budget
    Type: 3
    PROPERTIES
      Name                #SysCheckList_Budget
      Label               #Budget checklist
      ObjectType          #Class
      Object              #SysCheckList_Budget
      Origin              #{C5CEA7FF-ECA3-486F-B226-41C8E29B7FEF}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: CLS

; Microsoft Dynamics AX Class: SysCheckList unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysCheckList
    PROPERTIES
      Name                #SysCheckList
      RunOn               #Client
      Origin              #{2D0C129F-0000-1000-5728-AA203277636B}
      LegacyId            #4767
    ENDPROPERTIES
    
    METHODS
      SOURCE #applyStylesheet
        #protected boolean applyStylesheet()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #canBePreventedAtStartup
        #protected boolean canBePreventedAtStartup()
        #{
        #    //Should be overridden
        #    return false;
        #}
      ENDSOURCE
      SOURCE #canRunSilent
        #protected boolean canRunSilent()
        #{
        #    //Should be overridden
        #    return false;
        #}
        #
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #abstract class SysCheckList
        #{
        #    #SysCheckList
        #
        #    List                checkList;
        #    Map                 checkMap;
        #    FormActiveXControl  html;
        #    FormCheckBoxControl checkBoxPreventAtStartup;
        #    boolean             sortWithStatusPreference;
        #    boolean             onlyPrimarilySortOrder;
        #    boolean             isSetupMode;
        #    boolean             htmlInitialized;
        #}
      ENDSOURCE
      SOURCE #doInit
        #protected void doInit(boolean _silent = false, boolean _ignoreEmpty = false)
        #{
        #    Args         args;
        #    Object       formRun;
        #    FormDesign   formDesign;
        #    str          id; //used in both form and class to identify the activeX html cacheobject
        #    str          infoText;
        #
        #    ;
        #    //Create list
        #    this.init();
        #
        #
        #    if (_ignoreEmpty || !this.isEmpty())
        #    {
        #        //Show list
        #        if (_silent && this.canRunSilent())
        #        {
        #            this.runSilent();
        #        }
        #        else
        #        {
        #            // <GCN>
        #            if (this.preRunFormInInitialization())
        #            {
        #            // </GCN>
        #            //Save checklist in cache - we do not allow more than one instance of each list
        #            infolog.globalCache().set(this.getName(),
        #                                        this.getName(),
        #                                        this);
        #
        #            // <GCN>
        #            }
        #            // </GCN>
        #            //init form
        #            id = this.getName() + '|' + int2str(WinAPI::getTickCount());
        #            args = new Args(formStr(SysCheckList));
        #            args.parm(id);
        #            args.caller(this);
        #
        #            formRun = classfactory.formRunClass(args);
        #
        #            infoText = this.infoText();
        #            if (infoText)
        #            {
        #                formRun.parmInfoText(infoText);
        #            }
        #
        #            formRun.init(); //Save control in cache
        #            formDesign = formRun.design();
        #            formDesign.caption(this.getCheckListCaption());
        #
        #            this.initHtmlControl(id);
        #            this.initCheckBoxControl(id);
        #            // display the checkbox only if the checklist requires it
        #            if (this.canBePreventedAtStartup() && checkBoxPreventAtStartup.visible())
        #            {
        #                checkBoxPreventAtStartup.visible(true);
        #            }
        #            else
        #            {
        #                checkBoxPreventAtStartup.visible(false);
        #            }
        #
        #            this.updateHtml(false);
        #
        #            formRun.run();
        #            formRun.detach();
        #        }
        #    }
        #    else
        #    {
        #        //Finalize list - eg. make list not runnable
        #        this.finalizeChecklist();
        #    }
        #}
      ENDSOURCE
      SOURCE #doUpdateHtml
        #/// <summary>
        #/// Updates the HTML content of a checklist.
        #/// </summary>
        #/// <param name="_refresh">
        #/// A Boolean value that indicates whether to update the checklist.
        #/// </param>
        #/// <remarks>
        #/// Once a checklist item has been added or removed from the checklist or a checklist item state has
        #/// otherwise been changed, this method should be called to update the checklist.
        #/// </remarks>
        #public void doUpdateHtml(boolean _refresh)
        #{
        #    // New public method to prevent breaking existing API
        #    this.updateHtml(_refresh);
        #}
      ENDSOURCE
      SOURCE #finalize
        #void finalize()
        #{
        #    //Called from form on close
        #
        #    ListIterator checkListIterator = new ListIterator(checkList);
        #    SysCheckListItem sysCheckListItem;
        #
        #    // Clear the install mode in the model store to prevent modified modelstore dialog.
        #    SysModelStore::clearInstallMode();
        #
        #    if (this.isEmpty())
        #    {
        #        this.finalizeChecklist();
        #    }
        #
        #    checkListIterator.begin();
        #    while (checkListIterator.more()) //Loop through all list items
        #    {
        #        if (checkMap.exists(checkListIterator.value()))
        #        {
        #            sysCheckListItem = checkMap.lookup(checkListIterator.value());
        #            sysCheckListItem.finalize();
        #        }
        #        checkListIterator.next();
        #    }
        #
        #    checkMap = null;
        #}
      ENDSOURCE
      SOURCE #finalizeChecklist
        #protected void finalizeChecklist()
        #{
        #    //Override this method if you need to run anything after all items in checklist has been finished
        #
        #    return;
        #}
      ENDSOURCE
      SOURCE #find
        #/*
        #    Use: return SysSetupLog::findEx(_name, _description).RecId != 0;
        #    for global checklists.
        #
        #    Use: return SysSetupCompanyLog::findEx(_name, _description).RecId != 0;
        #    for company specific checklists.
        #
        #    Use the find instead of findEx if application and kernel build no. not is necessery
        #*/
        #abstract public boolean find(IdentifierName   _name,
        #                             ClassDescription _description = '')
        #{
        #}
      ENDSOURCE
      SOURCE #getAdditionalCss
        #/// <summary>
        #/// Gets additional CSS information for the checklist.
        #/// </summary>
        #/// <returns>
        #/// A string that contains CSS information.
        #/// </returns>
        #/// <remarks>
        #/// CSS is used to format and group all controls in the checklist.
        #/// </remarks>
        #protected str getAdditionalCss()
        #{
        #    return  '\n' +
        #            '<STYLE>\n' +
        #            '.checklistImage {\n' +
        #            '    float: left;\n' +
        #            '    display: inline-block;\n' +
        #            '    margin-right: 5px;\n' +
        #            '}\n' +
        #            '.checkboxInput\n' +
        #            '{\n' +
        #            '    float: left;\n' +
        #            '    display: inline-block;\n' +
        #            '    margin-right: 5px;\n' +
        #            '    margin-left: 1px;\n' +
        #            '    margin-top: 2px;\n' +
        #            '}\n' +
        #            '.checklistItemContent {\n' +
        #            '    overflow: hidden;\n' +
        #            '    margin-right: 5px;\n' +
        #            '    float: left;\n' +
        #            '}\n' +
        #            '.checklistItemText {\n' +
        #            '    font-weight: bold;\n' +
        #            '    overflow: visible;\n' +
        #            '    height: 16px;\n' +
        #            '    margin-top: 5px;\n' +
        #            '}\n' +
        #            '.checklistItem {\n' +
        #            '    overflow: hidden;\n' +
        #            '    margin-left: 1px;\n' +
        #            '}\n' +
        #            '.checkboxItem\n' +
        #            '{\n' +
        #            '    overflow: hidden;\n' +
        #            '}\n' +
        #            '.group {\n' +
        #            '    margin-left: 6px;\n' +
        #            '    margin-bottom: 5px;\n' +
        #            '    margin-top: 5px;\n' +
        #            '}\n' +
        #            '.groupHeader {\n' +
        #            '    height: 25px;\n' +
        #            '    overflow: visible;\n' +
        #            '    margin-bottom: 7px;\n' +
        #            '    position: relative;\n' +
        #            '}\n' +
        #            '.groupContent {\n' +
        #            '    margin-left: 43px;\n' +
        #            '    position: relative;\n' +
        #            '}\n' +
        #            '.groupSlide {\n' +
        #            '    position: relative;\n' +
        #            '    overflow: hidden;\n' +
        #            '}\n' +
        #            '.groupIcons {\n' +
        #            '    float: left;\n' +
        #            '    margin-right: 5px;\n' +
        #            '}\n' +
        #            '.groupText {\n' +
        #            '    margin-top: 4px;\n' +
        #            '    font-weight: bold;\n' +
        #            '    font-size: x-small;\n' +
        #            '}\n' +
        #            '.groupExpandCollapse {\n' +
        #            '    position: relative;\n' +
        #            '    top: -7px;\n' +
        #            '    margin-right: 5px;\n' +
        #            '    margin-top: 14px;\n' +
        #            '    float: left;\n' +
        #            '}\n' +
        #            '.checklistItemHelp {\n' +
        #            '    float: left;\n' +
        #            '    display: inline-block;\n' +
        #            '    margin-right: 5px;\n' +
        #            '}\n' +
        #            '.checklistItemMarkAsComplete {\n' +
        #            '    float: right;\n' +
        #            '    display: inline-block;\n' +
        #            '    margin-right: 5px;\n' +
        #            '}\n' +
        #            '</STYLE>\n';
        #}
      ENDSOURCE
      SOURCE #getCheckListCaption
        #protected str getCheckListCaption()
        #{
        #    return "@SYS69985";
        #}
      ENDSOURCE
      SOURCE #getChecklistXml
        #/// <summary>
        #/// Gets the checklist XML document.
        #/// </summary>
        #/// <returns>
        #/// A string that contains the XML content of the checklist.
        #/// </returns>
        #/// <remarks>
        #/// The checklist XML is used to build up the HTML content of the checklist which is then rendered by
        #/// the ActiveX control.
        #/// </remarks>
        #protected XmlDocument getChecklistXml()
        #{
        #    XmlDocument         xmlDoc = new XmlDocument();
        #    ListEnumerator      enumerator = checkList.getEnumerator();
        #    SysCheckListItem    checkListItem;
        #    XmlNode             rootNode;
        #    DictEnum            statusEnum = new DictEnum(enumNum(SysCheckListStatus));
        #    str                 label;
        #
        #    XmlNode getExistingGroup(str _groupName, XmlNode _parentNode = xmlDoc.root())
        #    {
        #        XmlNode groupNode = _parentNode.selectSingleNode(strFmt('//ChecklistGroup[@title="%1"]', _groupName));
        #
        #        return groupNode;
        #    }
        #
        #    XmlNode addChecklistGroup(str _groupName, XmlNode _parentNode = xmlDoc.root())
        #    {
        #        List            groups;
        #        ListEnumerator  groupsEnumerator;
        #        XmlElement      groupNode;
        #
        #        groups = strSplit(_groupName, '\\');
        #        groupsEnumerator = groups.getEnumerator();
        #
        #        while (groupsEnumerator.moveNext())
        #        {
        #            groupNode = getExistingGroup(groupsEnumerator.current(), _parentNode.parentNode());
        #
        #            if (!groupNode)
        #            {
        #                groupNode = xmlDoc.createElement('ChecklistGroup');
        #                groupNode.setAttribute('title', groupsEnumerator.current());
        #                groupNode.setAttribute('expanded', (this.groupIsExpanded(groupsEnumerator.current()) ? 'true' : 'false'));
        #                groupNode.setAttribute('imageExpand', SysCheckList::imageURL('hlpexpnd.gif'));
        #                groupNode.setAttribute('imageCollapse', SysCheckList::imageURL('hlpcolla.gif'));
        #                _parentNode.appendChild(groupNode);
        #                _parentNode = groupNode;
        #            }
        #        }
        #
        #        return groupNode ? groupNode : _parentNode;
        #    }
        #
        #    XmlNode addChecklistItem(SysCheckListItem _checkListItem)
        #    {
        #        XmlElement          itemNode;
        #        XmlElement          groupNode;
        #        SysCheckListStatus  groupStatus;
        #        str                 itemHelpLink;
        #
        #        groupNode = addChecklistGroup(_checkListItem.getCheckListGroup());
        #
        #        if (_checkListItem.isCheckbox())
        #        {
        #            itemNode = xmlDoc.createElement('CheckboxItem');
        #        }
        #        else
        #        {
        #            itemNode = xmlDoc.createElement('ChecklistItem');
        #        }
        #
        #        label = _checkListItem.label();
        #        itemHelpLink = _checkListItem.getHelpLink();
        #        itemNode.setAttribute('title', _checkListItem.label() + (_checkListItem.indeterminate() || _checkListItem.isCheckbox() ? '' : " (" + "@SYS340867" + ")"));
        #        itemNode.setAttribute('itemLink', this.makeLink(_checkListItem.getMenuItemName(),
        #                                                        _checkListItem.getMenuItemType(),
        #                                                        _checkListItem.getState()));
        #        itemNode.setAttribute('helpLink', itemHelpLink);
        #        itemNode.setAttribute('description', _checkListItem.helpText());
        #        itemNode.setAttribute('image', this.getStatusImage(_checkListItem.getState()));
        #        itemNode.setAttribute('imageTooltipText', this.getStatusToolTip(_checkListItem.getState()));
        #        itemNode.setAttribute('linkTooltipText', _checkListItem.label());//"@SYS73865" (Bug 109058)
        #        itemNode.setAttribute('status', Global::enum2Symbol(enumNum(SysCheckListStatus), _checkListItem.getState()));
        #        itemNode.setAttribute('isCheckbox', _checkListItem.isCheckbox() ? 'true' : 'false');
        #        itemNode.setAttribute('checkboxState', _checkListItem.checkboxState() ? 'true' : 'false');
        #        if (strLen(itemHelpLink)>0)
        #        {
        #            // Only show link if a link is available
        #            itemNode.setAttribute('helpText', "@SYS14501"); // Help
        #        }
        #
        #        itemNode.setAttribute('itemName', 'markascomplete://' + classId2Name(classIdGet(_checkListItem)));
        #        itemNode.setAttribute('markAsComplete', (_checkListItem.indeterminate() &&
        #            _checkListItem.getState() != SysCheckListStatus::Finished && _checkListItem.getState() != SysCheckListStatus::Deferred) ? "@SYS340868" : ' ');
        #
        #        groupNode.appendChild(itemNode);
        #
        #        // Determine the overall status of the group
        #        groupStatus = groupNode.hasAttribute('status') ?  statusEnum.name2Value(groupNode.getAttribute('status')) : SysCheckListStatus::Indeterminate;
        #        if (!_checkListItem.isCheckbox())
        #        {
        #            groupStatus = this.getGroupState(_checkListItem.getState(), groupStatus);
        #            groupNode.setAttribute('image', this.getStatusImage(groupStatus));
        #        }
        #        groupNode.setAttribute('status', Global::enum2Symbol(enumNum(SysCheckListStatus), groupStatus));
        #
        #        return itemNode;
        #    }
        #
        #    xmlDoc = new XmlDocument();
        #    rootNode = xmlDoc.createElement('Checklist');
        #    xmlDoc.appendChild(rootNode);
        #
        #    while (enumerator.moveNext())
        #    {
        #        if (checkMap.exists(enumerator.current()))
        #        {
        #            checkListItem = checkMap.lookup(enumerator.current());
        #
        #            if (checkListItem && checkListItem.visible() && checkListItem.isRunnable())
        #            {
        #                addChecklistItem(checkListItem);
        #            }
        #        }
        #    }
        #
        #    return xmlDoc;
        #}
      ENDSOURCE
      SOURCE #getGroupState
        #/// <summary>
        #/// Gets the state of a group of checklist items in the checklist.
        #/// </summary>
        #/// <param name="_itemState">
        #/// The item state that is used to compare to checklist state.
        #/// </param>
        #/// <param name="_groupState">
        #/// The current group state.
        #/// </param>
        #/// <returns>
        #/// The state of the group of checklist items.
        #/// </returns>
        #/// <remarks>
        #/// The group state is finished when all mandatory items in the group are finished.
        #/// </remarks>
        #protected SysCheckListStatus getGroupState(SysCheckListStatus _itemState, SysCheckListStatus _groupState)
        #{
        #    if (_itemState < _groupState)
        #    {
        #        return _itemState;
        #    }
        #    else
        #    {
        #        return _groupState;
        #    }
        #}
      ENDSOURCE
      SOURCE #getHelpImage
        #protected Filename getHelpImage()
        #{
        #    return SysCheckList::imageURL(#ImageHelp);
        #}
      ENDSOURCE
      SOURCE #getHtml
        #protected str getHtml()
        #{
        #    str                 htmlText;
        #    str                 css;
        #    XmlDocument         checklistXml;
        #    XmlReader           xslChecklist;
        #    XmlReader           xmlChecklist;
        #    resourceNode        xslt = SysResource::getResourceNode('ReleaseUpdateChecklistXSLT_xml');
        #    str                 xslText;
        #
        #    [xslText] = SysResource::getResourceNodeData(xslt);
        #    checklistXml = this.getChecklistXml();
        #
        #    xslChecklist = XmlReader::newXml(xslText);
        #    xmlChecklist = XmlReader::newXml(checklistXml.xml());
        #    htmlText = XmlTransform::execute(xslChecklist, xmlChecklist, true);
        #
        #    if (this.applyStylesheet())
        #    {
        #        css = SysCheckList::getDefaultStylesheet();
        #        css += this.getAdditionalCss();
        #        css += this.getHtmlScript();
        #    }
        #
        #    return strFmt(this.getHtmlDocumentTemplate(),
        #                this.getHtmlHeader() ? strFmt(this.getHtmlHeaderTemplate(),this.getHtmlHeader()): '',
        #                this.getHtmlHeaderHelp(),
        #                htmlText,
        #                css
        #                );
        #}
      ENDSOURCE
      SOURCE #getHtmlDocumentTemplate
        #protected str getHtmlDocumentTemplate()
        #{
        #    //%1=Header
        #    //%2=Header text
        #    //%3=Rows in table
        #    //%4=StyleSheet
        #    return '<html'
        #        +  this.maybeDirRTL() // BASIS bidi
        #        +  '>%4<BODY SCROLL="AUTO">\n'
        #        +  '<TABLE border=0 cellPadding=0 cellSpacing=0 width="100%" height="100%" '
        #        +  'style="margin-top: 0; margin-left: 0; margin-right: 0; margin-bottom: -12">'
        #        +  '<TBODY>\n<TR>\n<TD>'
        #        +  '%1%2<p><DIV align=left>\n'
        #        +  '<TABLE class="TableBackground" border=0 cellPadding=0 cellSpacing=0 width="100%" height="100%">'
        #        +  '<TBODY valign="top">\n<TR>\n<TD>\n'
        #        + '%3'
        #        +  '</TD>\n</TR></TBODY></TABLE>\n'
        #        +  '</TD>\n</TR></TBODY></TABLE>'
        #        +  '</DIV></p></BODY></html>';
        #}
      ENDSOURCE
      SOURCE #getHtmlGroupTemplate
        #protected str getHtmlGroupTemplate()
        #{
        #    //%1=Link for menuitem when clicking icon - use makeLink(..)
        #    //%2=Text for link
        #    //%3=Additional helptext
        #    //%4=Path for status image
        #    //%5=Tooltip for status image
        #    //%6=Link etc. for additional help
        #    //%7=Link for menuitem when clicking text - use makeLink(..)
        #
        #
        #    return '<TABLE class="TableBackground" border=0 cellPadding=8 cellSpacing=0 width="100%"><TBODY>'
        #        + '\n<TR>'
        #        +  '\n<TD width="100%" style="BORDER-TOP: #cab99f 1px solid"><B>%1</B></TD>'                //colum with link and helptext
        #        +  '</TR>'
        #        +   '</TBODY>\n</TABLE>\n';
        #
        #}
      ENDSOURCE
      SOURCE #getHtmlGroupText
        #protected str getHtmlGroupText(str _checkListGroup)
        #{
        #    str htmlText = '';
        #    ;
        #
        #    if (_checkListGroup)
        #    {
        #        htmlText = strFmt(this.getHtmlGroupTemplate(), _checkListGroup);
        #    }
        #    return htmlText;
        #}
      ENDSOURCE
      SOURCE #getHtmlHeader
        #protected str getHtmlHeader()
        #{
        #    return '';
        #}
      ENDSOURCE
      SOURCE #getHtmlHeaderHelp
        #protected str getHtmlHeaderHelp()
        #{
        #    return strFmt('<A href="Dynamics://DynamicsHelp/Topic?Id=forms.SysChecklist">%1</A>', "@SYS60385");
        #}
        #
      ENDSOURCE
      SOURCE #getHtmlHeaderTemplate
        #protected str getHtmlHeaderTemplate()
        #{
        #    //%1=Header
        #    return '<H1 class=naviheader>%1</H1>';
        #}
      ENDSOURCE
      SOURCE #getHtmlHelpTemplate
        #protected str getHtmlHelpTemplate()
        #{
        #    //%1=Link for anything
        #    //%2=Path for image
        #    //%3=Tooltip
        #    return ' <A href="%1"><IMG BORDER="0" SRC="%2" ALT="%3"></A>';
        #}
      ENDSOURCE
      SOURCE #getHtmlInfoTemplate
        #protected str getHtmlInfoTemplate()
        #{
        #    //%1=Text
        #    //%2=StyleSheet
        #    return '<html'
        #        +  this.maybeDirRTL() // BASIS bidi
        #        +  '>%2<BODY bgcolor="#CAB99F" SCROLL="NO" Style="margin-top: 0.00em; margin-bottom: 0.00em;">\n'
        #        +  '%1</BODY></html>';
        #}
      ENDSOURCE
      SOURCE #getHtmlItemTemplate
        #protected str getHtmlItemTemplate(boolean _showLink = true, boolean _showImageLink = false)
        #{
        #    //%1=Link for menuitem when clicking icon - use makeLink(..)
        #    //%2=Text for link
        #    //%3=Additional helptext
        #    //%4=Path for status image
        #    //%5=Tooltip for status image
        #    //%6=Link etc. for additional help
        #    //%7=Link for menuitem when clicking text - use makeLink(..)
        #
        #    str title = _showLink ? 'TITLE="%8"' : '';
        #    ;
        #
        #    return '<TABLE class="TableBackground" border=0 cellPadding=8 cellSpacing=0 width="100%"><TBODY>'
        #        +  '\n<TR>\n<TD>'
        #        +  '<A ' + (_showImageLink ? 'href' : 'ref') + '="%1"><IMG BORDER="0" SRC="%4" ALT="%5"></A>\n</TD>'   //colum with status image
        #        +  '\n<TD width="100%">'
        #        +  '<A ' + (_showLink ? 'href' : 'ref') + '="%7"' +title+ '><B>%2</B></A><br>%3\n</TD>'                //colum with link and helptext
        #        +  '\n<TD>&nbsp;%6\n</TD>\n</TR>' //colum with help text, icon or whatever
        #        +   '</TBODY>\n</TABLE>\n';
        #}
      ENDSOURCE
      SOURCE #getHtmlItemText
        #protected str getHtmlItemText(SysCheckListItem _item, str _parameters)
        #{
        #    str htmlText = '';
        #    str htmlHelpText, htmlImageLink, htmlTextLink;
        #    ;
        #
        #    if (_item && _item.visible())
        #    {
        #        //link to additional help if any
        #        htmlHelpText = _item.getHelpLink() ?
        #                       strFmt(this.getHtmlHelpTemplate(),
        #                              _item.getHelpLink(),
        #                              this.getHelpImage(),
        #                              "@SYS73864")
        #                       : '';
        #
        #        //link for running task - used when clicking text
        #        htmlTextLink = this.makeLink(_item.getMenuItemName(),
        #                                     _item.getMenuItemType(),
        #                                     _item.getState());
        #
        #        //link to be used when clicking icon - only use link when status is indeterminate
        #        htmlImageLink = _item.indeterminate() && _item.getState() == SysCheckListStatus::Indeterminate ?
        #                        this.makeLink(menuitemActionStr(SysCheckList_System) + '+' + _parameters, MenuItemType::Action)
        #                        : '';
        #
        #        //format all parts
        #        htmlText = strFmt(this.getHtmlItemTemplate(_item.getState() != SysCheckListStatus::Deferred, htmlImageLink != ''),
        #                          htmlImageLink,
        #                          _item.label(),
        #                          _item.helpText(),
        #                          this.getStatusImage(_item.getState()),
        #                          this.getStatusToolTip(_item.getState()),
        #                          htmlHelpText,
        #                          htmlTextLink,
        #                          "@SYS73865"
        #                          );
        #    }
        #
        #    return htmlText;
        #}
      ENDSOURCE
      SOURCE #getHtmlScript
        #/// <summary>
        #/// Gets the HTML code of a checklist.
        #/// </summary>
        #/// <returns>
        #/// A string that contains the HTML code of the checklist.
        #/// </returns>
        #protected str getHtmlScript()
        #{
        #    return  '<script language="javascript">\n' +
        #            '    function toggleGroup(link)\n' +
        #            '    {\n' +
        #            '        var group = link.parentElement.parentElement.parentElement;\n' +
        #            '        var content = getElementByClass(group, "groupContent");\n' +
        #            '        var expand = getElementByClass(link, "groupExpand");\n' +
        #            '        var collapse = getElementByClass(link, "groupCollapse");\n' +
        #            '\n' +
        #            '        if (content.style.display == "")\n' +
        #            '        {\n' +
        #            '            content.style.display = "none";\n' +
        #            '            expand.style.display = "";\n' +
        #            '            collapse.style.display = "none";\n' +
        #            '        }\n' +
        #            '        else\n' +
        #            '        {\n' +
        #            '            content.style.display = "";\n' +
        #            '            expand.style.display = "none";\n' +
        #            '            collapse.style.display = "";\n' +
        #            '        }\n' +
        #            '\n' +
        #            '        return false;\n' +
        #            '    }\n' +
        #            '    function getElementByClass(element, className)\n' +
        #            '    {\n' +
        #            '        var children = element.children;\n' +
        #            '        var child;\n' +
        #            '        var i;\n' +
        #            '\n' +
        #            '        for (i = 0; i < children.length; i++)\n' +
        #            '        {\n' +
        #            '            if (children.item(i).className == className)\n' +
        #            '            {\n' +
        #            '                return children(i);\n' +
        #            '            }\n' +
        #            '            if (children.item(i).children.length > 0)\n' +
        #            '            {\n' +
        #            '                child = getElementByClass(children.item(i), className);\n' +
        #            '                if (child)\n' +
        #            '                {\n' +
        #            '                    return child;\n' +
        #            '                }\n' +
        #            '            }\n' +
        #            '        }\n' +
        #            '\n' +
        #            '        return null;\n' +
        #            '    }\n' +
        #            '    function toggleCheckbox(sender, url)\n' +
        #            '    {\n' +
        #            '        document.location = url + "+" + sender.checked;\n' +
        #            '    }\n' +
        #            '</script>\n';
        #}
      ENDSOURCE
      SOURCE #getInterfaceId
        #abstract protected ClassId getInterfaceId()
        #{
        #    //Should be overridden to return interface that identifies checklist
        #}
      ENDSOURCE
      SOURCE #getItem
        #public SysCheckListItem getItem(ClassId _id)
        #{
        #    if (checkMap.exists(_id))
        #    {
        #        return checkMap.lookup(_id);
        #    }
        #    return null;
        #}
      ENDSOURCE
      SOURCE #getName
        #protected str getName()
        #{
        #    return classId2Name(classIdGet(this));
        #}
      ENDSOURCE
      SOURCE #getScroll
        #protected int getScroll()
        #{
        #    //Get scroll
        #    COM com = html.document();
        #
        #    if (com)
        #    {
        #        com = com.body();
        #
        #        if (com)
        #            return com.scrollTop();
        #    }
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #getStatusImage
        #protected Filename getStatusImage(SysCheckListStatus _status)
        #{
        #    Filename ret = '';
        #    switch (_status)
        #    {
        #        case SysCheckListStatus::Finished :
        #            ret += #ImageFinished;
        #            break;
        #        case SysCheckListStatus::InProcess :
        #            ret += #ImageInProcess;
        #            break;
        #        case SysCheckListStatus::Ready :
        #            ret += #ImageReady;
        #            break;
        #        case SysCheckListStatus::Deferred :
        #            ret += #ImageDeferred;
        #            break;
        #        case SysCheckListStatus::Indeterminate :
        #            ret += #ImageIndeterminate;
        #            break;
        #        default :
        #    }
        #
        #    return SysCheckList::imageURL(ret);
        #}
      ENDSOURCE
      SOURCE #getStatusToolTip
        #protected str getStatusToolTip(SysCheckListStatus _status)
        #{
        #    str ret;
        #    ;
        #    switch (_status)
        #    {
        #        case SysCheckListStatus::Finished :
        #            ret = "@SYS56424";
        #            break;
        #        case SysCheckListStatus::InProcess :
        #            ret = "@SYS70572";
        #            break;
        #        case SysCheckListStatus::Ready :
        #            ret = "@SYS14432";
        #            break;
        #        case SysCheckListStatus::Deferred :
        #            ret = "@SYS26350";
        #            break;
        #        case SysCheckListStatus::Indeterminate :
        #            ret = "@SYS72546";
        #            break;
        #        default :
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #gotoScroll
        #protected void gotoScroll(int _scroll)
        #{
        #    //Set scroll
        #    COM com = html.document();
        #;
        #    if (com && _scroll)
        #    {
        #        com = com.body();
        #
        #        if (com)
        #            com.scrollTop(_scroll);
        #    }
        #}
      ENDSOURCE
      SOURCE #groupIsExpanded
        #/// <summary>
        #/// Checks whether a checklist group is in an expanded state.
        #/// </summary>
        #/// <param name="_groupName">
        #/// The group name of the checklist.
        #/// </param>
        #/// <returns>
        #/// true if the group is in an expanded state; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// A group is in an expanded state whenever a user clicks on the plus icon next to the group text.
        #/// </remarks>
        #protected boolean groupIsExpanded(str _groupName)
        #{
        #    COM com = html.document();
        #    COM d;
        #    COM s;
        #    str groupClass;
        #    int i;
        #
        #    if (com)
        #    {
        #        com = com.body();
        #        com = com.getElementsByTagName('div');
        #
        #        for (i = 1; i < com.length(); i++)
        #        {
        #            d = com.item(i);
        #            groupClass = d.className();
        #
        #            if (groupClass == 'groupText')
        #            {
        #                if (d.innerText() == _groupName)
        #                {
        #                    d = d.parentElement();  // groupHeader
        #                    d = d.nextSibling();    // groupSlide
        #                    d = d.firstChild();     // groupContent
        #                    s = d.style();
        #
        #                    return s.display() != 'none';
        #                }
        #            }
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #infoText
        #protected str infoText()
        #{
        #    return '';
        #}
      ENDSOURCE
      SOURCE #init
        #protected void init()
        #{
        #    SysCheckListItem sysCheckListItem;
        #    SetIterator setIterator;
        #    MapEnumerator mapEnumerator;
        #    ;
        #
        #    //Init of class variables
        #    checkMap       = new Map(Types::Integer,Types::Class);
        #    checkList      = new List(Types::Integer);
        #
        #    //init of method variables
        #    mapEnumerator = checkMap.getEnumerator();
        #
        #    //Create setIterator to all items
        #    setIterator = new SetIterator(SysCheckList::getAllCheckListItems(this.getInterfaceId()));
        #    setIterator.begin();
        #    while (setIterator.more())
        #    {
        #        //We've got an item attached to this list - is it runnable?
        #        sysCheckListItem = new DictClass(setIterator.value()).makeObject();
        #        sysCheckListItem.parmSysCheckList(this);
        #        sysCheckListItem.init();
        #
        #        //Then insert runnable item in map
        #        if(sysCheckListItem.isRunnable())
        #        {
        #            checkMap.insert(sysCheckListItem.getItemId(), sysCheckListItem);
        #        }
        #
        #        setIterator.next();
        #    }
        #
        #    //Then check and insert in the checkList
        #    while (mapEnumerator.moveNext())
        #    {
        #        this.insertItem(mapEnumerator.currentValue());
        #    }
        #    //Refresh status of listitems - set status depended on status of dependencies
        #    this.refresh();
        #
        #    //Resort
        #
        #    if (this.sortWithStatusPreference())
        #    {
        #        //Sort list so items with same status are displayed in groups
        #        if (! this.onlyPrimarilySortOrder())
        #            this.sequenceSort();
        #
        #        this.statusSort();
        #    }
        #    else
        #    {
        #        if (! this.onlyPrimarilySortOrder())
        #            this.statusSort();
        #
        #        this.sequenceSort();
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #initCheckBoxControl
        #protected void initCheckBoxControl(str _id)
        #{
        #    ;
        #    checkBoxPreventAtStartup = infolog.globalCache().get(classStr(FormCheckBoxControl), _id, checkBoxPreventAtStartup);
        #}
      ENDSOURCE
      SOURCE #initHtmlControl
        #protected void initHtmlControl(str _id)
        #{
        #    ObjectIdent objectIdent = infolog.globalCache().get(classStr(FormActiveXControl), _id, null);
        #    ;
        #
        #    if (objectIdent)
        #    {
        #        html = objectIdent.object();
        #        htmlInitialized = true;
        #    }
        #}
      ENDSOURCE
      SOURCE #insertItem
        #protected boolean insertItem(SysCheckListItem _sysCheckListItem)
        #{
        #    boolean found = true;
        #;
        #
        #    checkList.addStart(_sysCheckListItem.getItemId());
        #    return found;
        #}
      ENDSOURCE
      SOURCE #isEmpty
        #protected boolean isEmpty()
        #{
        #    boolean ret = ! this.needReStart();
        #    ListIterator checkListIterator = new ListIterator(checkList);
        #    SysCheckListItem sysCheckListItem;
        #    ;
        #
        #    if (!checkList.empty())
        #    {
        #        checkListIterator.begin();
        #        while (checkListIterator.more() && ret)
        #        {
        #            if (checkMap.exists(checkListIterator.value()))
        #            {
        #                sysCheckListItem = checkMap.lookup(checkListIterator.value());
        #                if (sysCheckListItem.getState() != SysCheckListStatus::Finished &&
        #                    sysCheckListItem.visible() && sysCheckListItem.isRunnable())
        #                    ret = false; //Something has not been finished...
        #            }
        #            checkListIterator.next();
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isRunnable
        #abstract protected boolean isRunnable()
        #{
        #    //Should be overridden to return condition for checklist
        #}
      ENDSOURCE
      SOURCE #makeLink
        #protected str makeLink(MenuItemName _name, MenuItemType _type, SysCheckListStatus _status = SysCheckListStatus::Ready)
        #{
        #    str ret;
        #
        #    if (_status != SysCheckListStatus::Deferred)
        #    {
        #        switch (_type)
        #        {
        #            case MenuItemType::Action :
        #                ret = 'MenuItemAction://';
        #                break;
        #            case MenuItemType::Display :
        #                ret = 'MenuItemDisplay://';
        #                break;
        #            case MenuItemType::Output :
        #                ret = 'MenuItemOutput://';
        #                break;
        #            default :
        #        }
        #        ret += _name;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #mandatoryFinished
        #/// <summary>
        #/// Verifies whether all of the mandatory items of a checklist have finished.
        #/// </summary>
        #/// <returns>
        #/// true if all of the mandatory items have finished; otherwise, false.
        #/// </returns>
        #public boolean mandatoryFinished()
        #{
        #    // New public method to prevent breaking existing API
        #    return this.mandatoryItemsFinished();
        #}
      ENDSOURCE
      SOURCE #mandatoryItems
        #protected container mandatoryItems()
        #{
        #    ListIterator        checkListIterator = new ListIterator(checkList);
        #    SysCheckListItem    sysCheckListItem;
        #    container           mandatoryCon = conNull();
        #
        #    if (!checkList.empty())
        #    {
        #        checkListIterator.begin();
        #
        #        while (checkListIterator.more())
        #        {
        #            if (checkMap.exists(checkListIterator.value()))
        #            {
        #                sysCheckListItem = checkMap.lookup(checkListIterator.value());
        #
        #                if (sysCheckListItem.visible() && sysCheckListItem.isRunnable() && !sysCheckListItem.indeterminate())
        #                {
        #                    mandatoryCon += [checkListIterator.value()];
        #                }
        #            }
        #
        #            checkListIterator.next();
        #        }
        #    }
        #
        #    return mandatoryCon;
        #}
      ENDSOURCE
      SOURCE #mandatoryItemsFinished
        #protected boolean mandatoryItemsFinished()
        #{
        #    ListEnumerator   listEnumerator    = checkList.getEnumerator();
        #    SysCheckListItem sysCheckListItem;
        #    container        c                 = this.mandatoryItems();
        #    ;
        #
        #    while (listEnumerator.moveNext()) //Loop through all list items
        #    {
        #        // Look up the actual item instance for status
        #        if (checkMap.exists(listEnumerator.current()))
        #        {
        #            sysCheckListItem = checkMap.lookup(listEnumerator.current());
        #
        #            // if it is a mandatory item
        #            if (conFind(c, classIdGet(sysCheckListItem)))
        #            {
        #                // check for current status in memory
        #                if (sysCheckListItem.getState()  != SysCheckListStatus::Finished)
        #                {
        #                    return false;
        #                }
        #            }
        #        }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #maybeDirRTL
        #// BASIS bidi
        #public str maybeDirRTL()
        #{
        #    str sDir;
        #
        #    if (currentSessionLanguageRTL())
        #        sDir = ' dir="rtl"';
        #    else
        #        sDir = '';
        #
        #    return sDir;
        #}
      ENDSOURCE
      SOURCE #needReStart
        #public boolean needReStart(boolean _restart = false)
        #{
        #    if (prmisDefault(_restart)) //no parm - just get global
        #        return infolog.globalCache().get(this.getName(), #Restart, false);
        #
        #    infolog.globalCache().set(this.getName(), #Restart, _restart);
        #    return _restart;
        #}
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #    ;
        #    sortWithStatusPreference = false;
        #    onlyPrimarilySortOrder   = true;
        #}
      ENDSOURCE
      SOURCE #onlyPrimarilySortOrder
        #protected boolean onlyPrimarilySortOrder(boolean _onlyPrimarilySortOrder = onlyPrimarilySortOrder)
        #{
        #;
        #    onlyPrimarilySortOrder = _onlyPrimarilySortOrder;
        #    return onlyPrimarilySortOrder;
        #}
        #
      ENDSOURCE
      SOURCE #parmIsSetupMode
        #public boolean parmIsSetupMode(boolean _isSetupMode = isSetupMode)
        #{
        #    isSetupMode = _isSetupMode;
        #
        #    return isSetupMode;
        #}
        #
      ENDSOURCE
      SOURCE #preRunFormInInitialization
        #/// <summary>
        #/// Peforms operation before running the form in the initialization.
        #/// </summary>
        #/// <returns>
        #/// True if setting the cache is needed; otherwise, false.
        #/// </returns>
        #// <GCN>
        #protected boolean preRunFormInInitialization()
        #{
        #    return true;
        #}
        #// </GCN>
      ENDSOURCE
      SOURCE #preventAtStartup
        #/// <summary>
        #/// Checks to see whether a checklist has been prevented at startup.
        #/// </summary>
        #/// <returns>
        #/// true if the checklist has been prevented at startup; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// Normally, there is a check box on every checklist UI to enable user to disable the checklist at
        #/// startup. X++ code can also be used to disable a checklist.
        #/// </remarks>
        #public boolean preventAtStartup()
        #{
        #    // New public method to prevent breaking existing API
        #    return this.canBePreventedAtStartup();
        #}
      ENDSOURCE
      SOURCE #refresh
        #protected void refresh()
        #{
        #    ListEnumerator listEnumerator = checkList.getEnumerator();
        #    SysCheckListItem sysCheckListItem;
        #;
        #
        #    while (listEnumerator.moveNext()) //Loop through all list items
        #    {
        #        if (checkMap.exists(listEnumerator.current()))
        #        {
        #            sysCheckListItem = checkMap.lookup(listEnumerator.current());
        #            sysCheckListItem.flushState();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #runSilent
        #protected void runSilent()
        #{
        #    //Should be overridden to include items that can run in silent mode
        #}
      ENDSOURCE
      SOURCE #save
        #/*
        #    Use: SysSetupLog::saveEx(_name, _description);
        #    for global checklists.
        #
        #    Use: SysSetupCompanyLog::saveEx(_name, _description);
        #    for company specific checklists.
        #
        #    Use the save instead of saveEx if application and kernel build no. not is necessery
        #*/
        #abstract public void save(IdentifierName   _name,
        #                          ClassDescription _description = '')
        #{
        #}
      ENDSOURCE
      SOURCE #sequenceSort
        #protected void sequenceSort()
        #{
        #    SysCheckListItem sysCheckListItem;
        #    ListIterator listIterator = new ListIterator(checkList);
        #    Map map = new Map(Types::Integer, Types::Class);
        #    SetIterator setIterator;
        #    container newList = conNull(), seq = conNull(), temp;
        #    int i;
        #    boolean foundInSeq;
        #    ;
        #
        #    //Insert all item without seq in newlist - store others in seq
        #    listIterator.begin();
        #    while (listIterator.more())
        #    {
        #        if (checkMap.exists(listIterator.value()))
        #        {
        #            sysCheckListItem = checkMap.lookup(listIterator.value());
        #            if (sysCheckListItem.getSequence())
        #            {
        #                seq += listIterator.value();
        #                map.insert(listIterator.value(),sysCheckListItem.getSequence());
        #            }
        #            else
        #            {
        #                newList += listIterator.value();
        #            }
        #        }
        #        listIterator.next();
        #    }
        #
        #    while (conLen(seq))
        #    {
        #        temp = conNull();
        #
        #        for (i=1;i<=conLen(seq);i++)
        #        {
        #            foundInSeq  = false;
        #            setIterator = new SetIterator(map.lookup(conPeek(seq,i)));
        #            setIterator.begin();
        #            while (setIterator.more())
        #            {
        #                if (conFind(seq, setIterator.value()))
        #                    foundInSeq = true;
        #
        #                setIterator.next();
        #            }
        #            if (!foundInSeq)
        #            {
        #                //None of the items in the sequence for the current item was
        #                //found in the container where the other items with sequence are stored
        #                // - so the item can be added to newList
        #                newList += conPeek(seq,i);
        #            }
        #            else
        #            {
        #                //There are still items in seq that should be added to newList before
        #                //this one...
        #                temp += conPeek(seq,i);
        #            }
        #        }
        #
        #        if (conLen(seq) == conLen(temp))
        #        {
        #            //All items in seq are related in some errorously way
        #            //We know seq contains items - so add first element to list
        #            newList += conPeek(temp,1);
        #            temp = conDel(temp,1,1);
        #        }
        #
        #        seq = temp;
        #    }
        #
        #    //and create the new sorted list
        #    checkList = con2List(newList);
        #}
      ENDSOURCE
      SOURCE #sortWithStatusPreference
        #protected boolean sortWithStatusPreference(boolean _value = sortWithStatusPreference)
        #{
        #;
        #    sortWithStatusPreference = _value;
        #    return sortWithStatusPreference;
        #}
      ENDSOURCE
      SOURCE #statusSort
        #protected void statusSort()
        #{
        #    SysCheckListItem sysCheckListItem;
        #    ListIterator listIterator = new ListIterator(checkList);
        #    Map map = new Map(Types::Integer, Types::Container);
        #    container con = conNull();
        #    ;
        #
        #    map.insert(#defaultMap,conNull());
        #    map.insert(SysCheckListStatus::Ready,conNull());
        #    map.insert(SysCheckListStatus::Finished,conNull());
        #    map.insert(SysCheckListStatus::Deferred,conNull());
        #    map.insert(SysCheckListStatus::Indeterminate,conNull());
        #
        #    //Insert all item in checklist in map
        #    listIterator.begin();
        #    while (listIterator.more())
        #    {
        #        if (checkMap.exists(listIterator.value()))
        #        {
        #            sysCheckListItem = checkMap.lookup(listIterator.value());
        #            if (map.exists(sysCheckListItem.getState()))
        #            {
        #                map.insert(sysCheckListItem.getState(), map.lookup(sysCheckListItem.getState()) + listIterator.value());
        #            }
        #            else
        #            {
        #                map.insert(#defaultMap, map.lookup(#defaultMap) + listIterator.value());
        #            }
        #        }
        #        listIterator.next();
        #    }
        #
        #    //Merge containers from map
        #    con =  map.lookup(SysCheckListStatus::Finished);
        #    con += map.lookup(SysCheckListStatus::Ready);
        #    con += map.lookup(SysCheckListStatus::Indeterminate);
        #    con += map.lookup(#defaultMap);
        #    con += map.lookup(SysCheckListStatus::Deferred);
        #
        #    //and create the new sorted list
        #    checkList = con2List(con);
        #}
      ENDSOURCE
      SOURCE #updateHtml
        #protected void updateHtml(boolean _refresh = true)
        #{
        #    int i;
        #    boolean madatoryItemsFinished;
        #
        #    if (htmlInitialized)
        #    {
        #        if (_refresh)
        #        {
        #            this.refresh();
        #        }
        #
        #        //Get scroll
        #        i = this.getScroll();
        #
        #        madatoryItemsFinished = this.mandatoryItemsFinished();
        #        checkBoxPreventAtStartup.enabled(madatoryItemsFinished);
        #        // if mandatory items are reset to unfinished after a re-execute
        #        // clear the checkbox
        #        if (!madatoryItemsFinished)
        #        {
        #            checkBoxPreventAtStartup.checked(false);
        #        }
        #        SysHelp::showHTML(html, this.getHtml());
        #        html.update();
        #
        #        this.gotoScroll(i);
        #    }
        #}
      ENDSOURCE
      SOURCE #checkListItems
        #protected static container checkListItemsHook()
        #{
        #    return [classNum(SysCheckListItem_Budget),
        #    classNum(SysCheckListItem_BudgetCode),
        #    classNum(SysCheckListItem_BudgetModel)];
        #}
      ENDSOURCE
      SOURCE #checkListItemsHook
        #// This method should never contain any sys classes
        #protected static container checkListItemsHook()
        #{
        #    return [
        #            classNum(RetailStoreSetup_CreateStoreDatabase),
        #            classNum(RetailStoreSetup_CreateRealTimeSvc),
        #            classNum(RetailStoreSetup_CreateSynSvcForStore),
        #            classNum(RetailStoreSetup_CreateRetailStore),
        #            classNum(RetailStoreSetup_CreateSynSvcForAXSide),
        #            classNum(RetailStoreSetup_SetRealTimeSvcProfile),
        #            classNum(RetailStoreSetup_SetChannelDataGroup),
        #            classNum(RetailStoreSetup_SetCDXWorkingFolder),
        #            classNum(RetailStoreSetup_SetStoreDatabaseProfile),
        #            classNum(RetailStoreSetup_CreateStoresRegister),
        #            classNum(RetailStoreSetup_SetSchJobConfigration),
        #            classNum(RetailStoreSetup_ResetStatus),
        #            classNum(RetailStoreSetup_CreateHardwareProfile),
        #            classNum(RetailStoreSetup_CreateFunctionalityProf),
        #            classNum(RetailStoreSetup_CreateVisualProfile),
        #            classNum(RetailCheckListItem_InstallOnlineStore),
        #            classNum(RetailCheckListItem_SetupDataGroup),
        #            classNum(RetailCheckListItem_SetupDBProfile),
        #            classNum(RetailCheckListItem_SetupTSProfile),
        #            classNum(RetailCheckListItem_SetupPaymConnector),
        #            classNum(RetailCheckListItem_CreateAttributes),
        #            classNum(RetailCheckListItem_CreateAttributeGroup),
        #            classNum(RetailCheckListItem_CreateNavHierarchy),
        #            classNum(RetailCheckListItem_CreateOnlineStore),
        #            classNum(RetailCheckListItem_AddStoreToOrgHierarc),
        #            classNum(RetailCheckListItem_AddDlvModeToStore),
        #            classNum(RetailCheckListItem_MapAttributes),
        #            classNum(RetailCheckListItem_PublishOnlineStore),
        #            classNum(RetailCheckListItem_DeployInitialDataset),
        #            classNum(RetailCheckListItem_SetupDistSchedule),
        #            classNum(RetailCheckListItem_AddAssortmentToStore),
        #            classNum(RetailCheckListItem_ManageCatalogs),
        #            classNum(RetailCheckListItem_ManageSPExperience),
        #            classNum(SysCheckListItem_ConfigurationKeyUpg),
        #            className2Id(classStr(SysCheckListItem_LoadUpdateExScripts)),
        #            className2Id(classStr(SysCheckListItem_RestartAllAosServ)),
        #            classNum(SysCheckListItem_SysUpdateCodeInfo),
        #            classNum(SysCheckListItem_SysUpdateCodeDetectCon),
        #            classNum(SysCheckListItem_SysUpdateCodeMetaMerge),
        #            classNum(SysCheckListItem_SysUpdateCodeRemoveMode),
        #            classNum(SysCheckListItem_SysUpdateCodeExpModel),
        #            classNum(SysCheckListItem_SysUpdateCodeExpStore),
        #            classNum(SysCheckListItem_SysUpdateCodeUpgrade),
        #            classNum(SysCheckListItem_SysUpdateCodeLicense),
        #            classNum(SysCheckListItem_SysUpdateCodeCILInit),
        #            classNum(SysCheckListItem_SysUpdateCodeCILFinal),
        #            classNum(SysCheckListItem_SysUpdateCodeCompilInit),
        #            classNum(SysCheckListItem_SysUpdateCodeCompile),
        #            classNum(SysCheckListItem_SysUpdateCodeRestartAos),
        #            classNum(SysCheckListItem_SysUpdateCodeResAosCIL),
        #            classNum(SysCheckListItem_SysUpdateCodeSyncDB),
        #            classNum(SysCheckListItem_SysUpdateImportStore),
        #            classNum(SysCheckListItem_SysUpdateRestartAos),
        #            classNum(SysCheckListItem_SysUpdateCIL),
        #            classNum(SysCheckListItem_AdditionalUpdate),
        #            classNum(SysCheckListItem_ApplicationPreUpdate),
        #            classNum(SysCheckListItem_ApplicationUpdate),
        #            classNum(SysCheckListItem_SynchronizeUpdate)
        #            // <GEERU>
        #            , classNum(SysCheckListItem_SysUpgradeAlignStrEdtSz)
        #            // </GEERU>
        #            , className2Id(classStr(SysCheckListItem_CodeMerge))
        #            , classNum(SysCheckListItem_SysUpdateCodeLcs)
        #            ];
        #}
      ENDSOURCE
      SOURCE #checkLists
        #protected static container checkListsHook()
        #{
        #    return [classNum(SysCheckList_Budget)];
        #}
        #
      ENDSOURCE
      SOURCE #checkListsHook
        #protected static container checkListsHook()
        #{
        #    return conNull();
        #}
      ENDSOURCE
      SOURCE #compileChecklists
        #private static void compileChecklists()
        #{
        #    SysModelElement modelElement;
        #    TreeNodePath path;
        #    TreeNode checkListItemNode;
        #
        #    while select RecId, RootModelElement, Name, ParentId, ElementType
        #        from modelElement
        #        where modelElement.Name like 'SysCheckList*' && modelElement.ElementType == UtilElementType::Class
        #    {
        #        path = SysTreeNode::modelElement2RootElementPath(modelElement);
        #        checkListItemNode = TreeNode::findNode(path);
        #        if(checkListItemNode)
        #        {
        #            checkListItemNode.AOTcompile(0, true);
        #            checkListItemNode.treeNodeRelease();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #createDATDataarea
        ##Admin
        #static server void createDATDataarea()
        #{
        #    DataArea    dataArea;
        #    ;
        #    ttsbegin;
        #
        #    new SkipAOSValidationPermission().assert();
        #
        #    select forupdate dataArea
        #        where dataArea.Id == #DatCompany &&
        #              dataArea.IsVirtual == false;
        #
        #    if(!dataArea)
        #    {
        #        dataArea.clear();
        #        dataArea.skipAosValidation(true);
        #        dataArea.Id         = #DatCompany;
        #        dataArea.Name       = "@SYS15585";
        #        dataArea.IsVirtual  = false;
        #        dataArea.TimeZone = DateTimeUtil::getUserPreferredTimeZone();
        #        dataArea.insert();
        #        CodeAccessPermission::revertAssert();
        #        ReleaseUpdateDB::runWithoutUpdate(#DatCompany);
        #    }
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #findDependentItems
        #protected static void findDependentItems(ClassId _searchForId, Set _searchSet, SysCheckList _sysCheckList, Set _setDependents)
        #{
        #    List listDependencies;
        #    ListIterator listIterator;
        #    SetIterator setIterator = new SetIterator(_searchSet);
        #    SysCheckListItem searchInItem;
        #    ;
        #
        #    setIterator.begin();
        #    while (setIterator.more())
        #    {
        #        searchInItem = _sysCheckList.getItem(setIterator.value());
        #        if (searchInItem)
        #        {
        #            listDependencies = searchInItem.getDependency();
        #            if (listDependencies)
        #            {
        #                listIterator = new ListIterator(listDependencies);
        #                listIterator.begin();
        #                while (listIterator.more())
        #                {
        #                    if (listIterator.value() == _searchForId)
        #                    {
        #                        if (!_setDependents.in(setIterator.value()))
        #                        {
        #                            _setDependents.add(setIterator.value());
        #                            SysCheckList::findDependentItems(setIterator.value(), _searchSet, _sysCheckList, _setDependents);
        #                        }
        #                        break;
        #                    }
        #                    listIterator.next();
        #                }
        #            }
        #        }
        #        setIterator.next();
        #    }
        #}
      ENDSOURCE
      SOURCE #finished
        #static public void finished(ClassId _id)
        #{
        #    SysDictClass dictClass;
        #    SysCheckList::updateItem(_id, SysCheckListStatus::Finished);
        #
        #    dictClass = new SysDictClass(_id);
        #
        #    if (dictClass && dictClass.isImplementing(classNum(SysCheckListInterfaceUpgrade)))
        #    {
        #        //Log, so we have an idea on how long a checklist item takes from the time user clicks on the checklist
        #        ReleaseUpdateDB::log(strFmt('Checklist finished: %1', classId2Name(_id)), ReleaseUpdateLogType::CheckList);
        #    }
        #}
      ENDSOURCE
      SOURCE #getAllCheckListItems
        #static protected Set getAllCheckListItems(ClassId _interfaceId = 0)
        #{
        #    //Create list of all items - then check each if it is empty
        #    Set itemSet = new Set(Types::Integer);
        #    SysDictClass sysDictClass;
        #    int i;
        #    ;
        #
        #    //extendedBy takes 20 sec on startup...
        #    //This is a bit faster...
        #    for (i=conLen(SysCheckList::checkListItems()); i>0 ;i--)
        #    {
        #        sysDictClass = new SysDictClass(conPeek(SysCheckList::checkListItems(),i));
        #
        #        if ((!_interfaceId || sysDictClass.isImplementing(_interfaceId)) //correct interface or all
        #         && !sysDictClass.isAbstract())
        #        {
        #            itemSet.add(conPeek(SysCheckList::checkListItems(),i));
        #        }
        #    }
        #    return itemSet;
        #}
      ENDSOURCE
      SOURCE #getCheckList
        #/// <summary>
        #/// Gets an instance of a checklist class from its class ID.
        #/// </summary>
        #/// <param name="_classId">
        #/// The class ID of the checklist.
        #/// </param>
        #/// <returns>
        #/// The checklist object that has been created.
        #/// </returns>
        #/// <remarks>
        #/// Once a checklist object is created, its reference is also stored in the global cache.
        #/// </remarks>
        #public static SysCheckList getCheckList(ClassId _classId)
        #{
        #    SysCheckList sysCheckList;
        #    SysCheckListItem sysCheckListItem;
        #    ListIterator listIterator;
        #    ;
        #
        #    //Create list of all checklists - then check each if it is empty
        #    listIterator = new ListIterator(SysCheckList::checkLists());
        #    listIterator.begin();
        #    while (listIterator.more())
        #    {
        #        if (! (new DictClass(listIterator.value()).isAbstract()))
        #        {
        #            //Try to get list
        #            sysCheckList = infolog.globalCache().get(classId2Name(listIterator.value()),
        #                                                     classId2Name(listIterator.value()), null);
        #            if (sysCheckList)
        #            {
        #                sysCheckListItem = sysCheckList.getItem(_classId);
        #                if (_classId && sysCheckListItem)
        #                {
        #                    break;
        #                }
        #            }
        #        }
        #        listIterator.next();
        #    }
        #
        #    return sysCheckList;
        #}
      ENDSOURCE
      SOURCE #getDefaultStylesheet
        #protected static str getDefaultStylesheet()
        #{
        #    str themeName = SysCheckList::themeName();
        #    ;
        #
        #    switch (themeName)
        #    {
        #        case #Theme_Classic:
        #            return SysCheckList::getStylesheetAllClassicTheme();
        #
        #        case #Theme_XPBlue:
        #            return SysCheckList::getStyleXPBlue();
        #
        #        case #Theme_XPOlive:
        #            return SysCheckList::getStyleXPOlive();
        #
        #        case #Theme_XPSilver:
        #            return SysCheckList::getStyleXPSilver();
        #
        #        default:
        #            return SysCheckList::getStylesheetAllClassicTheme();
        #    }
        #
        #    return SysCheckList::getStylesheetAllClassicTheme();
        #
        #}
      ENDSOURCE
      SOURCE #getStylesheetAllClassicTheme
        #protected static str getStylesheetAllClassicTheme()
        #{
        #;
        #return @"
        #<STYLE>
        #
        #body
        #{
        #/* CHS: Changed fontsequence to match rest of app. Changed font size from 70% to 80%;*/
        #
        #font-size: 8pt;
        #font-family: 'tahoma','arial', 'verdana';
        #color:WindowText;
        #background-color:ThreeDFace;
        #/* CHS: removed: background:#CAB99F;*/
        #}
        #/* CHS: NEW CLASS */
        #.TableBackground
        #{
        #    background-color:Window;
        #}
        #h1
        #{
        #color:WindowText; /* Theme compliance*/
        #/* CHS: removed color: Black ; */
        #font-size: 125%;
        #margin-bottom: 0.50em;
        #}
        #h2
        #{
        #color:WindowText; /* Theme compliance*/
        #/* CHS: removed color: Black ; */
        #font-size: 110%;
        #margin-top: 2.00em;
        #margin-bottom: 0.50em;
        #}
        #h3
        #{
        #font-weight: bold;
        #font-size: 100%;
        #margin-top: 1.20em;
        #margin-bottom: 0.50em;
        #}
        #h4
        #{
        #font-weight: bold;
        #font-size: 100%;
        #margin-top: 1.20em;
        #margin-bottom: 0.50em;
        #}
        #table
        #{
        #font-size: 100%
        #}
        #th
        #{
        #background-color: ThreeDLighShadow; /* CHS: I am uncertain of this color. Need to see it in effect */
        #text-align: left;
        #}
        #tr
        #{
        #vertical-align: top;
        #}
        #td
        #{
        #vertical-align: top;
        #}
        #p
        #{
        #margin-top: 0.60em;
        #margin-bottom: 0.60em;
        #}
        #
        #hr
        #{
        #    color: WindowText;
        #    background-color: WindowText;
        #height: 1px;
        #/* CHS:  removed:
        #color: black;
        #background-color: black;*/
        #
        #}
        #/* CHS: Very good. Do not change link colors. */
        #a
        #{
        #text-decoration: none
        #}
        #a:hover
        #{
        #text-decoration: underline
        #}
        #ol
        #{
        #font-size: 100%;
        #margin-top: 0.50em;
        #margin-bottom: 0.00em;
        #margin-left: 4.00em;
        #}
        #ol ul
        #{
        #margin-top: 0.50em;
        #list-style: disc;
        #}
        #ul
        #{
        #font-size:100%;
        #margin-top: 0.50em;
        #margin-bottom: 0.00em;
        #}
        #ul ul
        #{
        #margin-top: 0.50em;
        #list-style: disc;
        #}
        #li
        #{
        #margin-bottom: 0.70em;
        #margin-left: -2.00em;
        #}
        #td.indextable
        #{
        #background-color: transparent;
        #}
        #.indent
        #{
        #margin-left: 2.00em;
        #}
        #.highlight
        #{
        #    background-color: Highlight;
        #/* CHS: Removed this: background-color: #add8e6;*/
        #}
        #p.tips
        #{
        #margin-top: 0.60em;
        #}
        #p.notes
        #{
        #margin-top: 0.60em;
        #}
        #p.code
        #{
        #font-size: 125%;
        #font-family: 'courier new', courier;
        #}
        #span.userinterface
        #{
        #}
        #span.userinterface span.label
        #{
        #font-weight: bold;
        #}
        #div.configurationkey
        #{
        #color: navy;
        #font-weight: bold;
        #}
        #div.feature
        #{
        #color: navy;
        #}
        #div.security
        #{
        #color: navy;
        #}
        #
        #
        #/* CHS: changed completely*/
        #h1.naviheader
        #{
        #    font-family: 'arial';
        #    color:ButtonText;
        #    font-size:large;
        #    letter-spacing:1px;
        #}
        #.label
        #{
        #font-weight: bold;
        #}
        #
        #</STYLE>";
        #}
      ENDSOURCE
      SOURCE #getStyleXPBlue
        #protected static str getStyleXPBlue()
        #{
        #;
        #return @"
        #<STYLE>
        #body
        #{
        #/* CHS: Changed fontsequence to match rest of app. Changed font size from 70% to 80%;*/
        #
        #font-size: 8pt;
        #font-family: 'tahoma','arial', 'verdana';
        #color:WindowText;
        #background-color:#ddecfe;
        #/* CHS: Added filter;*/
        #filter:progid:DXImageTransform.Microsoft.Gradient( startColorstr='#ddecfe', endColorstr='#4a7ac9', gradientType='0');
        #
        #/* CHS: removed: background:#CAB99F;*/
        #}
        #/* CHS: NEW CLASS */
        #.TableBackground
        #{
        #    background-color:Window;
        #}
        #h1
        #{
        #color:background; /* Theme compliance*/
        #/* CHS: removed color: Black ; */
        #font-size: 125%;
        #margin-bottom: 0.50em;
        #}
        #h2
        #{
        #color:background; /* Theme compliance*/
        #/* CHS: removed color: Black ; */
        #font-size: 110%;
        #margin-top: 2.00em;
        #margin-bottom: 0.50em;
        #}
        #h3
        #{
        #font-weight: bold;
        #font-size: 100%;
        #margin-top: 1.20em;
        #margin-bottom: 0.50em;
        #}
        #h4
        #{
        #font-weight: bold;
        #font-size: 100%;
        #margin-top: 1.20em;
        #margin-bottom: 0.50em;
        #}
        #table
        #{
        #font-size: 100%
        #}
        #th
        #{
        #background-color: ThreeDLighShadow; /* CHS: I am uncertain of this color. Need to see it in effect */
        #text-align: left;
        #}
        #
        #tr
        #{
        #vertical-align: top;
        #}
        #td
        #{
        #vertical-align: top;
        #}
        #p
        #{
        #margin-top: 0.60em;
        #margin-bottom: 0.60em;
        #}
        #
        #hr
        #{
        #    color: WindowText;
        #    background-color: WindowText;
        #height: 1px;
        #/* CHS:  removed:
        #color: black;
        #background-color: black;*/
        #
        #}
        #/* CHS: Very good. Do not change link colors. */
        #a
        #{
        #text-decoration: none
        #}
        #a:hover
        #{
        #text-decoration: underline
        #}
        #ol
        #{
        #font-size: 100%;
        #margin-top: 0.50em;
        #margin-bottom: 0.00em;
        #margin-left: 4.00em;
        #}
        #ol ul
        #{
        #margin-top: 0.50em;
        #list-style: disc;
        #}
        #ul
        #{
        #font-size:100%;
        #margin-top: 0.50em;
        #margin-bottom: 0.00em;
        #}
        #ul ul
        #{
        #margin-top: 0.50em;
        #list-style: disc;
        #}
        #li
        #{
        #margin-bottom: 0.70em;
        #margin-left: -2.00em;
        #}
        #td.indextable
        #{
        #background-color: transparent;
        #}
        #.indent
        #{
        #margin-left: 2.00em;
        #}
        #.highlight
        #{
        #    background-color: Highlight;
        #/* CHS: Removed this: background-color: #add8e6;*/
        #}
        #p.tips
        #{
        #margin-top: 0.60em;
        #}
        #p.notes
        #{
        #margin-top: 0.60em;
        #}
        #p.code
        #{
        #font-size: 125%;
        #font-family: 'courier new', courier;
        #}
        #span.userinterface
        #{
        #}
        #span.userinterface span.label
        #{
        #font-weight: bold;
        #}
        #div.configurationkey
        #{
        #color: navy;
        #font-weight: bold;
        #}
        #div.feature
        #{
        #color: navy;
        #}
        #div.security
        #{
        #color: navy;
        #}
        #
        #
        #/* CHS: changed completely*/
        #h1.naviheader
        #{
        #    font-family: 'arial';
        #    color:ButtonText;
        #    font-size:large;
        #    letter-spacing:1px;
        #}
        #.label
        #{
        #    font-weight: bold;
        #}
        #
        #</STYLE>";
        #}
      ENDSOURCE
      SOURCE #getStyleXPOlive
        #protected static str getStyleXPOlive()
        #{
        #;
        #return @"
        #<STYLE>
        #
        #body
        #{
        #    /* CHS: removed: background:#CAB99F;*/
        #/* CHS: Changed fontsequence to match rest of app. Changed font size from 70% to 80%;*/
        #
        #font-size: 8pt;
        #font-family: 'tahoma','arial', 'verdana';
        #color:WindowText;
        #background-color:#F3F2E7;
        #filter:progid:DXImageTransform.Microsoft.Gradient( startColorstr='#f3f2e7', endColorstr='#9fab80', gradientType='0');
        #
        #/* CHS: removed: background:#CAB99F;*/
        #}
        #/* CHS: NEW CLASS */
        #.TableBackground
        #{
        #    background-color:Window;
        #}
        #h1
        #{
        #color:#5A6B46; /* Theme compliance*/
        #/* CHS: removed color: Black ; */
        #font-size: 125%;
        #margin-bottom: 0.50em;
        #}
        #h2
        #{
        #color:#5A6B46; /* Theme compliance*/
        #/* CHS: removed color: Black ; */
        #font-size: 110%;
        #margin-top: 2.00em;
        #margin-bottom: 0.50em;
        #}
        #h3
        #{
        #font-weight: bold;
        #font-size: 100%;
        #margin-top: 1.20em;
        #margin-bottom: 0.50em;
        #}
        #h4
        #{
        #font-weight: bold;
        #font-size: 100%;
        #margin-top: 1.20em;
        #margin-bottom: 0.50em;
        #}
        #table
        #{
        #font-size: 100%
        #}
        #th
        #{
        #background-color: ThreeDLighShadow; /* CHS: I am uncertain of this color. Need to see it in effect */
        #text-align: left;
        #}
        #
        #tr
        #{
        #vertical-align: top;
        #}
        #td
        #{
        #vertical-align: top;
        #}
        #p
        #{
        #margin-top: 0.60em;
        #margin-bottom: 0.60em;
        #}
        #
        #hr
        #{
        #    color: WindowText;
        #    background-color: WindowText;
        #height: 1px;
        #/* CHS:  removed:
        #color: black;
        #background-color: black;*/
        #
        #}
        #/* CHS: Very good. Do not change link colors. */
        #a
        #{
        #text-decoration: none
        #}
        #a:hover
        #{
        #text-decoration: underline
        #}
        #ol
        #{
        #font-size: 100%;
        #margin-top: 0.50em;
        #margin-bottom: 0.00em;
        #margin-left: 4.00em;
        #}
        #ol ul
        #{
        #margin-top: 0.50em;
        #list-style: disc;
        #}
        #ul
        #{
        #font-size:100%;
        #margin-top: 0.50em;
        #margin-bottom: 0.00em;
        #}
        #ul ul
        #{
        #margin-top: 0.50em;
        #list-style: disc;
        #}
        #li
        #{
        #margin-bottom: 0.70em;
        #margin-left: -2.00em;
        #}
        #td.indextable
        #{
        #background-color: transparent;
        #}
        #.indent
        #{
        #margin-left: 2.00em;
        #}
        #.highlight
        #{
        #    background-color: Highlight;
        #/* CHS: Removed this: background-color: #add8e6;*/
        #}
        #p.tips
        #{
        #margin-top: 0.60em;
        #}
        #p.notes
        #{
        #margin-top: 0.60em;
        #}
        #p.code
        #{
        #font-size: 125%;
        #font-family: 'courier new', courier;
        #}
        #span.userinterface
        #{
        #}
        #span.userinterface span.label
        #{
        #font-weight: bold;
        #}
        #div.configurationkey
        #{
        #color: navy;
        #font-weight: bold;
        #}
        #div.feature
        #{
        #color: navy;
        #}
        #div.security
        #{
        #color: navy;
        #}
        #
        #
        #/* CHS: changed completely*/
        #h1.naviheader
        #{
        #    font-family: 'arial';
        #    color:ButtonText;
        #    font-size:large;
        #    letter-spacing:1px;
        #}
        #.label
        #{
        #font-weight: bold;
        #}
        #
        #
        #</STYLE>";
        #}
      ENDSOURCE
      SOURCE #getStyleXPSilver
        #protected static str getStyleXPSilver()
        #{
        #;
        #return @"
        #<STYLE>
        #
        #body
        #{
        #/* CHS: Changed fontsequence to match rest of app. Changed font size from 70% to 80%;*/
        #
        #font-size: 8pt;
        #font-family: 'tahoma','arial', 'verdana';
        #color:WindowText;
        #background-color:#EEEEF4;
        #filter:progid:DXImageTransform.Microsoft.Gradient( startColorstr='#eeeef4', endColorstr='#a2a2b5', gradientType='0');
        #
        #
        #/* CHS: removed: background:#CAB99F;*/
        #}
        #/* CHS: NEW CLASS */
        #.TableBackground
        #{
        #    background-color:Window;
        #}
        #h1
        #{
        #color:#5C5B79; /* Theme compliance*/
        #/* CHS: removed color: Black ; */
        #font-size: 125%;
        #margin-bottom: 0.50em;
        #}
        #h2
        #{
        #color:#5C5B79; /* Theme compliance*/
        #/* CHS: removed color: Black ; */
        #font-size: 110%;
        #margin-top: 2.00em;
        #margin-bottom: 0.50em;
        #}
        #h3
        #{
        #font-weight: bold;
        #font-size: 100%;
        #margin-top: 1.20em;
        #margin-bottom: 0.50em;
        #}
        #h4
        #{
        #font-weight: bold;
        #font-size: 100%;
        #margin-top: 1.20em;
        #margin-bottom: 0.50em;
        #}
        #table
        #{
        #font-size: 100%
        #}
        #th
        #{
        #background-color: ThreeDLighShadow; /* CHS: I am uncertain of this color. Need to see it in effect */
        #text-align: left;
        #}
        #
        #tr
        #{
        #vertical-align: top;
        #}
        #td
        #{
        #vertical-align: top;
        #}
        #p
        #{
        #margin-top: 0.60em;
        #margin-bottom: 0.60em;
        #}
        #
        #hr
        #{
        #    color: WindowText;
        #    background-color: WindowText;
        #height: 1px;
        #/* CHS:  removed:
        #color: black;
        #background-color: black;*/
        #
        #}
        #/* CHS: Very good. Do not change link colors. */
        #a
        #{
        #text-decoration: none
        #}
        #a:hover
        #{
        #text-decoration: underline
        #}
        #ol
        #{
        #font-size: 100%;
        #margin-top: 0.50em;
        #margin-bottom: 0.00em;
        #margin-left: 4.00em;
        #}
        #ol ul
        #{
        #margin-top: 0.50em;
        #list-style: disc;
        #}
        #ul
        #{
        #font-size:100%;
        #margin-top: 0.50em;
        #margin-bottom: 0.00em;
        #}
        #ul ul
        #{
        #margin-top: 0.50em;
        #list-style: disc;
        #}
        #li
        #{
        #margin-bottom: 0.70em;
        #margin-left: -2.00em;
        #}
        #td.indextable
        #{
        #background-color: transparent;
        #}
        #.indent
        #{
        #margin-left: 2.00em;
        #}
        #.highlight
        #{
        #    background-color: Highlight;
        #/* CHS: Removed this: background-color: #add8e6;*/
        #}
        #p.tips
        #{
        #margin-top: 0.60em;
        #}
        #p.notes
        #{
        #margin-top: 0.60em;
        #}
        #p.code
        #{
        #font-size: 125%;
        #font-family: 'courier new', courier;
        #}
        #span.userinterface
        #{
        #}
        #span.userinterface span.label
        #{
        #font-weight: bold;
        #}
        #div.configurationkey
        #{
        #color: navy;
        #font-weight: bold;
        #}
        #div.feature
        #{
        #color: navy;
        #}
        #div.security
        #{
        #color: navy;
        #}
        #
        #
        #/* CHS: changed completely*/
        #h1.naviheader
        #{
        #    font-family: 'arial';
        #    color:ButtonText;
        #    font-size:large;
        #    letter-spacing:1px;
        #}
        #.label
        #{
        #font-weight: bold;
        #}
        #
        #</STYLE>";
        #}
      ENDSOURCE
      SOURCE #imageURL
        #static client URL imageURL(str _name)
        #{
        #    ;
        #    return xInfo::directory(DirectoryType::Include) + _name;
        #}
      ENDSOURCE
      SOURCE #initNoUpdate
        #static public void initNoUpdate(boolean _prompt = false)
        #{
        #    if (_prompt && Box::yesNo("@SYS73858", DialogButton::No) == DialogButton::No)
        #        return;
        #
        #    ttsbegin;
        #    SysSetupLog::saveEx(classStr(SysCheckListItem_Synchronize), '');          //Do not run Synchronize
        #    SysSetupLog::saveEx(classStr(SysCheckListItem_SynchronizeUpgrade), '');   //same
        #    SysSetupLog::saveEx(classStr(SysCheckList_Upgrade), #CheckListFinished);  //Do not run upgrade
        #
        #    SysSetupPartitionLog::saveEx(classStr(SysCheckListItem_Company), #CheckListFinished);
        #    SysSetupPartitionLog::saveEx(classStr(SysCheckListItem_DataImport), #CheckListFinished);
        #    SysSetupPartitionLog::saveEx(classStr(SysCheckListItem_SetupPartitionAccount), #CheckListFinished);
        #    SysSetupPartitionLog::saveEx(classStr(SysCheckListItem_SetupPartitionData), #CheckListFinished);
        #    SysSetupPartitionLog::saveEx(classStr(SysCheckListItem_SystemParameters), #CheckListFinished);
        #    SysSetupPartitionLog::saveEx(classStr(SysCheckList_SetupPartition), #CheckListFinished);
        #
        #    SysSetupLog::saveEx(classStr(SysCheckList_SetupPartition), #CheckListRunning);
        #    SysSetupLog::saveEx(classStr(SysCheckList_SetupPartition), #CheckListFinished);
        #
        #    SysSetupLog::saveEx(classStr(SysCheckListItem_Compile), '');              //Do not run compile
        #    SysSetupLog::saveEx(classStr(SysCheckList_UpgradeCode), #CheckListFinished);//Do not run code upgrade
        #    SysSetupLog::saveEx(classStr(SysCheckList_Setup), #CheckListFinished);    //Do not run setup
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #isFinished
        #/// <summary>
        #/// Checks to see whether a checklist is finished.
        #/// </summary>
        #/// <param name="_classId">
        #/// The class ID of the checklist.
        #/// </param>
        #/// <returns>
        #/// true if the checklist is finished; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// A checklist is finished if all its mandatory items are finished.
        #/// </remarks>
        #public static boolean isFinished(ClassId _classId)
        #{
        #    SysCheckList sysCheckList;
        #    SysCheckListItem sysCheckListItem;
        #
        #    sysCheckList = SysCheckList::getCheckList(_classId);
        #    if (sysCheckList)
        #    {
        #        sysCheckListItem = sysCheckList.getItem(_classId);
        #        if (_classId && sysCheckListItem)
        #        {
        #            // Check if item is already finished (but not for Company Accounts)
        #            if (sysCheckListItem.getState() == SysCheckListStatus::Finished &&
        #                classIdGet(sysCheckListItem) != classNum(SysCheckListItem_Company) &&
        #                classIdGet(sysCheckListItem) != classNum(SysCheckListItem_DataImport) &&
        #                classIdGet(sysCheckListItem) != classNum(SysCheckListItem_BCProxy) )
        #            {
        #                return true;
        #            }
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #lookupLastExecuted
        #public static SysSetupLog lookupLastExecuted(ClassId _class)
        #{
        #    SysSetupLog sysSetupLog;
        #    SysDictClass dictClass = new SysDictClass(_class);
        #
        #    if(dictClass.isExtending(className2Id(classStr(SysCheckList))))
        #    {
        #        select firstonly * from sysSetupLog
        #            where sysSetupLog.Name == classId2Name(_class) &&
        #                sysSetupLog.Description == #CheckListExecuted;
        #
        #    }
        #
        #    return sysSetupLog;
        #}
      ENDSOURCE
      SOURCE #main
        #static public void main(Args _args)
        #{
        #    boolean silent = _args ? (_args.parm() == #Silent) : false;
        #    int i;
        #
        #    str parmName(str _parm)
        #    {
        #        int parmPos = strFind(_parm,'=',1,strLen(_parm));
        #        return parmPos ? subStr(_parm,1,parmPos-1) : '';
        #    }
        #    str parm(str _parm)
        #    {
        #        return subStr(_parm,strFind(_parm,'=',1,strLen(_parm))+1,strLen(_parm));
        #    }
        #    ;
        #
        #    if (_args && !silent)
        #    {
        #        if (_args.parmEnumType() == enumNum(SysCheckListType))
        #        {
        #            switch (_args.parmEnum())
        #            {
        #                case SysCheckListType::User :
        #                    i = str2int(parm(_args.parm()));
        #                    if (i && parmName(_args.parm())=='')
        #                    {
        #                        //Called when a menuitem link in a userdefined list is pressed
        #                        SysCheckList::runUserMenuItem(i);
        #                        return; //Exit - do not run new checklist
        #                    }
        #                    else if (parm(_args.parm()) && parmName(_args.parm())==#ListParameter)
        #                    {
        #                        //Run specific checklist
        #                        SysCheckList_User::runUserCheckList(parm(_args.parm()));
        #                        return;
        #                    }
        #                    break;
        #
        #                case SysCheckListType::System :
        #                    i = str2int(parm(_args.parm()));
        #                    if (i)
        #                    {
        #                        SysCheckList::updateConditional(i, parmName(_args.parm())==#RecordParameter);
        #                        return; //Exit - do not run new checklist
        #                    }
        #                    break;
        #
        #                case SysCheckListType::Custom :
        #                case SysCheckListType::Restart :
        #                    i = className2Id(parm(_args.parm()));
        #                    if (i)
        #                    {
        #                        if (i == classNum(SysCheckList_UpgradeCode))
        #                        {
        #                            /* If opened by SysCheckList_UpgradeCode display menu item.
        #                            A global flag is set to tell the checklist selection Dialog not to have the data upgrade option.
        #                            The Dialog is shown at SysCheckList_UpgradeCode.getCheckListType
        #                            */
        #                            appl.globalCache().set(classStr(SysCheckList_UpgradeCode), methodStr(SysCheckList_UpgradeCode, getCheckListType), true);
        #                        }
        #
        #                        SysCheckList::runCheckListSpecific(i, true);
        #                        return; //Exit - do not run new checklist
        #                    }
        #                    break;
        #
        #                case SysCheckListType::SetDB :
        #                    SysCheckList::initNoUpdate(true);
        #                    return; //mark upgrade and setup as finished
        #
        #                default :
        #            }
        #        }
        #    }
        #
        #    SysCheckList::runCheckList(silent);
        #}
      ENDSOURCE
      SOURCE #markExecuted
        #public static void markExecuted(ClassId _class)
        #{
        #    SysSetupLog sysSetupLog;
        #    SysDictClass dictClass = new SysDictClass(_class);
        #    if(dictClass.isExtending(className2Id(classStr(SysCheckList))))
        #    {
        #        ttsbegin;
        #
        #        delete_from sysSetupLog
        #            where
        #                sysSetupLog.Name == classId2Name(_class) &&
        #                sysSetupLog.Description == #CheckListExecuted;
        #
        #        SysSetupLog::save(classId2Name(_class), #CheckListExecuted);
        #
        #        ttscommit;
        #    }
        #}
      ENDSOURCE
      SOURCE #preventCheckListAtStartup
        #/// <summary>
        #/// Prevents a checklist from running at start up.
        #/// </summary>
        #/// <param name="_checkListClassName">
        #/// The name of the checklist class to set not to run at start up.
        #/// </param>
        #/// <param name="_value">
        #/// true is the checklist should not run at start up; otherwise, false.
        #/// </param>
        #static void preventCheckListAtStartup(IdentifierName _checkListClassName, boolean _value = true)
        #{
        #    SysSetupLog sysSetupLog;
        #
        #    ttsbegin;
        #
        #    select firstonly forupdate sysSetupLog
        #    where sysSetupLog.Version == xInfo::releaseVersion() &&
        #          sysSetupLog.AppBuild == ApplicationVersion::buildNo() &&
        #          sysSetupLog.Name == _checkListClassName;
        #
        #    if (!sysSetupLog)
        #    {
        #        sysSetupLog.initValue();
        #        sysSetupLog.Version     = xInfo::releaseVersion();
        #        sysSetupLog.Name        = _checkListClassName;
        #        sysSetupLog.Description = _value ? #CheckListFinished : '';
        #        sysSetupLog.insert();
        #    }
        #    else
        #    {
        #        sysSetupLog.Description = _value ? #CheckListFinished : '';
        #        sysSetupLog.update();
        #    }
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #resetDependents
        #static public void resetDependents(ClassId _completedItemId, SysCheckList _sysCheckList)
        #{
        #    Set setDependencies = new Set(Types::Integer);
        #    Set setCheckListItems;
        #    SetIterator setIterator = new SetIterator(setDependencies);
        #    SysSetupLog sysSetupLog;
        #    ;
        #
        #    // Get all the checklist items for this interface
        #    setCheckListItems = SysCheckList::getAllCheckListItems(_sysCheckList.getInterfaceId());
        #
        #    // find all checklist items dependent on _completedItemId
        #    SysCheckList::findDependentItems(_completedItemId, setCheckListItems, _sysCheckList, setDependencies);
        #
        #    // delete items to be re-executed from SysSetupLog
        #    //      setDependencies contains the list of dependent items
        #    setIterator.begin();
        #    while (setIterator.more())
        #    {
        #        if (_sysCheckList.find(classId2Name(setIterator.value()), ''))
        #        {
        #            delete_from sysSetupLog
        #                where sysSetupLog.Name==classId2Name(setIterator.value()) &&
        #                sysSetupLog.Description=='';
        #        }
        #        setIterator.next();
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #runCheckList
        #static public void runCheckList(boolean _silent = false)
        #{
        #    SysCheckList sysCheckList;
        #    ListIterator listIterator;
        #    DictClass    dictClass;
        #    boolean      isSetupMode;
        #    ;
        #
        #    if (Session::isServer() || (xGlobal::clientKind() == ClientType::COMObject))
        #    {
        #        //Do not run on server or comObjects...
        #        return;
        #    }
        #
        #    isSetupMode = SysCheckList_Setup::isSetupMode();
        #
        #    //Create list of all checklists - then check each if it is empty
        #    listIterator = new ListIterator(SysCheckList::checkLists());
        #    listIterator.begin();
        #    while (listIterator.more())
        #    {
        #        //create specific checklist
        #        dictClass = new DictClass(listIterator.value());
        #        if (dictClass && !dictClass.isAbstract())
        #        {
        #            sysCheckList = dictClass.makeObject();
        #            sysCheckList.parmIsSetupMode(isSetupMode);
        #
        #            if (sysCheckList.isRunnable()) //is condition for list ok
        #            {
        #                sysCheckList.doInit(_silent, true);
        #            }
        #        }
        #
        #        listIterator.next();
        #    }
        #}
      ENDSOURCE
      SOURCE #runCheckListSpecific
        #static public void runCheckListSpecific(ClassId _id, boolean _ignoreisRunnable = false, boolean _silent = false, boolean _compile = false)
        #{
        #    SysCheckList sysCheckList;
        #    DictClass    dictClass;
        #    ;
        #
        #    if (Session::isServer() || (xGlobal::clientKind() == ClientType::COMObject))
        #    {
        #        //Do not run on server or comObjects...
        #        return;
        #    }
        #
        #    if (_compile)
        #    {
        #        SysCheckList::compileChecklists();
        #    }
        #
        #    //create specific checklist
        #    dictClass = new DictClass(_id);
        #    if (dictClass && !dictClass.isAbstract())
        #    {
        #        sysCheckList = dictClass.makeObject();
        #        if (_ignoreisRunnable || sysCheckList.isRunnable()) //is condition for list ok
        #        {
        #            sysCheckList.doInit(_silent, true);
        #
        #            if (_id == classNum(SysCheckList_Upgrade) && !SysCheckList_Upgrade::isUpgrade())
        #            {
        #                ReleaseUpdateDB::log("@SYS312446");
        #                Box::warning("@SYS312446");// "Dynamics AX was not registered for upgrade! Upgrade steps may lead to error."
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #runUserMenuItem
        #static private server boolean runUserMenuItem(ClassId _id)
        #{
        #    SysCheckListTable sysCheckListTable;
        #    SysCheckListItemTable sysCheckListItemTable;
        #    boolean ret = false;
        #    str name;
        #    SysCheckList sysCheckList;
        #    SysCheckListItem sysCheckListItem;
        #    ;
        #
        #    sysCheckListItemTable = SysCheckListItemTable::find(_id);
        #    if (sysCheckListItemTable)
        #    {
        #        select firstonly sysCheckListTable where sysCheckListTable.SysCheckListId == sysCheckListItemTable.SysCheckListId;
        #        if (sysCheckListTable && sysCheckListTable.IsRunning)
        #        {
        #            ret = SysHelp::processMenuFunction(sysCheckListItemTable.MenuItemName, sysCheckListItemTable.MenuItemType);
        #
        #            if (ret)
        #            {
        #                name = classId2Name(classNum(SysCheckList_User)) + sysCheckListTable.SysCheckListId;
        #                sysCheckList = infolog.globalCache().get(name, name, null);
        #                if (sysCheckList)
        #                {
        #                    sysCheckListItem = sysCheckList.getItem(_id);
        #                    if (sysCheckListItem)
        #                    {
        #                        sysCheckListItem.setStatus(SysCheckListStatus::Finished);
        #                    }
        #
        #                    sysCheckList.updateHtml();
        #                }
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #themeName
        #static WebThemeName themeName()
        #{
        #    container theme;
        #    ;
        #
        #    theme = WinAPI::getCurrentThemeName();
        #
        #    if(conLen(theme) > 1)
        #    {
        #        //Base theme name on current Windows theme/color scheme
        #        return conPeek(theme, 2);
        #    }
        #
        #    return '';
        #}
        #
      ENDSOURCE
      SOURCE #update
        #static public void update()
        #{
        #    SysCheckList sysCheckList;
        #    ListEnumerator listEnumerator;
        #    ;
        #
        #    //Create list of all checklists - then check each if it is empty
        #    listEnumerator = SysCheckList::checkLists().getEnumerator();
        #    while (listEnumerator.moveNext())
        #    {
        #        if (! (new DictClass(listEnumerator.current()).isAbstract()))
        #        {
        #            //Try to get list
        #            sysCheckList = infolog.globalCache().get(classId2Name(listEnumerator.current()),
        #                                                     classId2Name(listEnumerator.current()), null);
        #            if (sysCheckList)
        #            {
        #                sysCheckList.updateHtml();
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #updateConditional
        #static private void updateConditional(ClassId _id, boolean _userDefinedRecord = false)
        #{
        #    SysCheckListTable   sysCheckListTable;
        #    SysCheckList        sysCheckList;
        #    SysCheckListItem    sysCheckListItem;
        #    ListIterator        listIterator;
        #    str                 name;
        #    SysCheckListStatus  status;
        #
        #    void doUpdate()
        #    {
        #        if (sysCheckList)
        #        {
        #            sysCheckListItem = sysCheckList.getItem(_id);
        #            if (_id && sysCheckListItem)
        #            {
        #                status = sysCheckListItem.getState();
        #                if (status == SysCheckListStatus::Indeterminate)
        #                {
        #                    sysCheckListItem.setStatus(SysCheckListStatus::Finished);
        #                }
        #                else if (status == SysCheckListStatus::Finished)
        #                {
        #                    sysCheckListItem.indeterminate(true);
        #                    sysCheckListItem.setStatus(SysCheckListStatus::Indeterminate);
        #                }
        #            }
        #
        #            sysCheckList.updateHtml();
        #        }
        #    }
        #    ;
        #
        #    if (_userDefinedRecord)
        #    {
        #        //Run all (runnable) lists i table
        #        while select IsRunning, SysCheckListId
        #            from    sysCheckListTable
        #        {
        #            if (sysCheckListTable.IsRunning)
        #            {
        #                name = classId2Name(classNum(SysCheckList_User)) + sysCheckListTable.SysCheckListId;
        #                sysCheckList = infolog.globalCache().get(name, name, null);
        #                doUpdate();
        #            }
        #        }
        #    }
        #    else
        #    {
        #        //Create list of all checklists - then check each if it is empty
        #        listIterator = new ListIterator(SysCheckList::checkLists());
        #        listIterator.begin();
        #        while (listIterator.more())
        #        {
        #            if (! (new DictClass(listIterator.value()).isAbstract()))
        #            {
        #                //Try to get list
        #                sysCheckList = infolog.globalCache().get(classId2Name(listIterator.value()),
        #                                                         classId2Name(listIterator.value()), null);
        #                doUpdate();
        #            }
        #            listIterator.next();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #updateItem
        #static public void updateItem(ClassId _classId = 0, SysCheckListStatus _status = SysCheckListStatus::Ready)
        #{
        #    SysCheckList sysCheckList;
        #    SysCheckListItem sysCheckListItem;
        #
        #    sysCheckList = SysCheckList::getCheckList(_classId);
        #
        #    if (sysCheckList)
        #    {
        #        sysCheckListItem = sysCheckList.getItem(_classId);
        #        if (_classId && sysCheckListItem)
        #        {
        #            //Set status
        #            sysCheckListItem.setStatus(_status);
        #        }
        #
        #        sysCheckList.updateHtml(true);
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysCheckList_Budget unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysCheckList_Budget
    PROPERTIES
      Name                #SysCheckList_Budget
      Extends             #SysCheckList
      RunOn               #Client
      Origin              #{617B97C5-5D30-4660-B72D-6724961D85CB}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class SysCheckList_Budget extends SysCheckList
        #{
        #    container log;
        #}
      ENDSOURCE
      SOURCE #find
        #public boolean find(
        #IdentifierName _name,
        #ClassDescription _description = "")
        #{
        #    return conFind(log, _name) ? true : false;
        #}
      ENDSOURCE
      SOURCE #getCheckListCaption
        #protected str getCheckListCaption()
        #{
        #    return "Budget checklist";
        #}
      ENDSOURCE
      SOURCE #getHtmlHeader
        #protected str getHtmlHeader()
        #{
        #    return "Budget checklist";
        #}
      ENDSOURCE
      SOURCE #getInterfaceId
        #protected ClassId getInterfaceId()
        #{
        #    return classNum(SysCheckListInterfaceBudget);
        #}
      ENDSOURCE
      SOURCE #isRunnable
        #protected boolean isRunnable()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #save
        #public void save(
        #IdentifierName _name,
        #ClassDescription _description = "")
        #{
        #    if (!conFind(log, _name))
        #    {
        #        log = conIns(log, conLen(log)+1, _name);
        #    }
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args _args)
        #{
        #    SysCheckList::runCheckListSpecific(classNum(SysCheckList_Budget),true);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysCheckListItem_Budget unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysCheckListItem_Budget
    PROPERTIES
      Name                #SysCheckListItem_Budget
      Extends             #SysCheckListItem
      Origin              #{90B7D0DF-D718-4FAA-A94D-DFE45E8C5DE6}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class SysCheckListItem_Budget extends SysCheckListItem implements SysCheckListInterfaceBudget
        #{
        #
        #}
      ENDSOURCE
      SOURCE #getCheckListGroup
        #public str getCheckListGroup()
        #{
        #    return "Create budgets";
        #}
      ENDSOURCE
      SOURCE #getHelpLink
        #public str getHelpLink()
        #{
        #    #define.TopicId('Dynamics://DynamicsHelp/Topic?Id=' + '846e3e47-acc3-4a86-bbd3-678a62d2953f')
        #
        #    return #TopicId;
        #}
      ENDSOURCE
      SOURCE #getMenuItemName
        #public MenuItemName getMenuItemName()
        #{
        #    return menuitemDisplayStr(BudgetTransactionListPage);
        #}
      ENDSOURCE
      SOURCE #getMenuItemType
        #public MenuItemType getMenuItemType()
        #{
        #    return MenuItemType::Display;
        #}
      ENDSOURCE
      SOURCE #label
        #public str label()
        #{
        #    return "Budget register entries";
        #}
      ENDSOURCE
      SOURCE #new
        #public void new()
        #{
        #    super();
        #
        #    this.addDependency(classNum(SysCheckListItem_BudgetModel));
        #    this.addDependency(classNum(SysCheckListItem_BudgetCode));
        #    this.placeAfter(classNum(SysCheckListItem_BudgetCode));
        #    this.indeterminate(true);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysCheckListItem_BudgetCode unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysCheckListItem_BudgetCode
    PROPERTIES
      Name                #SysCheckListItem_BudgetCode
      Extends             #SysCheckListItem
      Origin              #{348530FE-F4C6-408D-ADFB-531194C8988D}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class SysCheckListItem_BudgetCode extends SysCheckListItem implements SysCheckListInterfaceBudget
        #{
        #
        #}
      ENDSOURCE
      SOURCE #getCheckListGroup
        #public str getCheckListGroup()
        #{
        #    return "Setup";
        #}
      ENDSOURCE
      SOURCE #getHelpLink
        #public str getHelpLink()
        #{
        #    #define.TopicId('Dynamics://DynamicsHelp/Topic?Id=' + 'd42c3c30-d3b3-4d71-aa86-396516a3c8ee')
        #
        #    return #TopicId;
        #}
      ENDSOURCE
      SOURCE #getMenuItemName
        #public MenuItemName getMenuItemName()
        #{
        #    return menuitemDisplayStr(BudgetTransactionCode);
        #}
      ENDSOURCE
      SOURCE #getMenuItemType
        #public MenuItemType getMenuItemType()
        #{
        #    return MenuItemType::Display;
        #}
      ENDSOURCE
      SOURCE #label
        #public str label()
        #{
        #    return "Codes";
        #}
      ENDSOURCE
      SOURCE #new
        #public void new()
        #{
        #    super();
        #    this.placeAfter(classNum(SysCheckListItem_BudgetModel));
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysCheckListItem_BudgetModel unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysCheckListItem_BudgetModel
    PROPERTIES
      Name                #SysCheckListItem_BudgetModel
      Extends             #SysCheckListItem
      Origin              #{C6890889-C1D9-4CC7-9050-A90550BB8516}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class SysCheckListItem_BudgetModel extends SysCheckListItem implements SysCheckListInterface
        #{
        #
        #}
      ENDSOURCE
      SOURCE #getCheckListGroup
        #public str getCheckListGroup()
        #{
        #    return "Setup";
        #}
      ENDSOURCE
      SOURCE #getHelpLink
        #public str getHelpLink()
        #{
        #    #define.TopicId('Dynamics://DynamicsHelp/Topic?Id=' + '84030522-0057-412c-bfc7-dbeb4d40e5a1')
        #
        #    return #TopicId;
        #}
      ENDSOURCE
      SOURCE #getMenuItemName
        #public MenuItemName getMenuItemName()
        #{
        #    return menuitemDisplayStr(BudgetModel);
        #}
      ENDSOURCE
      SOURCE #getMenuItemType
        #public MenuItemType getMenuItemType()
        #{
        #    return MenuItemType::Display;
        #}
      ENDSOURCE
      SOURCE #label
        #public str label()
        #{
        #    return "Models";
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysCheckListInterfaceBudget unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  INTERFACE #SysCheckListInterfaceBudget
    PROPERTIES
      Name                #SysCheckListInterfaceBudget
      Extends             #SysCheckListInterface
      Origin              #{F4FD3511-BC23-49B9-954B-9A1CA0097D36}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #public interface SysCheckListInterfaceBudget extends SysCheckListInterface
        #{
        #
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #LedgerJournalTable
  PROPERTIES
    Name                #LedgerJournalTable
    Origin              #{1DCB2227-4B94-4F28-9E74-E25F0A87AD98}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #class FormRun extends ObjectRun
      #{
      #    LedgerJournalFormTable  journalFormTable;
      #    boolean                 inCreate;
      #    boolean                 inDelete;
      #    boolean                 bankAccount_IT;
      #    boolean                 enableLedgerJournalTable_W;
      #
      #    DimensionDynamicAccountController   dimOffsetAccountController;
      #    DimensionDefaultingController       dimensionDefaultingController;
      #    LedgerJournalNameId                 expenseJournalNameId;
      #
      #    boolean                 isSimpleMethod;
      #
      #    #ISOCountryRegionCodes
      #
      #    #define.CurrentVersion(1)
      #    #localmacro.CurrentList
      #        isSimpleMethod
      #    #endmacro
      #
      #    AllOpenPosted showStatus;
      #    NoYes showCurrentUser;
      #    #define.CurrentVersion(1)
      #    #localmacro.CurrentList
      #    showStatus,
      #    showCurrentUser
      #    #endmacro
      #}
    ENDSOURCE
    SOURCE #bookRefresh
      #/// <summary>
      #/// Refreshes the form when the journal lines form closes.
      #/// </summary>
      #/// <remarks>
      #/// It is called from the journal lines form's <c>close</c> method.
      #/// </remarks>
      #void bookRefresh()
      #{
      #    ledgerJournalTable_ds.reread();
      #    ledgerJournalTable_ds.refresh();
      #
      #    if (LedgerParameters::isJournalApproval_CN()
      #        && journalFormTable.journalTypeId() == LedgerJournalType::Daily)
      #    {
      #        this.redraw();
      #    }
      #
      #    journalFormTable.datasourceReReadPost();
      #
      #    element.setAccountAccess();
      #    element.showProperJournalLinesButton();
      #}
    ENDSOURCE
    SOURCE #canSubmitToWorkflow
      #public boolean canSubmitToWorkflow()
      #{
      #    boolean canSubmitToWorkflow = false;
      #
      #    if (ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::NotSubmitted)
      #    {
      #        canSubmitToWorkflow = true;
      #    }
      #    return canSubmitToWorkflow;
      #
      #}
    ENDSOURCE
    SOURCE #changeAllOpenPosted_RU
      #public void changeAllOpenPosted_RU(AllOpenPosted _allOpenPosted = AllOpenPosted::All)
      #{
      #    allOpenPostedField.selection(_allOpenPosted);
      #    allOpenPostedField.selectionChange();
      #}
    ENDSOURCE
    SOURCE #close
      #void close()
      #{
      #    ;
      #    journalFormTable.formClosePre();
      #
      #    if (LedgerParameters::isChineseVoucher_CN()
      #        && journalFormTable.journalTypeId() == LedgerJournalType::Daily)
      #    {
      #        classfactory.lastValuePut(this.pack(), curext(), curUserId(), UtilElementType::Form, formStr(LedgerJournalTable));
      #    }
      #
      #    super();
      #
      #    showStatus = AllOpenPostedField.selection();
      #    showCurrentUser = ShowUserCreatedOnly.value();
      #    xSysLastValue::saveLast(this);
      #}
    ENDSOURCE
    SOURCE #enableButtonsActive
      #/// <summary>
      #/// Enables and disables controls on the form.
      #/// </summary>
      #/// <remarks>
      #/// This method is called from the enableButtonsActive method of the JournalFormTable class. The
      #/// JournalFormTable.enableButtonsActive method is called by the active method on the data source
      #/// of this form.
      #/// The form functionality is limited by the form context and the rights of the security model.
      #/// </remarks>
      #public void enableButtonsActive()
      #{
      #    LedgerJournalType journalType = journalFormTable.journalTypeId();
      #    UserGroupId approveGroupId = ledgerJournalTable.ledgerJournalName().ApproveGroupId;
      #    #ISOCountryRegionCodes
      #
      #    printMenu.enabled(ledgerJournalTable.RecId != 0);
      #
      #    // Set the lines button's display menu item to point to the correct lines form.
      #    journalLines.menuItemName(journalFormTable.journalTableData().journalStatic().menuItemStrLines(journalType));
      #
      #    printTaxInvoice.visible(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]));
      #    printTaxInvoice.enabled(false);
      #
      #    switch (journalType)
      #    {
      #        case LedgerJournalType::Periodic  :
      #            checkJournal.visible(false);
      #            postJournal.visible(false);
      #            course.visible(false);
      #            break;
      #
      #        case LedgerJournalType::PurchaseLedger :
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransInvoiceRegister));
      #            ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransInvoiceRegister));
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLJTransInvoiceRegister));
      #            break;
      #
      #        case LedgerJournalType::Daily :
      #            if (LedgerParameters::isChineseVoucher_CN())
      #            {
      #                if (isSimpleMethod)
      #                {
      #                    simpleMethod_CN.visible(false);
      #                    advanced_CN.visible(true);
      #                }
      #                else
      #                {
      #                    simpleMethod_CN.visible(true);
      #                    advanced_CN.visible(false);
      #                }
      #            }
      #            checkJournal.visible(true);
      #            postJournal.visible(true);
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransDaily));
      #            ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransDaily));
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLedgerJourTransDaily));
      #            sadFinanceTable_PL.visible(true);
      #            break;
      #
      #        case LedgerJournalType::Allocation :
      #            checkJournal.visible(true);
      #            postJournal.visible(true);
      #
      #            // only posting supported not post and transfer
      #            ledgerJournalPostTransfer.visible(false);
      #
      #            // dimensions are not editable
      #            tabFinancialDimensions.enabled(false);
      #
      #            // no Cash report
      #            cashReport.visible(false);
      #
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransAllocation));
      #            ledgerJournalPostTransfer.enabled(false);
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLJTransAllocation));
      #            break;
      #
      #        case LedgerJournalType::Elimination :
      #            checkJournal.visible(true);
      #            postJournal.visible(true);
      #
      #            // only posting supported not post and transfer
      #            ledgerJournalPostTransfer.visible(false);
      #
      #            // dimensions are not editable
      #            tabFinancialDimensions.enabled(false);
      #
      #            // no Cash report
      #            cashReport.visible(false);
      #
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransElimination));
      #            ledgerJournalPostTransfer.enabled(false);
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLJTransElimination));
      #            break;
      #
      #        case LedgerJournalType::Approval :
      #            checkJournal.visible(true);
      #            postJournal.visible(true);
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransApprove));
      #            ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransApprove));
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLJTransInvApprove));
      #            break;
      #
      #        case LedgerJournalType::Payment :
      #            checkJournal.visible(true);
      #            if ((bankAccount_IT) &&
      #                (!ledgerJournalTable.allowPosting_IT()))
      #            {
      #                postJournal.visible(false);
      #            }
      #            else
      #            {
      #                postJournal.visible(true);
      #            }
      #            printTaxInvoice.enabled(ledgerJournalTable.Posted);
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransVendPaym));
      #            ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransVendPaym));
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLedgerJourTransVendPaym));
      #            break;
      #
      #        case LedgerJournalType::CustPayment :
      #            // this is specific to CustPayment
      #            custPaymEntryButton.visible(true);
      #
      #            checkJournal.visible(true);
      #            postJournal.visible(true);
      #            printTaxInvoice.enabled(ledgerJournalTable.Posted);
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransCustPaym));
      #            ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransCustPaym));
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLJTransCustPaym));
      #            break;
      #
      #        case LedgerJournalType::Cost  :
      #            checkJournal.visible(true);
      #            postJournal.visible(true);
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransCost));
      #            ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransCost));
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkCOSJournalTable));
      #            break;
      #
      #        case LedgerJournalType::VendInvoiceRegister :
      #            checkJournal.visible(true);
      #            postJournal.visible(true);
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransVendInvoice));
      #            ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransVendInvoice));
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLedgerJourTransVendInvoice));
      #            break;
      #
      #        case LedgerJournalType::Assets :
      #            checkJournal.visible(true);
      #            postJournal.visible(true);
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransAsset));
      #            ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransAsset));
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLedgerJourTransAsset));
      #            break;
      #
      #        case LedgerJournalType::AssetBudgets :
      #            checkJournal.visible(true);
      #            postJournal.visible(false);
      #            post.enabled(false);
      #            ledgerJournalPostTransfer.enabled(false);
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLedgerJourTransAssetBudget));
      #            break;
      #
      #        case LedgerJournalType::CustPaymRemittance :
      #            journalLines.enabled(ledgerJournalTable.BankAccountId ? true : false);
      #
      #            if (!journalLines.enabled() &&
      #                ledgerJournalTable.numOfLines() > 0)
      #            {
      #                journalLines.enabled(true);
      #            }
      #
      #            checkJournal.visible(true);
      #            postJournal.visible(true);
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransCustBOERemit));
      #            ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransCustBOERemit));
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLJTransCustBOERemit));
      #            break;
      #
      #        case LedgerJournalType::VendPaymRemittance :
      #            journalLines.enabled(ledgerJournalTable.BankAccountId ? true : false);
      #
      #            if (!journalLines.enabled() &&
      #                ledgerJournaltable.numOfLines() > 0)
      #            {
      #                journalLines.enabled(true);
      #            }
      #
      #            checkJournal.visible(true);
      #            if ((bankAccount_IT) &&
      #                (!ledgerJournalTable.allowPosting_IT()))
      #            {
      #                postJournal.visible(false);
      #            }
      #            else
      #            {
      #                postJournal.visible(true);
      #            }
      #
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransVendPrNoteRemit));
      #            ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransVendPrNoteRemit));
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLJTransPrNtRemit));
      #            break;
      #
      #        case LedgerJournalType::CustBillOfExchangeDraw :
      #            checkJournal.visible(true);
      #            postJournal.visible(true);
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransCustBOEDraw));
      #            ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransCustBOEDraw));
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLJTransCustBOEDraw));
      #            break;
      #
      #        case LedgerJournalType::CustBillOfExchangeProtest :
      #            checkJournal.visible(true);
      #            postJournal.visible(true);
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransCustBOEProtest));
      #            ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransCustBOEProtest));
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLJTransCustBOEProtest));
      #            break;
      #
      #        case LedgerJournalType::CustBillOfExchangeRedraw :
      #            checkJournal.visible(true);
      #            postJournal.visible(true);
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransCustBOERedraw));
      #            ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransCustBOERedraw));
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLJTransCustBOERedraw));
      #            break;
      #
      #        case LedgerJournalType::CustBillOfExchangeSettle :
      #            // 10 nov 2011 - 18:13:34: dpastrello project MHT_I004_LedgerJournalImprovements
      #            journalLines.enabled(ledgerJournalTable.BankAccountId ? true : false);
      #            checkJournal.visible(true);
      #            postJournal.visible(true);
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransCustBOESettle));
      #            ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransCustBOESettle));
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLJTransCustBOESettle));
      #            break;
      #
      #        case LedgerJournalType::VendPromissoryNoteDraw :
      #            checkJournal.visible(true);
      #            postJournal.visible(true);
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransVendPrNoteDraw));
      #            ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransVendPrNoteDraw));
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLJTransPrNtDraw));
      #            break;
      #
      #        case LedgerJournalType::VendPromissoryNoteRedraw :
      #            checkJournal.visible(true);
      #            postJournal.visible(true);
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransVendPrNoteRedraw));
      #            ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransVendPrNoteRedraw));
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLJTransPrNtRedraw));
      #            break;
      #
      #        case LedgerJournalType::VendPromissoryNoteSettle :
      #            checkJournal.visible(true);
      #            postJournal.visible(true);
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransVendPrNoteSettle));
      #            ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransVendPrNoteSettle));
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLJTransPrNtSettle));
      #            break;
      #
      #        case LedgerJournalType::BankChequeReversal :
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransBankChequeRev));
      #            ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransBankChequeRev));
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLdgrJourTransBankChequeRev));
      #            break;
      #
      #        case LedgerJournalType::BankDepositPaymCancel :
      #            checkJournal.visible(true);
      #            postJournal.visible(true);
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransBankDepPaymCanc));
      #            ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransBankDepPaymCanc));
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLdgrJrTransBnkDepPayCancel));
      #            break;
      #
      #        case LedgerJournalType::PayrollDisbursement :
      #            postJournal.visible(true);
      #            ledgerJournalPostTransfer.visible(false);
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTPayrolLDisbursement));
      #            checkJournal.visible(true);
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkJourPayrollDisbursement));
      #
      #            // no Cash report
      #            cashReport.visible(false);
      #
      #            break;
      #
      #        case LedgerJournalType::Payroll_RU:
      #            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
      #            {
      #                checkJournal.visible(true);
      #                checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLedgerJourTransRPay));
      #                postJournal.visible(true);
      #                post.menuItemName(menuitemActionStr(LedgerJourPostLJTransRPay));
      #                ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransRPay));
      #                periodControl_RU.visible(true);
      #                reverse_RU.visible(true);
      #                reverseType_RU.visible(true);
      #                ledgerJournalTable_ds.allowCreate(false);
      #                ledgerJournalTable_ds.startPosition(1);
      #
      #                journalCreate_RU.visible(true);
      #                journalCreate_RU.configurationKey(configurationKeyNum(RPayroll));
      #                journalCreate_RU.neededPermission(AccessType::Add);
      #
      #                ledgerJournalCreate_RU.enabled(RPayController::canCreateJournal(false));
      #                ledgerJournalCreateStorno_RU.enabled(RPayController::canCreateReverseJournal(false));
      #            }
      #            break;
      #        case LedgerJournalType::Assets_RU :
      #            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
      #            {
      #                checkJournal.visible(true);
      #                postJournal.visible(true);
      #
      #                if (ledgerJournalTable.Posted)
      #                {
      #                    rAssetReportMB4.visible(true);
      #                    rAssetReportMB8.visible(true);
      #                }
      #                else
      #                {
      #                    rAssetReportMB4.visible(false);
      #                    rAssetReportMB8.visible(false);
      #                }
      #                post.menuItemName(menuitemActionStr(LedgerJourPostLJTransAsset_RU));
      #                ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransAsset_RU));
      #                checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLJTransAsset_RU));
      #            }
      #            break;
      #
      #        case LedgerJournalType::AssetBudgets_RU :
      #            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
      #            {
      #                checkJournal.visible(true);
      #                postJournal.visible(false);
      #                post.enabled(false);
      #                ledgerJournalPostTransfer.enabled(false);
      #                checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLJTransAssetBudget_RU));
      #            }
      #            break;
      #
      #        case LedgerJournalType::RDeferrals:
      #            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
      #            {
      #                checkJournal.visible(true);
      #                postJournal.visible(true);
      #                currency.allowEdit(false);
      #                post.menuItemName(menuitemActionStr(LedgerJourPostLJTransRDeferrals));
      #                ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransRDeferrals));
      #                checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLJTransRDefferals));
      #            }
      #            break;
      #        case LedgerJournalType::RCash    :
      #            if (RCashParameters::isCashModuleEnabled())
      #            {
      #                checkJournal.visible(true);
      #                postJournal.visible(true);
      #                post.menuItemName(menuitemActionStr(LedgerJourPostLJTransRCash));
      #                ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransRCash));
      #                checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLJTransRCash));
      #            }
      #            break;
      #        case LedgerJournalType::RTax25,
      #             LedgerJournalType::RAssetAssessedTax,
      #             LedgerJournalType::RAssetTransportTax,
      #             LedgerJournalType::RAssetLandTax,
      #             LedgerJournalType::RTax25TaxRemainGoods:
      #             RTax25Version.visible(true);
      #             //no break
      #        case
      #            LedgerJournalType::RTax25AmountDifference,
      #            LedgerJournalType::RTax25ExchDifference:
      #            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
      #            {
      #                checkJournal.visible(true);
      #                postJournal.visible(true);
      #                periodControl_RU.visible(true);
      #                reverse_RU.visible(true);
      #                reverseType_RU.visible(true);
      #                ledgerJournalTable_ds.allowCreate(false);
      #                ledgerJournalTable_ds.startPosition(1);
      #
      #                journalCreate_RU.visible(true);
      #                journalCreate_RU.neededPermission(NeededPermission::Create);
      #
      #                if (journalFormTable.journalTypeId() == LedgerJournalType::RTax25                 ||
      #                    journalFormTable.journalTypeId() == LedgerJournalType::RTax25AmountDifference ||
      #                    journalFormTable.journalTypeId() == LedgerJournalType::RTax25ExchDifference   ||
      #                    journalFormTable.journalTypeId() == LedgerJournalType::RTax25TaxRemainGoods)
      #                {
      #                    journalCreate_RU.securityKey(securityKeyNum(LedgerMisc));
      #                }
      #                else
      #                {
      #                    journalCreate_RU.configurationKey(configurationKeyNum(RAsset));
      #                    journalCreate_RU.securityKey(securityKeyNum(RAssetMisc));
      #                }
      #                ledgerJournalCreate_RU.enabled(element.args().dataset() == tableNum(RTax25RegisterJournalTable) &&
      #                                               LedgerJournalCreate_Tax25_RU::canCreateJournalStatic(element.args().record(),
      #                                                                                                    journalFormTable.journalTypeId(),
      #                                                                                                    false));
      #                ledgerJournalCreateStorno_RU.enabled(element.args().dataset() == tableNum(RTax25RegisterJournalTable) &&
      #                                                     LedgerJournalCreate_Tax25_RU::canCreateReverseJournalStatic(element.args().record(),
      #                                                                                                                 journalFormTable.journalTypeId(),
      #                                                                                                                 false));
      #                post.menuItemName(menuitemActionStr(LedgerJourPostLJTransDaily));
      #                ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransDaily));
      #                checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLedgerJourTransDaily));
      #            }
      #            break;
      #
      #        case LedgerJournalType::FBTaxAssessmentAdjustments_BR :
      #            checkJournal.visible(true);
      #            postJournal.visible(true);
      #            post.menuItemName(menuitemActionStr(FBLedgerJourPostLJTransTaxAssessAdj_BR));
      #            ledgerJournalPostTransfer.menuItemName(menuitemActionStr(LedgerJourPostTrLJTransDaily));
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLedgerJourTransDaily));
      #            element.enableFBTaxAssessmentAdjustFields_BR();
      #            break;
      #
      #        default :
      #            journalLines.visible(false);
      #
      #            postJournal.visible(true);
      #            post.enabled(false);
      #            post.menuItemName(menuitemActionStr(LedgerJourPostLJTransDaily));
      #
      #            ledgerJournalPostTransfer.enabled(false);
      #
      #            checkJournal.enabled(false);
      #            checkJournal.menuItemName(menuitemActionStr(LedgerJourChkLedgerJourTransDaily));
      #    }
      #
      #    if (ledgerJournalTable.Posted || (ledgerJournalTable.JournalType == LedgerJournalType::RCash && !ledgerJournalTable.canDeleteJournal()))
      #    {
      #        deleteButton.enabled(false);
      #    }
      #    else
      #    {
      #        deleteButton.enabled(true);
      #    }
      #
      #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN])
      #        && (LedgerParameters::isJournalApproval_CN() == NoYes::No
      #            || journalFormTable.journalTypeId() != LedgerJournalType::Daily))
      #    {
      #        ledgerJournalTable_ApprovalStatus_CN.visible(false);
      #    }
      #
      #    if (ledgerJournalTable.reportedAsReady())
      #    {
      #        reportAsReady.enabled(false);
      #        approve.enabled(!ledgerJournalTable.approved() || ledgerJournalTable.rejected());
      #        reject.enabled(!ledgerJournalTable.rejected());
      #    }
      #    else
      #    {
      #        reportAsReady.enabled(true);
      #        approve.enabled(false);
      #        reject.enabled(false);
      #    }
      #
      #    if (ledgerJournalTable.ledgerJournalName().ApproveActive)
      #    {
      #        if (!UserInfoHelp::userInUserGroup(curUserId(), approveGroupId))
      #        {
      #            approve.enabled(false);
      #            reject.enabled(false);
      #        }
      #    }
      #
      #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoEE, #isoHU, #isoLT, #isoLV, #isoPL, #isoRU]))
      #    {
      #        ledgerJournalPreview.enabled(ledgerJournalTable.Posted);
      #    }
      #}
    ENDSOURCE
    SOURCE #enableFBTaxAssessmentAdjustFields_BR
      #//
      #// This method disables most fields when the journal is type Tax assessment adjustment.
      #//
      #void enableFBTaxAssessmentAdjustFields_BR()
      #{
      #    editExchRate.enabled(false);
      #    editExchRateSecond.enabled(false);
      #
      #    ledgerJournalTable_W_ds.object(fieldNum(LedgerJournalTable_W, FiscalEstablishment_BR)).visible(true);
      #    ledgerJournalTable_W_ds.object(fieldNum(LedgerJournalTable_W, TaxType_BR)).visible(true);
      #}
    ENDSOURCE
    SOURCE #enableFieldsActive
      #void enableFieldsActive()
      #{
      #    if (ledgerJournalTable.FixedOffsetAccount   == NoYes::Yes   ||
      #        ledgerJournalTable.JournalType          == LedgerJournalType::PurchaseLedger)
      #    {
      #        ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, OffsetAccountType)).allowEdit(false);
      #        ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, OffsetLedgerDimension)).allowEdit(ledgerJournalTable.OffsetAccountType == LedgerJournalACType::Ledger);
      #    }
      #    else
      #    {
      #        ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, OffsetAccountType)).allowEdit(true);
      #        ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, OffsetLedgerDimension)).allowEdit(true);
      #    }
      #
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, CustVendNegInstProtestProcess)).allowEdit(ledgerJournalTable.ProtestSettledBill);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, BankRemittanceType)).allowEdit(!ledgerJournalTable.ProtestSettledBill);
      #
      #    if (ledgerJournalTable.JournalType == LedgerJournalType::CustPaymRemittance ||
      #        ledgerJournalTable.JournalType == LedgerJournalType::VendPaymRemittance)
      #    {
      #        groupPromissorynote_BankAccountId.allowEdit(!ledgerJournalTable.existVoucher());
      #    }
      #    else if (ledgerJournalTable.JournalType == LedgerJournalType::Allocation)
      #    {
      #        this.enableFieldsForAllocation();
      #    }
      #    else if (ledgerJournalTable.JournalType == LedgerJournalType::Elimination)
      #    {
      #        this.enableFieldsForElimination();
      #    }
      #
      #    if (journalFormTable.journalTypeId() == LedgerJournalType::Daily)
      #    {
      #        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
      #        {
      #            ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, ReverseEntry)).visible(true);
      #            ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, ReverseDate)).visible(true);
      #        }
      #
      #        ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, ReverseDate)).allowEdit(ledgerJournalTable.ReverseEntry ? true : false);
      #    }
      #    else
      #    {
      #        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
      #        {
      #            ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, ReverseEntry)).visible(false);
      #            ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, ReverseDate)).visible(false);
      #        }
      #    }
      #
      #    if (journalFormTable.journalTypeId() == LedgerJournalType::BankChequeReversal ||
      #        journalFormTable.journalTypeId() == LedgerJournalType::BankDepositPaymCancel)
      #    {
      #       this.enableFieldsForBank();
      #    }
      #
      #    // 03 nov 2011 - 17:13:23: dpastrello project MHT_I004_LedgerJournalImprovements
      #    this.M_I004enableFieldsPostingProfile();
      #}
      #
      #
    ENDSOURCE
    SOURCE #enableFieldsForAllocation
      #/// <summary>
      #/// Disables most fields when the journal is an allocation journal.
      #/// </summary>
      #/// <remarks>
      #/// An allocation journal does not allow entry of ledgers.
      #/// </remarks>
      #void enableFieldsForAllocation()
      #{
      #    ;
      #
      #    // the fields in the overview grid and on general tab
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, JournalName)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, JournalNum)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, Posted)).allowEdit(false);
      #
      #    // additional fields on the general tab
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, DetailSummaryPosting)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, RemoveLineAfterPosting)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, LinesLimitBeforeDistribution)).allowEdit(false);
      #
      #    // fields on Setup tab are display only
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, OffsetAccountType)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, OffsetLedgerDimension)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, DocumentNum)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, VoucherAllocatedAtPosting)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, CurrencyCode)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, FixedExchRate)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, euroTriangulation)).allowEdit(false);
      #    editExchRate.enabled(false);
      #    editExchRateSecond.enabled(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, LedgerJournalInclTax)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, BankAccountId)).allowEdit(false);
      #}
    ENDSOURCE
    SOURCE #enableFieldsForBank
      #/// <summary>
      #/// Sets the field enablement for the bank journal types.
      #/// </summary>
      #void enableFieldsForBank()
      #{
      #    // Disable the creation of new journals
      #    ledgerJournalTable_ds.allowCreate(false);
      #
      #    // Disable these fields in the overview grid and on general tab
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, JournalName)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, JournalNum)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, Posted)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, Log)).allowEdit(false);
      #
      #    // Disable this additional field on the general tab
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, LinesLimitBeforeDistribution)).allowEdit(false);
      #
      #    // Disable all fields on the Setup tab
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, OffsetAccountType)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, OffsetLedgerDimension)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, DocumentNum)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, VoucherAllocatedAtPosting)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, CurrencyCode)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, FixedExchRate)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, euroTriangulation)).allowEdit(false);
      #    editExchRate.enabled(false);
      #    editExchRateSecond.enabled(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, LedgerJournalInclTax)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, BankAccountId)).allowEdit(false);
      #
      #    // Disable print options
      #    cashReport.visible(false);
      #    printTaxInvoice.visible(false);
      #
      #    // Disable all fields on the Dimensions tab
      #    tabFinancialDimensions.enabled(false);
      #}
    ENDSOURCE
    SOURCE #enableFieldsForElimination
      #//
      #// This method disables most fields when the journal is type Elimination.
      #//
      #void enableFieldsForElimination()
      #{
      #    // cannot create new journal entries
      #    if (CompanyInfo::isEliminationCompany() == NoYes::No)
      #    {
      #    ledgerJournalTable_ds.allowCreate(false);
      #    }
      #
      #    // the fields in the overview grid and on general tab
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, JournalNum)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, Posted)).allowEdit(false);
      #
      #    if (ledgerJournalTable.Posted == NoYes::No)
      #    {
      #    // this is the Description
      #     ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable,Name)).allowEdit(true);
      #    }
      #    else
      #    {
      #      ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, Name)).allowEdit(false);
      #    }
      #
      #    // additional fields on the general tab
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, DetailSummaryPosting)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, RemoveLineAfterPosting)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, LinesLimitBeforeDistribution)).allowEdit(false);
      #
      #    // fields on Setup tab are display only
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, OffsetAccountType)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, OffsetLedgerDimension)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, DocumentNum)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, VoucherAllocatedAtPosting)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, CurrencyCode)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, FixedExchRate)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, euroTriangulation)).allowEdit(false);
      #    editExchRate.enabled(false);
      #    editExchRateSecond.enabled(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, LedgerJournalInclTax)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, BankAccountId)).allowEdit(false);
      #
      #    //fields on Blocking tab- take defaults
      #    // the Dimensions Tab
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, DefaultDimension)).allowEdit(false);
      #    // the History Tab
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable,ReportedAsReadyBy)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable,Approver)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable,RejectedBy)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable,OriginalCompany)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable,OriginalJournalNum)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable,Posted)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable,PostedDateTime)).allowEdit(false);
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable,Log)).allowEdit(false);
      #
      #
      #}
    ENDSOURCE
    SOURCE #firstField
      #void firstField(int _flags=1)
      #{
      #    super(_flags);
      #
      #    journalFormTable.formFirstFieldPost();
      #}
    ENDSOURCE
    SOURCE #init
      #void init()
      #{
      #    #ISOCountryRegionCodes
      #    AccessRight accessRight;
      #    boolean financialsDimensionsEnabled = false;
      #
      #    container           lastValue;
      #
      #    // Container combines all country codes attached to all fields/their EDT's in the table. Cache before super() so usable by FormDataSource.init()
      #    enableLedgerJournalTable_W = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN, #isoLT, #isoLV, #isoEE, #isoRU, #isoCZ, #isoHU, #isoPL]);
      #    if (!enableLedgerJournalTable_W)
      #    {
      #        enableLedgerJournalTable_W = BrazilParameters::isEnabled();
      #    }
      #
      #    journalFormTable = new LedgerJournalFormTable(element);
      #
      #    SysListPageHelper::handleInitPreSuper(element);
      #
      #    super();
      #    FormSecurity::setFormDataSourceMaxAccessRight(this);
      #
      #    dimOffsetAccountController = DimensionDynamicAccountController::construct(ledgerJournalTable_DS, fieldStr(LedgerJournalTable, OffsetLedgerDimension), fieldStr(LedgerJournalTable, OffsetAccountType));
      #    dimOffsetAccountController.parmIsDefaultAccount(true);
      #    dimOffsetAccountController.parmValidateBlockedForManualEntry(true);
      #
      #    custPaymEntryButton.visible(journalFormTable.journalTypeId() == LedgerJournalType::CustPayment);
      #    correction_RU.visible(journalFormTable.journalTypeId() == LedgerJournalType::Daily || journalFormTable.journalTypeId() == LedgerJournalType::RTax25);
      #
      #    journalFormTable.parmCtrlAllOpenPosted(allOpenPostedField);
      #    journalFormTable.parmCtrlShowUserCreatedOnly(showUserCreatedOnly);
      #    journalFormTable.parmCtrlJournalIdTab(journalNum);
      #    journalFormTable.parmCtrlJournalIdGrid(ledgerJournalTable_JournalNum);
      #    journalFormTable.parmCtrlJournalTypeGrid(journalTypeGrid);
      #    journalFormTable.parmCtrlOverview(gridOverview);
      #    journalFormTable.parmCtrlCustPaymEntryButton(custPaymEntryButton);
      #    journalFormTable.parmCtrlLines(journalLines);
      #    journalFormTable.parmCtrlCheckJournal(checkJournal);
      #    journalFormTable.parmCtrlPostJournalMenu(postJournal);
      #    journalFormTable.parmCtrlMarkUserBlock(isUserPrivate);
      #    journalFormTable.parmCtrlMarkInUseBlock(markInUseBlock);
      #    journalFormTable.parmCtrlSystemBlocked(systemBlocked);
      #    journalFormTable.parmCtrlBlockImage(blockImage);
      #    journalFormTable.parmCtrlApprovalMenu(course);
      #    journalFormTable.parmCtrlJournalLinesGeneratePayment(journalLines_GeneratePayments);
      #    journalFormTable.parmCtrlJournalLinesEdit(journalLines_Edit);
      #    journalFormTable.parmCtrlJournalLinesReview(journalLines_Review);
      #    journalFormTable.parmCtrlJournalLines_WorkFlowApproved(journalLines_WorkflowApproved);
      #
      #    /* lift GEEW
      #    journalFormTable.parmCtrlAssetPackingSlip_LT(assetPackingSlipPrint_LT);
      #    */
      #
      #    journalFormTable.formInitPost();
      #
      #    bankAccount_IT = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]);
      #
      #    // Added to the inquiries button of the posted statement form to show only posted payment journals for the statement.
      #    if (isConfigurationkeyEnabled(configurationKeyNum(Retail))
      #            && element.args().caller() is FormRun)
      #    {
      #        if (element.args().caller().name() == formStr(RetailStatementJour))
      #        {
      #            allOpenPostedField.selection(AllOpenPosted::Posted);
      #            allOpenPostedField.enabled(false);
      #            newButton.enabled(false);
      #            deleteButton.enabled(false);
      #        }
      #    }
      #
      #    //Only execute code if called from ForEdit menu item
      #    if (SysListPageHelper::isFormOpenedWithOpenModeForEditParm(element))
      #    {
      #        SysListPageHelper::handleInitPostSuper(element);
      #
      #        journalFormTable.queryAddRange();
      #
      #        //If opened from payment journal list page, set to All types
      #        if ((element.args().caller().name() == formStr(LedgerJournalTableCustPaymentListPage))
      #         || (element.args().caller().name() == formStr(LedgerJournalTableVendPaymentListPage)))
      #        {
      #            allOpenPostedField.selection(AllOpenPosted::All);
      #        }
      #    }
      #
      #    accessRight = FormSecurity::getMenuItemAccessRight(this);
      #    if (accessRight >= AccessRight::Edit)
      #    {
      #        financialsDimensionsEnabled = true;
      #        if (element.args() && element.args().menuItemName())
      #        {
      #            if (element.args().menuItemType() == MenuItemType::Display
      #                && (element.args().menuItemName() == menuitemDisplayStr(LedgerJournalTable_BankChequeReversal)
      #                || element.args().menuItemName() == menuitemDisplayStr(LedgerJournalTable_BankDepositPaymCancel)))
      #            {
      #                financialsDimensionsEnabled = false;
      #            }
      #        }
      #    }
      #
      #    dimensionDefaultingController = DimensionDefaultingController::constructInTabWithValues(false, true, financialsDimensionsEnabled, 0, this, tabFinancialDimensions, "@SYS138491");
      #    dimensionDefaultingController.parmAttributeValueSetDataSource(ledgerJournalTable_ds, fieldStr(LedgerJournalTable, DefaultDimension));
      #    dimensionDefaultingController.parmValidateBlockedForManualEntry(true);
      #
      #    tabFinancialDimensions.enabled(financialsDimensionsEnabled);
      #    if (LedgerParameters::isChineseVoucher_CN()
      #        && journalFormTable.journalTypeId() == LedgerJournalType::Daily)
      #    {
      #        lastValue = classfactory.lastValueGet(curext(), curUserId(), UtilElementType::Form, formStr(LedgerJournalTable));
      #        if (lastValue)
      #        {
      #            this.unpack(lastValue);
      #        }
      #    }
      #
      #    if (RetailSMB::IsRetailSMBEnabled())
      #    {
      #        RetailSMB::SetVisible(element);
      #    }
      #
      #}
    ENDSOURCE
    SOURCE #initControls
      #/// <summary>
      #/// Initializes form controls based on the journal type.
      #/// </summary>
      #/// <param name="_journalTypeId">
      #/// The journal type ID
      #/// </param>
      #protected void initControls(Integer _journalTypeId)
      #{
      #    // Place the lines button in its default state
      #    journalLines_WorkflowApproved.visible(false);
      #    journalLines.visible(true);
      #
      #    // hide the Reversing Entries fields
      #    groupReversingEntry.visible(false);
      #    ledgerJournalTable_ReverseEntry.visible(false);
      #    ledgerJournalTable_ReverseDate.visible(false);
      #
      #    switch (_journalTypeId)
      #    {
      #        case LedgerJournalType::CustBillOfExchangeProtest :
      #             tabBillOfExchange.visible(true);
      #             groupProtestNegInst.visible(true);
      #             groupBillOfExchange_BankRemittanceType.hideFirstEntry(false);
      #             break;
      #
      #        case LedgerJournalType::CustBillOfExchangeDraw,
      #             LedgerJournalType::CustBillOfExchangeRedraw:
      #             tabBillOfExchange.visible(true);
      #             tabBillOfExchange.caption("@SYS69795");
      #             groupBillOfExchange_BankRemittanceType.visible(false);
      #             break;
      #
      #        case LedgerJournalType::CustPaymRemittance,
      #             LedgerJournalType::CustBillOfExchangeSettle :
      #             tabBillOfExchange.visible(true);
      #             tabBillOfExchange.caption("@SYS69795");
      #             break;
      #
      #        case LedgerJournalType::VendPromissoryNoteDraw,
      #             LedgerJournalType::VendPaymRemittance,
      #             LedgerJournalType::VendPromissoryNoteSettle :
      #             tabBillOfExchange.visible(true);
      #             tabBillOfExchange.caption("@SYS71440");
      #             billOfExchange.visible(false);
      #             promissoryNote.visible(true);
      #             break;
      #
      #        case LedgerJournalType::VendPromissoryNoteRedraw :
      #             tabBillOfExchange.visible(true);
      #             tabBillOfExchange.caption("@SYS71440");
      #             billOfExchange.visible(false);
      #             promissoryNote.visible(true);
      #             groupProtestNegInst.visible(true);
      #             break;
      #
      #        case LedgerJournalType::Allocation :
      #             // cannot create new journal entries
      #             ledgerJournalTable_ds.allowCreate(false);
      #             element.design().caption("@SYS342280");
      #             break;
      #
      #        case LedgerJournalType::Elimination :
      #             // cannot create new journal entries unless the company is an elimination company
      #             ledgerJournalTable_ds.allowCreate(CompanyInfo::isEliminationCompany());
      #             element.design().caption("@SYS342281");
      #             break;
      #
      #        case LedgerJournalType::Periodic :
      #             element.design().caption("@SYS24600");
      #             break;
      #
      #        case LedgerJournalType::Daily :
      #             // show the Reversing Entries fields
      #             groupReversingEntry.visible(true);
      #             ledgerJournalTable_ReverseEntry.visible(true);
      #             ledgerJournalTable_ReverseDate.visible(true);
      #             salesTax_TaxObligationCompany.visible(true);
      #             element.design().caption("@SYS25908");
      #             break;
      #
      #        case LedgerJournalType::VendInvoiceRegister,
      #             LedgerJournalType::Approval :
      #             salesTax_TaxObligationCompany.visible(true);
      #             break;
      #
      #        default :
      #            // Default properties of the tabpage
      #    }
      #}
      #
    ENDSOURCE
    SOURCE #initParmDefault
      #public void initParmDefault()
      #{
      #    showStatus = AllOpenPosted::Open;
      #    showCurrentUser = true;
      #}
    ENDSOURCE
    SOURCE #isSimpleMethod_CN
      #public boolean isSimpleMethod_CN()
      #{
      #    return isSimpleMethod;
      #}
    ENDSOURCE
    SOURCE #journalForm
      #JournalForm journalForm()
      #{
      #    return journalFormTable;
      #}
    ENDSOURCE
    SOURCE #lastValueDataAreaId
      #public DataAreaId lastValueDataAreaId()
      #{
      #    return curext();
      #}
    ENDSOURCE
    SOURCE #lastValueDesignName
      #public IdentifierName lastValueDesignName()
      #{
      #    return element.args().menuItemName();
      #}
    ENDSOURCE
    SOURCE #lastValueElementName
      #public IdentifierName lastValueElementName()
      #{
      #    return this.name();
      #}
    ENDSOURCE
    SOURCE #lastValueType
      #public UtilElementType lastValueType()
      #{
      #    return UtilElementType::Form;
      #}
    ENDSOURCE
    SOURCE #lastValueUserId
      #public UserId lastValueUserId()
      #{
      #    return curUserId();
      #}
    ENDSOURCE
    SOURCE #loadWorkflowConfiguration
      #public Common loadWorkflowConfiguration()
      #{
      #    WorkflowVersionTable        workflowConfigurationTable;
      #    LedgerJournalName           ledgerJournalName = ledgerJournalTable.ledgerJournalName();
      #    ;
      #
      #    if (ledgerJournalName.checkWorkflowApprovalEnabled())
      #    {
      #        workflowConfigurationTable = WorkflowVersionTable::findSequenceNumber(ledgerJournalName.Configuration);
      #    }
      #
      #    return workflowConfigurationTable;
      #}
    ENDSOURCE
    SOURCE #M_I004enableFieldsPostingProfile
      #//-------------------------------------------------------------------------------------------------------
      #// Method added on 03 nov 2011 at 17:10:50 by dpastrello project MHT_I004_LedgerJournalImprovements
      #//-------------------------------------------------------------------------------------------------------
      #// --- Method description ---
      #// Features               : enable posting profile
      #// Input parameters       :
      #// Return value           :
      #//-------------------------------------------------------------------------------------------------------
      #private void M_I004enableFieldsPostingProfile()
      #{
      #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable,M_I004PostingProfile)).enabled(ledgerJournalTable.M_I004PostingProfileModule != M_I004PostingProfileModule::None);
      #}
    ENDSOURCE
    SOURCE #openSimpleForm_CN
      #public void openSimpleForm_CN()
      #{
      #    FormRun              formRun;
      #    Args                 args = new Args();
      #    LedgerVoucherType_CN voucherType;
      #    Name                 journalDescription;
      #
      #    if (ledgerJournalTable.JournalName == '')
      #    {
      #        ledgerJournalTable.JournalName =
      #            (select firstonly ledgerJournalName
      #                where ledgerJournalName.JournalType == journalFormTable.journalTypeId()).JournalName;
      #    }
      #    journalFormTable.fieldModifiedJournalNameIdPost();
      #    ledgerJournalTable_ds.write();
      #
      #    args.parm(ledgerJournalTable.JournalNum);
      #    args.record(ledgerJournalTable);
      #    formRun = new MenuFunction(menuitemDisplayStr(LedgerJournalTransDaily_CN), MenuItemType::Display).create(args);
      #    if (formRun)
      #    {
      #        formRun.run();
      #        formRun.wait();
      #    }
      #    if (args.parm() == '')
      #    {
      #        ledgerJournalTable.delete();
      #        ledgerJournalTable_ds.research();
      #        ledgerJournalTable_ds.refresh();
      #    }
      #    else
      #    {
      #        voucherType = LedgerVoucherType_CN::findByNaturalKey(args.parm());
      #        journalDescription = ledgerJournalTable.Name;
      #        ledgerJournalTable.JournalName = voucherType.DefaultJournal;
      #        journalFormTable.fieldModifiedJournalNameIdPost();
      #        ledgerJournalTable.Name = journalDescription;
      #        ledgerJournalTable_ds.write();
      #        journalLines.clicked();
      #    }
      #}
    ENDSOURCE
    SOURCE #pack
      #public container pack()
      #{
      #    return [#CurrentVersion, #CurrentList];
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    ;
      #
      #    SysListPageHelper::handleRunPreSuper(element, tab, 2, 1);
      #    xSysLastValue::getLast(this);
      #    AllOpenPostedField.selection(showStatus);
      #    ShowUserCreatedOnly.value(showCurrentUser);
      #    super();
      #    SysListPageHelper::handleRunPostSuper(element, tab);
      #
      #    //If opened from payment journal list page, set to All types
      #    //Only execute code if called from ForEdit menu item
      #    if (SysListPageHelper::isFormOpenedWithOpenModeForEditParm(element))
      #    {
      #        if ((element.args().caller().name() == formStr(LedgerJournalTableCustPaymentListPage))
      #         || (element.args().caller().name() == formStr(LedgerJournalTableVendPaymentListPage)))
      #        {
      #            tab.tab(2);
      #        }
      #    }
      #}
      #
    ENDSOURCE
    SOURCE #setAccountAccess
      #void setAccountAccess()
      #{
      #    // Italian only functionality
      #    if (bankAccount_IT)
      #    {
      #        if (ledgerJournalTable.JournalType == LedgerJournalType::Payment &&
      #            ledgerJournalTable.existVoucher())
      #        {
      #            ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, BankAccountId)).allowEdit(false);
      #        }
      #        else
      #        {
      #            ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, BankAccountId)).allowEdit(true);
      #        }
      #    }
      #}
      #
    ENDSOURCE
    SOURCE #setAmountInclSalesTax_IN
      #void setAmountInclSalesTax_IN()
      #{
      #    if (element.args().menuItemName() == menuitemDisplayStr(LedgerJournalTable7) &&
      #        SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) &&
      #        TaxParameters::find().JournalInclTax)
      #    {
      #        ledgerJournalTable.LedgerJournalInclTax = NoYes::Yes;
      #        ledgerJournalTable_ds.refresh();
      #    }
      #}
    ENDSOURCE
    SOURCE #setLinesGeneratePaymentsLabelAndHelpText
      #/// <summary>
      #/// Specializes the label and help text on the JournalLines_GeneratePayments item of the
      #/// JournalLines_WorkflowApproved button for the currently selected journal.
      #/// </summary>
      #/// <remarks>
      #/// This method has to be public so it can be called from data source.
      #/// </remarks>
      #public void setLinesGeneratePaymentsLabelAndHelpText()
      #{
      #    ;
      #
      #    if (ledgerJournalTable.JournalType == LedgerJournalType::CustPaymRemittance ||
      #        ledgerJournalTable.JournalType == LedgerJournalType::VendPaymRemittance)
      #    {
      #        // This is a remittance journal, so specialize the text.
      #        journalLines_GeneratePayments.text("@SYS83541");
      #        journalLines_GeneratePayments.helpText("@SYS109634");
      #    }
      #    else
      #    {
      #        // This is a 'regular' journal, so generalize the text.
      #        journalLines_GeneratePayments.text("@SYS24287");
      #        journalLines_GeneratePayments.helpText("@SYS109635");
      #    }
      #}
      #
      #
    ENDSOURCE
    SOURCE #showProperJournalLinesButton
      #/// <summary>
      #/// Shows either the JournalLines_WorkflowApproved button or the JournalLines button for the
      #/// current workflow approvals state.
      #/// </summary>
      #/// <remarks>
      #/// This method has to be public so it can be called from the data source.
      #/// </remarks>
      #public void showProperJournalLinesButton()
      #{
      #    ;
      #
      #    if (ledgerJournalTable.isWFApprovalApproved() && !ledgerJournalTable.Posted)
      #    {
      #        // The journal is in workflow approvals and has been approved, so display the alternative lines button
      #        // which gives review, edit and generate payments options.
      #
      #        // change visibility to "swap" in the workflow version
      #        journalLines_WorkflowApproved.visible(true);
      #        journalLines.visible(false);
      #
      #        if (journalFormTable.canLinesFormGeneratePayments(ledgerJournalTable.JournalType))
      #        {
      #            journalLines_GeneratePayments.visible(true);
      #        }
      #        else
      #        {
      #            journalLines_GeneratePayments.visible(false);
      #        }
      #    }
      #    else
      #    {
      #        // The journal has not been workflow approvals approved so just display the regular lines button.
      #
      #        // change visibility to "swap" in the regular version
      #        journalLines_WorkflowApproved.visible(false);
      #        journalLines.visible(true);
      #    }
      #}
      #
    ENDSOURCE
    SOURCE #test
      #public void test()
      #{
      #}
    ENDSOURCE
    SOURCE #timeOutRedraw
      #void timeOutRedraw()
      #{
      #    ;
      #    journalFormTable.formMethodTimeOutRedraw();
      #}
    ENDSOURCE
    SOURCE #unpack
      #public boolean unpack(container  _packedClass)
      #{
      #    int version = RunBase::getVersion(_packedClass);
      #    switch (version)
      #    {
      #    case #CurrentVersion:
      #    [version, #CurrentList] = _packedClass;
      #    return true;
      #    default:
      #    return false;
      #    }
      #    return false;
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #LedgerJournalTable
          Table               #LedgerJournalTable
          Index               #TypeNumIdx
          DelayActive         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD JournalType
            PROPERTIES
              AllowEdit           #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD SystemBlocked
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #public void modified()
                #{
                #    super();
                #    journalFormTable.fieldModifiedSystemBlockedPost();
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD JournalName
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #lookup
                #public void lookup(FormControl _formControl, str _filterStr)
                #{
                #    ;
                #    journalFormTable.designLookupJournalName(_formControl);
                #}
              ENDSOURCE
              SOURCE #validate
                #boolean validate()
                #{
                #    boolean ret;
                #    ;
                #
                #    ret = super();
                #
                #    ret = journalFormTable.fieldValidateJournalNameIdPost(ret);
                #
                #    return ret;
                #}
              ENDSOURCE
              SOURCE #modified
                #void modified()
                #{
                #    super();
                #
                #    journalFormTable.fieldModifiedJournalNameIdPost();
                #
                #    element.updateWorkflowControls();
                #
                #    element.redraw();
                #
                #    element.enableFieldsActive();
                #    dimensionDefaultingController.activated();
                #    element.setAmountInclSalesTax_IN();
                #}
                #
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD GroupBlockId
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #public void modified()
                #{
                #    super();
                #
                #    journalFormTable.fieldModifiedBlockUserGroupId();
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD LedgerJournalInclTax
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #validate
                #public boolean validate()
                #{
                #    boolean             ret;
                #    LedgerJournalTrans  ledgerJournalTransLocal;
                #    boolean             custTaxOnPrepayment = CustParameters::find().TaxOnPrepayment;
                #    boolean             vendTaxOnPrepayment = VendParameters::find().TaxOnPrepayment;
                #
                #    ret = super();
                #
                #    if (!ledgerJournalTable.LedgerJournalInclTax && ret)
                #    {
                #        while select AccountType, OffsetLedgerDimension, OffsetAccountType from ledgerJournalTransLocal
                #            where ledgerJournalTransLocal.JournalNum == ledgerJournalTable.JournalNum &&
                #                  ledgerJournalTransLocal.Prepayment
                #        {
                #            if (custTaxOnPrepayment &&
                #               (ledgerJournalTransLocal.AccountType   == LedgerJournalACType::Cust ||
                #               (ledgerJournalTransLocal.parmOffsetLedgerDimension() &&
                #                ledgerJournalTransLocal.OffsetAccountType == LedgerJournalACType::Cust)))
                #            {
                #                error("@SYS98400");
                #                return false;
                #            }
                #
                #            if (vendTaxOnPrepayment &&
                #               (ledgerJournalTransLocal.AccountType   == LedgerJournalACType::Vend ||
                #               (ledgerJournalTransLocal.parmOffsetLedgerDimension() &&
                #                ledgerJournalTransLocal.OffsetAccountType == LedgerJournalACType::Vend)))
                #            {
                #                error("@SYS98400");
                #                return false;
                #            }
                #        }
                #    }
                #
                #    return ret;
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD BankAccountId
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #lookup
                #public void lookup(FormControl _formControl, str _filterStr)
                #{
                #    BankAccountTable::lookupBankAccount(_formControl);
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD ReverseEntry
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #/// <summary>
                #/// Sets the editable property of theLedgerJournalTable table ReverseDate field.
                #/// </summary>
                #public void modified()
                #{
                #    ;
                #
                #    super();
                #
                #    ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, ReverseDate)).allowEdit(ledgerJournalTable.ReverseEntry ? true : false);
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          REFERENCEFIELD OffsetLedgerDimension
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #resolveReference
                #public Common resolveReference(FormReferenceControl _formReferenceControl)
                #{
                #    Common common = dimOffsetAccountController.resolveReference();
                #
                #    return common;
                #}
              ENDSOURCE
              SOURCE #jumpRef
                #public void jumpRef()
                #{
                #    dimOffsetAccountController.jumpRef();
                #}
              ENDSOURCE
            ENDMETHODS
          ENDREFERENCEFIELD
          
          DATAFIELD M_I004PostingProfile
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #lookup
                #public void lookup(FormControl _formControl, str _filterStr)
                #{
                #    SysTableLookup          sysTableLookup;
                #    ;
                #
                #    switch (ledgerJournalTable.M_I004PostingProfileModule)
                #    {
                #        case M_I004PostingProfileModule::Cust : sysTableLookup = SysTableLookup::newParameters(tableNum(CustLedger),_formControl);
                #                                                sysTableLookup.addLookupfield(fieldNum(CustLedger, PostingProfile));
                #                                                sysTableLookup.addLookupfield(fieldNum(CustLedger, Name));
                #                                                break;
                #
                #        case M_I004PostingProfileModule::Vend : sysTableLookup = SysTableLookup::newParameters(tableNum(VendLedger),_formControl);
                #                                                sysTableLookup.addLookupfield(fieldNum(VendLedger, PostingProfile));
                #                                                sysTableLookup.addLookupfield(fieldNum(VendLedger, Name));
                #                                                break;
                #    }
                #
                #    sysTableLookup.performFormLookup();
                #
                #    super(_formControl, _filterStr);
                #}
              ENDSOURCE
              SOURCE #jumpRef
                #public void jumpRef()
                #{
                #    MenuFunction                        menuFunction;
                #    Args                                args = new Args();
                #    ;
                #
                #    if (LedgerJournalTable.M_I004PostingProfileModule == M_I004PostingProfileModule::Cust)
                #        menuFunction = new MenuFunction(menuitemDisplayStr(CustPosting), MenuItemType::Display);
                #    else
                #        menuFunction = new MenuFunction(menuitemDisplayStr(VendPosting), MenuItemType::Display);
                #
                #    menuFunction.copyCallerQuery(CopyCallerQuery::No);
                #    menuFunction.run(args);
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD M_I004PostingProfileModule
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #public void modified()
                #{
                #    super();
                #
                #    ledgerJournalTable_ds.active();
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #getMarkedRecords
          #public Array getMarkedRecords()
          #{
          #    Array toSort = ledgerJournalTable_DS.recordsMarked();
          #    Array sortedArray = new Array(toSort.typeId());
          #    int i, j;
          #    boolean inserted;
          #
          #    for (i = 1; i <= toSort.lastIndex(); i++)
          #    {
          #        inserted = false;
          #        for (j = i - 1; j >= 1; j--)
          #        {
          #            if (sortedArray.value(j) <= toSort.value(i))
          #            {
          #                sortedArray.value(j + 1, toSort.value(i));
          #                inserted = true;
          #                break;
          #            }
          #            else
          #            {
          #                sortedArray.value(j + 1, sortedArray.value(j));
          #            }
          #        }
          #        if (!inserted)
          #        {
          #            sortedArray.value(1, toSort.value(i));
          #        }
          #    }
          #    return sortedArray;
          #}
        ENDSOURCE
        SOURCE #deleteMarked
          #/// <summary>
          #/// Deletes the marked records on the datasource based on the user prompt response.
          #/// </summary>
          #public void deleteMarked()
          #{
          #    Array recordsMarked;
          #    int recordArrayIndex;
          #
          #    if (Box::yesNo(strFmt("@GLS93975"), DialogButton::No) == DialogButton::Yes)
          #    {
          #        recordsMarked = this.getMarkedRecords();
          #
          #        for (recordArrayIndex = recordsMarked.lastIndex(); recordArrayIndex >= 1; recordArrayIndex--)
          #        {
          #            ledgerJournalTable_DS.setPosition(recordsMarked.value(recordArrayIndex));
          #
          #            ledgerJournalTable_DS.delete(true);
          #        }
          #    }
          #}
        ENDSOURCE
        SOURCE #validateDelete
          #public boolean validateDelete()
          #{
          #    boolean ret;
          #
          #    if (ledgerJournalTable.JournalType == LedgerJournalType::Approval)
          #    {
          #        // Force users to delete lines first for an AP invoice approval journal
          #        ret = super();
          #    }
          #    else
          #    {
          #        // don't call super because validation is now performed in the delete method
          #    ret = true;
          #    }
          #    return ret;
          #}
        ENDSOURCE
        SOURCE #linkActive
          #public void linkActive()
          #{
          #    PdsRebateTable pdsRebateTable;
          #    PdsRebateTrans pdsRebateTrans;
          #    TAMVendRebateTable tamVendRebateTable;
          #    TAMVendRebateTrans tamVendRebateTrans;
          #
          #    ;
          #    journalFormTable.datasourceLinkActivePre();
          #
          #    if(element.args()
          #        && element.args().record()
          #        && (element.args().record().TableId == tablenum(PdsRebateTable)))
          #    {
          #        pdsRebateTable = element.args().record();
          #        pdsRebateTrans = PdsRebateTrans::findByRebateIdAndTransactionType(
          #            pdsRebateTable.PdsRebateId,
          #            PdsRebateTransaction::LedgerJournalProcessing);
          #        SysQuery::findOrCreateRange(this.queryBuildDataSource(), fieldNum(LedgerJournalTable, JournalNum)).value(pdsRebateTrans.LedgerJournalId);
          #    }
          #    else if(element.args()
          #            && element.args().record()
          #            && (element.args().record().TableId == tableNum(TAMVendRebateTable)))
          #    {
          #        tamVendRebateTable = element.args().record();
          #        tamVendRebateTrans = TAMVendRebateTrans::findByVendRebateIdTransaction(tamVendRebateTable.VendRebateId,
          #                                                        TAMVendRebateTransactionType::RebateAccrual);
          #        SysQuery::findOrCreateRange(this.queryBuildDataSource(), fieldNum(LedgerJournalTable, JournalNum)).value(tamVendRebateTrans.LedgerJournalId);
          #    }
          #
          #    super();
          #}
        ENDSOURCE
        SOURCE #reread
          #public void reread()
          #{
          #    LedgerJournalTable_W localLedgerJournalTable_W;
          #
          #    super();
          #    if (enableLedgerJournalTable_W)
          #    {
          #        // The child table may have been inserted so synchronize the datasource
          #        localLedgerJournalTable_W = LedgerJournalTable_W::findByLedgerJournalTable(LedgerJournalTable.RecId);
          #        LedgerJournalTable_W.data(localLedgerJournalTable_W);
          #        LedgerJournalTable_W_ds.reread();
          #        LedgerJournalTable_W_ds.refresh();
          #    }
          #
          #    journalFormTable.datasourceReReadPost();
          #
          #    if (bankAccount_IT)
          #    {
          #        element.enableButtonsActive();
          #    }
          #}
        ENDSOURCE
        SOURCE #lockImage
          #//BP Deviation Documented
          #display Integer lockImage(LedgerJournalTable _journalTable)
          #{
          #    return journalFormTable.datasourceMethodLockImage(_journalTable);
          #}
        ENDSOURCE
        SOURCE #inUseUserId
          #//BP Deviation Documented
          #display JournalBlockInUseUserId inUseUserId()
          #{
          #    return journalFormTable.datasourceMethodInUseUserId(ledgerJournalTable);
          #}
        ENDSOURCE
        SOURCE #inUseBlock
          #//BP Deviation Documented
          #edit JournalMarkInUseBlock inUseBlock(boolean _set, JournalTableMap _journalTable, JournalMarkInUseBlock _value)
          #{
          #    ;
          #    return journalFormTable.datasourceMethodInUseBlock(_set, _journalTable, _value);
          #}
        ENDSOURCE
        SOURCE #write
          #/// <summary>
          #/// Handles the datasource's write event.
          #/// </summary>
          #void write()
          #{
          #    boolean enableJournalLines = false;
          #
          #    ttsbegin;
          #
          #    if (ledgerJournalTable.isWFApprovalApproved())
          #    {
          #        ledgerJournalTable.WorkflowApprovalStatus = LedgerJournalWFApprovalStatus::NotSubmitted;
          #    }
          #
          #    dimensionDefaultingController.writing();
          #
          #    super();
          #
          #    journalFormTable.datasourceWritePost();
          #
          #    if (enableLedgerJournalTable_W && ledgerJournalTable_W.LedgerJournalTable == 0)
          #    {
          #        // Write the extension table record now that the parent record has a record ID
          #        ledgerJournalTable_W.LedgerJournalTable = ledgerJournalTable.RecId;
          #        ledgerJournalTable_W_ds.write();
          #    }
          #
          #    ttscommit;
          #
          #    // Set enableJournalLines if the journal workflow approval status is "Notsubmitted".
          #    if (ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::NotSubmitted)
          #    {
          #        enableJournalLines = true;
          #    }
          #
          #    if (enableJournalLines)
          #    {
          #        element.showProperJournalLinesButton();
          #    }
          #}
          #
        ENDSOURCE
        SOURCE #validateWrite
          #public boolean validateWrite()
          #{
          #    boolean isValid;
          #
          #    isValid = super();
          #
          #    isValid = journalFormTable.datasourceValidateWritePost(isValid);
          #
          #    if (isValid && ledgerJournalTable.isWFApprovalApproved())
          #    {
          #        if (Box::yesNo("@SYS109636", DialogButton::No) == DialogButton::No)
          #        {
          #            isValid = false;
          #            ledgerJournalTable_ds.reread();
          #            element.redraw();
          #        }
          #    }
          #
          #    if (isValid
          #        && LedgerParameters::isJournalApproval_CN()
          #        && journalFormTable.journalTypeId() == LedgerJournalType::Daily)
          #    {
          #        if (ledgerJournalTable_W.ApprovalStatus_CN == LedgerApprovalStatus_CN::Approved
          #            && !Box::yesNo("@GLS54522", 1, '', ''))
          #        {
          #            isValid = false;
          #            ledgerJournalTable_ds.reread();
          #            element.redraw();
          #        }
          #        else
          #        {
          #            ledgerJournalTable.setToOpenValue_CN();
          #        }
          #    }
          #
          #    return isValid;
          #}
        ENDSOURCE
        SOURCE #leave
          #public boolean leave()
          #{
          #    boolean ret = true;
          #
          #
          #    if (!inCreate && !inDelete)
          #    {
          #        if (ledgerJournalTable.JournalName == '')
          #        {
          #            // delete a new record with no journal name or the user will have to do it manually
          #            ledgerJournalTable_ds.delete();
          #        }
          #
          #        ret = journalFormTable.datasourceLeavePre();
          #    }
          #
          #    ret = ret && super();
          #
          #    return ret;
          #}
        ENDSOURCE
        SOURCE #initValue
          #void initValue()
          #{
          #    ;
          #
          #    super();
          #
          #    journalFormTable.datasourceInitValuePost();
          #}
        ENDSOURCE
        SOURCE #init
          #void init()
          #{
          #    super();
          #
          #    journalFormTable.datasourceInitPost(ledgerJournalTable);
          #
          #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) &&
          #        element.args().menuItemName() == menuitemDisplayStr(LedgerJournalTable7))
          #    {
          #        SalesTax.enabled(false);
          #    }
          #}
        ENDSOURCE
        SOURCE #executeQuery
          #void executeQuery()
          #{
          #    ;
          #    journalFormTable.datasourceExecuteQueryPre();
          #
          #    super();
          #
          #    journalFormTable.datasourceExecuteQueryPost();
          #}
        ENDSOURCE
        SOURCE #delete
          #//AOSRunmode::Client
          #void delete(boolean _suppressPrompt = false)
          #{
          #    LedgerJournalTrans ledgerJournalTrans;
          #
          #    try
          #    {
          #        inDelete = true;
          #
          #        if (ledgerJournalTable.Posted)
          #        {
          #            inDelete = false;
          #
          #            warning(strFmt("@SYS4004099", ledgerJournalTable.JournalNum));
          #
          #            return;
          #        }
          #
          #        if (ledgerJournalTable.RecId)
          #        {
          #            if (!_suppressPrompt &&
          #                (Box::yesNo(strFmt("@SYS71705", ledgerJournalTable.JournalNum), DialogButton::No) == DialogButton::No))
          #            {
          #                inDelete = false;
          #
          #                return;
          #            }
          #        }
          #
          #        if (ledgerJournalTable.JournalType == LedgerJournalType::RCash && !ledgerJournalTable.canDeleteJournal())
          #        {
          #            inDelete = false;
          #
          #            warning(strFmt("@SYP4884558", ledgerJournalTable.JournalNum));
          #
          #            return;
          #        }
          #
          #        ttsbegin;
          #
          #        select firstOnly ledgerJournalTrans
          #            where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
          #                && ledgerJournalTrans.PaymentStatus != CustVendPaymStatus::None
          #                && ledgerJournalTrans.BankChequeNum != '';
          #
          #        if (ledgerJournalTrans)
          #        {
          #            throw error ("@SYS28578");
          #        }
          #
          #        // Short circuit compositional record deletion when the record has not been saved for performance
          #        // Users must still delete lines for AP invoice approval journals
          #        if (ledgerJournalTable.RecId && (ledgerJournalTable.JournalType != LedgerJournalType::Approval))
          #        {
          #            LedgerJournalTable::deleteAllLines(ledgerJournalTable.RecId);
          #        }
          #
          #        super();
          #
          #        journalFormTable.datasourceDeletePost();
          #
          #        ttscommit;
          #
          #        inDelete = false;
          #
          #        dimensionDefaultingController.deleted();
          #
          #        if (!this.cursor().RecId)
          #        {
          #            //
          #            // Workflow controls must be updated on demand
          #            // when the last row is deleted from the grid.
          #            //
          #            element.updateWorkflowControls();
          #        }
          #    }
          #    catch(Exception::Error)
          #    {
          #        inDelete = false;
          #        throw Exception::Error;
          #    }
          #    catch(Exception::UpdateConflict)
          #    {
          #        inDelete = false;
          #        throw Exception::UpdateConflict;
          #    }
          #    catch(Exception::CodeAccessSecurity)
          #    {
          #        inDelete = false;
          #        throw Exception::CodeAccessSecurity;
          #    }
          #    catch(Exception::UpdateConflictNotRecovered)
          #    {
          #        inDelete = false;
          #        throw Exception::UpdateConflictNotRecovered;
          #    }
          #}
        ENDSOURCE
        SOURCE #create
          #void create(boolean _append = false)
          #{
          #    ;
          #    inCreate = true;
          #    if (! journalFormTable.datasourceCreatePre())
          #    {
          #        inCreate = false;
          #        return;
          #    }
          #
          #    super(_append);
          #
          #    journalFormTable.datasourceCreatePost();
          #
          #    // If a query filter in journal name is applied, the kernel doesn't recognize that the field has changed and
          #    // that the record is 'dirty'
          #    if (ledgerJournalTable.JournalName)
          #    {
          #        ledgerJournalTable_ds.object(fieldNum(LedgerJournalTable, JournalName)).modified();
          #    }
          #    inCreate = false;
          #
          #    if (LedgerParameters::isChineseVoucher_CN()
          #        && journalFormTable.journalTypeId() == LedgerJournalType::Daily
          #        && isSimpleMethod)
          #    {
          #        element.openSimpleForm_CN();
          #    }
          #    element.setAmountInclSalesTax_IN();
          #}
        ENDSOURCE
        SOURCE #active
          #int active()
          #{
          #    int ret;
          #    boolean isWorkflowEnabledForJournalName;
          #
          #    element.setAccountAccess();
          #
          #    journalFormTable.datasourceActivePre();
          #
          #    isWorkflowEnabledForJournalName = ledgerJournalTable.ledgerJournalName().WorkflowApproval == NoYes::Yes;
          #
          #    // if specific journal name workflow is not turned on, explicitly disable workflow support on the form
          #    // to avoid extra RPC from workflow infrastructure invoked indirectly from super().
          #    element.design().workflowEnabled(isWorkflowEnabledForJournalName);
          #
          #    journalFormTable.parmIsWorkflowEnabledForJournalName(isWorkflowEnabledForJournalName);
          #
          #    ret = super();
          #
          #    journalFormTable.datasourceActivePost();
          #
          #    element.setAccountAccess();
          #
          #    element.showProperJournalLinesButton();
          #
          #    element.setLinesGeneratePaymentsLabelAndHelpText();
          #
          #    dimensionDefaultingController.activated();
          #
          #    return ret;
          #}
          #
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #LedgerJournalTable_W
          Table               #LedgerJournalTable_W
          JoinSource          #LedgerJournalTable
          LinkType            #Passive
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
          REFERENCEFIELD FiscalEstablishment_BR
            PROPERTIES
              Visible             #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDREFERENCEFIELD
          
          DATAFIELD TaxType_BR
            PROPERTIES
              Visible             #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #editTaxType
          #/// <summary>
          #/// Edits the freight type value.
          #/// </summary>
          #/// <param name="_set">
          #/// A boolean value to determine if the value is being set or not.
          #/// </param>
          #/// <param name="_ledgerJournalTable_W">
          #/// The <c>LedgerJournalTable_W</c> record
          #/// </param>
          #/// <param name="_taxTypeStr">
          #/// The tax type value
          #/// </param>
          #/// <returns>
          #/// The label of the freight type.
          #/// </returns>
          #/// <remarks>
          #/// If the freight type is not valid, it will display the raw value.
          #/// </remarks>
          #public edit String15 editTaxType(boolean _set, LedgerJournalTable_W _ledgerJournalTable_W, String15 _taxTypeStr)
          #{
          #    String15                taxTypeStr;
          #    TaxType_BR              taxtype;
          #
          #    if (_set)
          #    {
          #        _ledgerJournalTable_W.TaxType_BR  = str2enum(taxtype, _taxTypeStr);
          #
          #        taxTypeStr = _taxTypeStr;
          #    }
          #    else
          #    {
          #        taxTypeStr         = enum2str(_ledgerJournalTable_W.TaxType_BR);
          #    }
          #
          #    return taxTypeStr;
          #}
        ENDSOURCE
        SOURCE #init
          #public void init()
          #{
          #    if (enableLedgerJournalTable_W)
          #    {
          #        // Switch the link type as fields appear in the grid that require an outerjoin
          #        LedgerJournalTable_W_ds.linkType(FormLinkType::OuterJoin);
          #    }
          #
          #    super();
          #}
          #
        ENDSOURCE
        SOURCE #write
          #public void write()
          #{
          #    if (enableLedgerJournalTable_W && LedgerJournalTable_W.LedgerJournalTable != 0)
          #    {
          #        // Only write the child table if the country context is set to one that the table has fields linked to and the child table has the parent FK set
          #        super();
          #    }
          #}
          #
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #BaseDocument_IT
          Table               #BaseDocument_IT
          JoinSource          #LedgerJournalTable
          LinkType            #Passive
          DelayActive         #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #init
          #public void init()
          #{
          #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
          #    {
          #        this.linkType(FormLinkType::Delayed);
          #    }
          #
          #    super();
          #
          #}
        ENDSOURCE
        SOURCE #active
          #public int active()
          #{
          #    int ret;
          #
          #    ret = super();
          #
          #    if (ret)
          #    {
          #        BaseDocument_IT.enableFieldsDocumentType();
          #    }
          #
          #    return ret;
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
    LedgerJournalTable_W LedgerJournalTable
    BaseDocument_IT LedgerJournalTable
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS6790
      UseCaptionFromMenuItem  #Yes
      DataSource          #LedgerJournalTable
      HideIfEmpty         #No
      WorkflowEnabled     #Yes
      WorkflowDatasource  #LedgerJournalTable
    ENDPROPERTIES
    
    CONTAINER
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #ActionPane
          ElementPosition     #715827882
          Style               #Strip
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #ActionPane
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1610612733
          HierarchyParent     #ActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #NewDeleteGroup
          ElementPosition     #1073741822
          HierarchyParent     #ActionPaneTab
          DataSource          #LedgerJournalTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #GridOverview
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #Overview
          DataSource          #LedgerJournalTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Approvalprocedure
          AllowEdit           #No
          Enabled             #No
          ElementPosition     #613566756
          HierarchyParent     #History
          DataSource          #LedgerJournalTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #BaseDocument
          ElementPosition     #2143289342
          HierarchyParent     #Setup
          DataSource          #BaseDocument_IT
          DataGroup           #BaseDocument
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #BillOfExchange
          AutoDeclaration     #Yes
          ElementPosition     #858993458
          HierarchyParent     #TabBillOfExchange
          FrameType           #None
          DataSource          #LedgerJournalTable
          DataGroup           #BillOfExchange
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Blocked
          ElementPosition     #1717986916
          HierarchyParent     #Block
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #CashAccounts_W
          ElementPosition     #1342177278
          HierarchyParent     #Setup
          DataSource          #LedgerJournalTable_W
          DataGroup           #CashAccounts_W
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Correction_RU
          AutoDeclaration     #Yes
          CountryRegionCodes  #RU
          ElementPosition     #2058005160
          HierarchyParent     #General
          DataSource          #LedgerJournalTable_W
          DataGroup           #Correction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Currency
          AutoDeclaration     #Yes
          ElementPosition     #2013265918
          HierarchyParent     #Setup
          Caption             #@SYS7572
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #DocumentNum
          ElementPosition     #805306365
          HierarchyParent     #Setup
          Caption             #@SYS101280
          DataSource          #LedgerJournalTable
          DataGroup           #M_I004Document
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #FiscalInformation_BR
          ElementPosition     #2139095038
          HierarchyParent     #Setup
          DataSource          #LedgerJournalTable_W
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ForeignPaymentsInformation_LT
          ElementPosition     #1840700268
          HierarchyParent     #General
          DataSource          #LedgerJournalTable_W
          DataGroup           #ForeignPaymentsInformation_LT
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Group
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupProtestNegInst
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #1717986916
          HierarchyParent     #TabBillOfExchange
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupReversingEntry
          AutoDeclaration     #Yes
          ConfigurationKey    #LedgerBasicReversingEntries
          ElementPosition     #1533916890
          HierarchyParent     #General
          DataSource          #LedgerJournalTable
          DataGroup           #ReversingEntry
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Identification
          ElementPosition     #613566756
          HierarchyParent     #General
          DataSource          #LedgerJournalTable
          DataGroup           #Identification
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Journal
          ElementPosition     #920350134
          HierarchyParent     #General
          Caption             #@SYS6790
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #M_I004PostingProfile
          ElementPosition     #1946157051
          HierarchyParent     #Setup
          DataSource          #LedgerJournalTable
          DataGroup           #M_I004PostingProfile
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #M_I005Notes
          ElementPosition     #1431655764
          HierarchyParent     #M_I005TabNotes
          FrameType           #None
          DataSource          #LedgerJournalTable
          DataGroup           #M_I005Notes
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #OffsetAccountGroup
          ElementPosition     #536870910
          HierarchyParent     #Setup
          Caption             #@SYS11162
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Origin
          ElementPosition     #920350134
          HierarchyParent     #History
          DataSource          #LedgerJournalTable
          DataGroup           #Origin
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Posting
          ElementPosition     #1227133512
          HierarchyParent     #General
          Caption             #@SYS5943
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Prepayment_W
          ElementPosition     #2130706430
          HierarchyParent     #Setup
          DataSource          #LedgerJournalTable_W
          DataGroup           #Prepayment_W
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PrivateBlock
          ElementPosition     #858993458
          HierarchyParent     #Block
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Promissorynote
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #1288490187
          HierarchyParent     #TabBillOfExchange
          FrameType           #None
          DataSource          #LedgerJournalTable
          DataGroup           #PromissoryNote
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PromissoryNote_IT
          CountryRegionCodes  #IT
          ElementPosition     #1879048185
          HierarchyParent     #Setup
          DataSource          #LedgerJournalTable
          DataGroup           #PromissoryNote
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #SalesTax
          AutoDeclaration     #Yes
          ElementPosition     #1610612731
          HierarchyParent     #Setup
          DataSource          #LedgerJournalTable
          DataGroup           #SalesTax
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TopFields
          ElementPosition     #1073741822
          HierarchyParent     #Group
          FrameType           #None
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #User
          ElementPosition     #1288490187
          HierarchyParent     #Block
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #VoucherAllocation
          ElementPosition     #1073741820
          HierarchyParent     #Setup
          DataSource          #LedgerJournalTable
          DataGroup           #VoucherAllocation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUBUTTON
        PROPERTIES
          Name                #Course
          AutoDeclaration     #Yes
          HelpText            #@SYS24580
          ElementPosition     #1670265058
          HierarchyParent     #ButtonGroup
          Text                #@SYS2453
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUBUTTON
        PROPERTIES
          Name                #JournalCreate_RU
          AutoDeclaration     #Yes
          Visible             #No
          NeededPermission    #Create
          CountryRegionCodes  #RU
          HelpText            #@GLS105877
          ElementPosition     #2142240766
          HierarchyParent     #ButtonGroup
          Text                #@SYS14364
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUBUTTON
        PROPERTIES
          Name                #JournalLines_WorkflowApproved
          AutoDeclaration     #Yes
          HelpText            #@SYS109637
          ElementPosition     #954437176
          HierarchyParent     #ButtonGroup
          Text                #@SYS15451
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUBUTTON
        PROPERTIES
          Name                #PostJournal
          AutoDeclaration     #Yes
          HelpText            #@SYS5943
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroup
          Text                #@SYS6098
          ButtonDisplay       #Text & Image left
          NormalImage         #10285
          ImageLocation       #EmbeddedResource
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #
            #    ledgerJournalTable_ds.reread();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUBUTTON
        PROPERTIES
          Name                #PrintMenu
          AutoDeclaration     #Yes
          HelpText            #@SYS920
          ElementPosition     #1908874352
          HierarchyParent     #ButtonGroup
          Text                #@SYS920
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #ApprovalProcedure_Approver
          ElementPosition     #1073741823
          HierarchyParent     #Approvalprocedure
          DataSource          #LedgerJournalTable
          ReferenceField      #Approver
          ReplacementFieldGroup #PersonnelNumber
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #FiscalInformation_BR_FiscalEstablishment_BR
          ElementPosition     #1073741822
          HierarchyParent     #FiscalInformation_BR
          DataSource          #LedgerJournalTable_W
          ReferenceField      #FiscalEstablishment_BR
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #Tab
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612734
          HierarchyParent     #Group
          DataSource          #LedgerJournalTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Block
          ElementPosition     #2013265918
          HierarchyParent     #Tab
          Caption             #@SYS50247
          DataSource          #LedgerJournalTable
          Columns             #3
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #General
          ElementPosition     #1207959549
          HierarchyParent     #Tab
          Caption             #@SYS2952
          DataSource          #LedgerJournalTable
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #History
          AllowEdit           #No
          Enabled             #No
          ElementPosition     #2130706430
          HierarchyParent     #Tab
          Caption             #@SYS10575
          DataSource          #LedgerJournalTable
          Columns             #Auto
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #M_I005TabNotes
          ElementPosition     #2139095038
          HierarchyParent     #Tab
          Caption             #@SYS40182
          DataSource          #LedgerJournalTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Overview
          ElementPosition     #805306366
          HierarchyParent     #Tab
          Caption             #@SYS9039
          DataSource          #LedgerJournalTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Setup
          ElementPosition     #1610612732
          HierarchyParent     #Tab
          Caption             #@SYS2186
          DataSource          #LedgerJournalTable
          Columns             #Auto
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabBillOfExchange
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #2080374782
          HierarchyParent     #Tab
          Caption             #@SYS69795
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabFinancialDimensions
          AutoDeclaration     #Yes
          ElementPosition     #2105540606
          HierarchyParent     #Tab
          Caption             #@SYS138491
          DataSource          #LedgerJournalTable
          HideIfEmpty         #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #pageActivated
            #public void pageActivated()
            #{
            #    dimensionDefaultingController.pageActivated();
            #
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #Advanced_CN
          AutoDeclaration     #Yes
          Visible             #No
          CountryRegionCodes  #CN
          HelpText            #@GLS54506
          ElementPosition     #2139095038
          HierarchyParent     #ButtonGroup
          Text                #@SYS23466
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #public void clicked()
            #{
            #    super();
            #    isSimpleMethod = NoYes::No;
            #    simpleMethod_CN.visible(true);
            #    advanced_CN.visible(false);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #Approve
          AutoDeclaration     #Yes
          HelpText            #@SYS22218
          ElementPosition     #1288490187
          HierarchyParent     #Course
          Text                #@SYS16449
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    Args    args;
            #
            #    super();
            #
            #    if (LedgerParameters::isJournalApproval_CN()
            #        && journalFormTable.journalTypeId() == LedgerJournalType::Daily)
            #    {
            #        args = new Args();
            #        args.caller(element);
            #        args.record(ledgerJournalTable);
            #        new MenuFunction(menuitemDisplayStr(LedgerJournalApproval_CN), MenuItemType::Display).run(args);
            #
            #        ledgerJournalTable_ds.executeQuery();
            #    }
            #    else
            #    {
            #        ledgerJournalTable.markApproved();
            #        ledgerJournalTable.update();
            #
            #        if (enableLedgerJournalTable_W)
            #        {
            #            // Resync child table that was updated in the mark call above
            #            ledgerJournalTable_W.update();
            #            ledgerJournalTable_W_ds.reread();
            #            ledgerJournalTable_W_ds.refresh();
            #        }
            #    }
            #
            #    ledgerJournalTable_ds.reread();
            #    ledgerJournalTable_ds.refresh();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #PrintTaxInvoice
          AutoDeclaration     #Yes
          CountryRegionCodes  #TH,MX
          HelpText            #@SYS115514
          ElementPosition     #1879048185
          HierarchyParent     #PrintMenu
          Text                #@SYS115505
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    ;
            #    TaxUnrealizedPayment::printFromLedgerJournalTable(ledgerJournalTable);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #Reject
          AutoDeclaration     #Yes
          HelpText            #@SYS22330
          ElementPosition     #1717986916
          HierarchyParent     #Course
          Text                #@SYS22331
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #
            #    ledgerJournalTable.markRejected();
            #
            #    ledgerJournalTable.update();
            #
            #    if (enableLedgerJournalTable_W)
            #    {
            #        // Resync child table that was updated in the mark call above
            #        ledgerJournalTable_W.update();
            #        ledgerJournalTable_W_ds.reread();
            #        ledgerJournalTable_W_ds.refresh();
            #    }
            #
            #    ledgerJournalTable_ds.reread();
            #    ledgerJournalTable_ds.refresh();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ReportAsReady
          AutoDeclaration     #Yes
          HelpText            #@SYS22219
          ElementPosition     #858993458
          HierarchyParent     #Course
          Text                #@SYS22220
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    LedgerJournalCheckPost  ledgerJournalCheckPost;
            #    LedgerJournalTable      ledgerJournalTableCopy;
            #    boolean                 enabledJournalApproval_CN;
            #
            #    super();
            #
            #    enabledJournalApproval_CN = LedgerParameters::isJournalApproval_CN();
            #
            #    if (enabledJournalApproval_CN
            #        && journalFormTable.journalTypeId() == LedgerJournalType::Daily)
            #    {
            #        ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(ledgerJournalTable, NoYes::No);
            #        if (!ledgerJournalCheckPost.checkJournalReady_CN())
            #        {
            #            warning("@GLS54545");
            #            return;
            #        }
            #
            #        ttsbegin;
            #
            #        select firstonly forupdate ledgerJournalTableCopy
            #            where ledgerJournalTableCopy.JournalNum == ledgerJournalTable.JournalNum;
            #
            #        ledgerJournalTableCopy.markReportAsReady();
            #        ledgerJournalTableCopy.update();
            #        ledgerJournalTable.markReportAsReady();
            #
            #        ttscommit;
            #
            #        if (enableLedgerJournalTable_W)
            #        {
            #            // Resync the child table as it was updated indirectly by the above commit
            #            ledgerJournalTable_W_ds.reread();
            #            ledgerJournalTable_W_ds.refresh();
            #        }
            #    }
            #    else
            #    {
            #    ledgerJournalTable.markReportAsReady();
            #    ledgerJournalTable.update();
            #
            #        if (enableLedgerJournalTable_W)
            #        {
            #            // Resync child table that was updated in the mark call above
            #            ledgerJournalTable_W.update();
            #            ledgerJournalTable_W_ds.reread();
            #            ledgerJournalTable_W_ds.refresh();
            #        }
            #    }
            #
            #
            #    if (enabledJournalApproval_CN
            #        && journalFormTable.journalTypeId()  == LedgerJournalType::Daily
            #        && ledgerJournalTable_W.ApprovalStatus_CN == LedgerApprovalStatus_CN::Ready)
            #    {
            #        info("@GLS54527");
            #    }
            #
            #    ledgerJournalTable_ds.reread();
            #    ledgerJournalTable_ds.refresh();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #SimpleMethod_CN
          AutoDeclaration     #Yes
          Visible             #No
          CountryRegionCodes  #CN
          HelpText            #@GLS54507
          ElementPosition     #2134900734
          HierarchyParent     #ButtonGroup
          Text                #@SYS24899
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #public void clicked()
            #{
            #    super();
            #    isSimpleMethod = NoYes::Yes;
            #    simpleMethod_CN.visible(false);
            #    advanced_CN.visible(true);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #ErrorLog
          AllowEdit           #No
          HelpText            #@SYS1243
          ElementPosition     #1366580502
          HierarchyParent     #GridOverview
          BackgroundColor     #Window background
          Label               #@SYS2515
          DataSource          #LedgerJournalTable
          DataMethod          #Logged
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #EUROTriangulation
          ElementPosition     #1227133512
          HierarchyParent     #Currency
          DataSource          #LedgerJournalTable
          DataField           #EUROTriangulation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #FixedExchRate
          ElementPosition     #920350134
          HierarchyParent     #Currency
          DataSource          #LedgerJournalTable
          DataField           #FixedExchRate
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #IsUserPrivate
          AutoDeclaration     #Yes
          HelpText            #@SYS22217
          ElementPosition     #1610612733
          HierarchyParent     #PrivateBlock
          Label               #@SYS3324
          DataSource          #LedgerJournalTable
          DataMethod          #IsUserPrivate
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    ;
            #    super();
            #
            #    ledgerJournalTable_ds.refresh();
            #}
          ENDSOURCE
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #
            #    journalFormTable.designModifiedMarkUserBlockPost();
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #LedgerJournalTable_FixedOffsetAccount
          Visible             #No
          ElementPosition     #1717986916
          HierarchyParent     #OffsetAccountGroup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #LedgerJournalTable_Posted
          ElementPosition     #1171354716
          HierarchyParent     #GridOverview
          BackgroundColor     #Window background
          DataSource          #LedgerJournalTable
          DataField           #Posted
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #LedgerJournalTable_Posted_2
          ElementPosition     #1227133512
          HierarchyParent     #History
          DataSource          #LedgerJournalTable
          DataField           #Posted
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #LedgerJournalTable_RemoveLineAfterPosting
          ElementPosition     #1431655764
          HierarchyParent     #Posting
          DataSource          #LedgerJournalTable
          DataField           #RemoveLineAfterPosting
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #LedgerJournalTable_ReverseEntry
          AutoDeclaration     #Yes
          ElementPosition     #1757032074
          HierarchyParent     #GridOverview
          BackgroundColor     #Window background
          DataSource          #LedgerJournalTable
          DataField           #ReverseEntry
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #MarkInUseBlock
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #PrivateBlock
          DataSource          #LedgerJournalTable
          DataMethod          #InUseBlock
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #ProtestSettledBill
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #GroupProtestNegInst
          Label               #@SYS73750
          DataSource          #LedgerJournalTable
          DataField           #ProtestSettledBill
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #public void clicked()
            #{
            #    super();
            #
            #    element.enableFieldsActive();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #Reverse_RU
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #2049870753
          HierarchyParent     #GridOverview
          BackgroundColor     #Window background
          DataSource          #LedgerJournalTable_W
          DataField           #Reverse_RU
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #ReversingEntry_ReverseEntry
          ElementPosition     #1073741822
          HierarchyParent     #GroupReversingEntry
          DataSource          #LedgerJournalTable
          DataField           #ReverseEntry
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #ShowUserCreatedOnly
          AutoDeclaration     #Yes
          HelpText            #@SYS113947
          ElementPosition     #1610612733
          HierarchyParent     #TopFields
          Label               #@SYS113946
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #/// <summary>
            #/// Updates the form data selection criteria when the check box is clicked.
            #/// </summary>
            #public void clicked()
            #{
            #    super();
            #
            #    journalFormTable.designSelectionChangeShowUserCreateOnly();
            #}
            #
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #SystemBlocked
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #Blocked
          DataSource          #LedgerJournalTable
          DataField           #SystemBlocked
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #AllOpenPostedField
          AutoDeclaration     #Yes
          HelpText            #@SYS27095
          ElementPosition     #1073741822
          HierarchyParent     #TopFields
          Selection           #255
          EnumType            #AllOpenPosted
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #
            #    journalFormTable.designSelectionChangeAllOpenPosted();
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #Approvalprocedure_ApprovalStatus_CN
          ElementPosition     #894784852
          HierarchyParent     #Approvalprocedure
          DataSource          #LedgerJournalTable_W
          DataField           #ApprovalStatus_CN
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #Approvalprocedure_WorkflowApprovalStatus
          ElementPosition     #1789569705
          HierarchyParent     #Approvalprocedure
          DataSource          #LedgerJournalTable
          DataField           #WorkflowApprovalStatus
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #GroupBillOfExchange_BankRemittanceType
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #BillOfExchange
          HideFirstEntry      #Yes
          DataSource          #LedgerJournalTable
          DataField           #BankRemittanceType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #JournalTypeGrid
          AutoDeclaration     #Yes
          ElementPosition     #976128930
          HierarchyParent     #GridOverview
          DataSource          #LedgerJournalTable
          DataField           #JournalType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #LedgerJournalTable_ApprovalStatus_CN
          AutoDeclaration     #Yes
          ElementPosition     #1854644967
          HierarchyParent     #GridOverview
          DataSource          #LedgerJournalTable_W
          DataField           #ApprovalStatus_CN
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #LedgerJournalTable_CurrentOperationsTax
          Skip                #Yes
          ElementPosition     #715827882
          HierarchyParent     #Posting
          DataSource          #LedgerJournalTable
          DataField           #CurrentOperationsTax
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #LedgerJournalTable_CustVendNegInstProtestProcess
          ElementPosition     #1610612733
          HierarchyParent     #GroupProtestNegInst
          DataSource          #LedgerJournalTable
          DataField           #CustVendNegInstProtestProcess
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #LedgerJournalTable_DetailSummaryPosting
          ElementPosition     #1073741823
          HierarchyParent     #Posting
          DataSource          #LedgerJournalTable
          DataField           #DetailSummaryPosting
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #LedgerJournalTable_JournalType
          AllowEdit           #No
          Skip                #Yes
          ElementPosition     #1288490187
          HierarchyParent     #Journal
          Selection           #255
          DataSource          #LedgerJournalTable
          DataField           #JournalType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #OffsetAccountType
          ElementPosition     #858993458
          HierarchyParent     #OffsetAccountGroup
          DataSource          #LedgerJournalTable
          DataField           #OffsetAccountType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #ReverseType_RU
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #835810395
          HierarchyParent     #GridOverview
          DataSource          #LedgerJournalTable_W
          DataField           #ReverseType_RU
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #SalesTax_TaxObligationCompany
          AutoDeclaration     #Yes
          ElementPosition     #1610612733
          HierarchyParent     #SalesTax
          DataSource          #LedgerJournalTable
          DataField           #TaxObligationCompany
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #DeleteButton
          AutoDeclaration     #Yes
          ElementPosition     #1610612734
          HierarchyParent     #NewDeleteGroup
          Text                #@sys14425
          ButtonDisplay       #Text & Image left
          NormalImage         #10121
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          Primary             #Yes
          NeedsRecord         #Yes
          Command             #2832
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #NewButton
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #NewDeleteGroup
          ButtonDisplay       #Text & Image left
          NormalImage         #11045
          ImageLocation       #EmbeddedResource
          Primary             #Yes
          Command             #260
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL DATEEDIT
        PROPERTIES
          Name                #LedgerJournalTable_M_I004PostingDate
          ElementPosition     #683290251
          HierarchyParent     #GridOverview
          DataSource          #LedgerJournalTable
          DataField           #M_I004PostingDate
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL DATEEDIT
        PROPERTIES
          Name                #LedgerJournalTable_ReverseDate
          AutoDeclaration     #Yes
          ElementPosition     #1952257860
          HierarchyParent     #GridOverview
          DataSource          #LedgerJournalTable
          DataField           #ReverseDate
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL DATEEDIT
        PROPERTIES
          Name                #PeriodControl_RU
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #488064465
          HierarchyParent     #GridOverview
          DataSource          #LedgerJournalTable_W
          DataField           #ReportPeriod_RU
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL DATEEDIT
        PROPERTIES
          Name                #ReversingEntry_ReverseDate
          ElementPosition     #1610612733
          HierarchyParent     #GroupReversingEntry
          DataSource          #LedgerJournalTable
          DataField           #ReverseDate
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #LedgerJournalTable_LinesLimitBeforeDistribution
          ElementPosition     #1789569705
          HierarchyParent     #Posting
          DataSource          #LedgerJournalTable
          DataField           #LinesLimitBeforeDistribution
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #RTax25Version
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #561274134
          HierarchyParent     #GridOverview
          DataSource          #LedgerJournalTable_W
          DataField           #RTax25RegVersion
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #CashReport
          AutoDeclaration     #Yes
          ElementPosition     #1073741820
          HierarchyParent     #PrintMenu
          ShowShortCut        #No
          DataSource          #LedgerJournalTable
          MenuItemType        #Output
          MenuItemName        #LedgerJournalCashReport
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #CheckJournal
          AutoDeclaration     #Yes
          ElementPosition     #1193046470
          HierarchyParent     #ButtonGroup
          ButtonDisplay       #Text & Image left
          NormalImage         #11340
          ImageLocation       #EmbeddedResource
          DataSource          #LedgerJournalTable
          MenuItemType        #Action
          MenuItemName        #LedgerJourChk
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #/// <summary>
            #/// Handles the button's clicked event.
            #/// </summary>
            #/// <remarks>
            #/// The form's UI state is refreshed on this event so that the correct control states are shown for the
            #/// posted journal.
            #/// </remarks>
            #void clicked()
            #{
            #    //  Cast the journalFormTable to a LedgerJournalFormTable.
            #    LedgerJournalFormTable ledgerJournalFormTable = journalFormTable;
            #    ;
            #
            #    //  Check if multi-selection posting.
            #    if (ledgerJournalTable_ds.anyMarked() &&
            #       ledgerJournalFormTable.isMultiSelection())
            #    {
            #        ledgerJournalFormTable.multiSelectValidate();
            #    }
            #    else
            #    {
            #        super();
            #    }
            #    ledgerJournalTable_ds.reread();
            #
            #    if (LedgerParameters::isJournalApproval_CN()
            #        && journalFormTable.journalTypeId() == LedgerJournalType::Daily)
            #    {
            #        element.enableButtonsActive();
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #CustPaymEntryButton
          AutoDeclaration     #Yes
          ElementPosition     #477218588
          HierarchyParent     #ButtonGroup
          DataSource          #LedgerJournalTable
          MenuItemName        #CustPaymEntry
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #JournalDetails
          ElementPosition     #536870910
          HierarchyParent     #PrintMenu
          Text                #@SYS24010
          ShowShortCut        #No
          DataSource          #LedgerJournalTable
          MenuItemType        #Output
          MenuItemName        #LedgerJournal
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #JournalLines
          AutoDeclaration     #Yes
          ElementPosition     #715827882
          HierarchyParent     #ButtonGroup
          Text                #@SYS15451
          ButtonDisplay       #Text & Image left
          NormalImage         #10632
          ImageLocation       #EmbeddedResource
          DataSource          #LedgerJournalTable
          MenuItemName        #LedgerJournalTransDaily
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #/// <summary>
            #/// Handles the clicked event of the lines button.
            #/// </summary>
            #/// <remarks>
            #/// The line button is used for all system states except for the workflow approvals "approved"
            #/// state. That state displays the JournalLines_WorkflowApproved button instead.
            #/// This method controls processing payments for approved journals on the LedgerJournalFormTable
            #/// class since the journal is not approved if this button was clicked.
            #/// </remarks>
            #public void clicked()
            #
            #{
            #    ;
            #
            #    if (LedgerParameters::isChineseVoucher_CN()
            #        && journalFormTable.journalTypeId() == LedgerJournalType::Daily)
            #    {
            #        if (isSimpleMethod
            #            && !LedgerJournalTable::isSimpleMethod_CN(ledgerJournalTable.JournalNum))
            #        {
            #            // This journal was created using the advanced method and cannot be edited with the simple method
            #            throw error("@GLS54504");
            #        }
            #
            #        if (isSimpleMethod
            #            && !LedgerJournalTrans::existJournalNum_CN(ledgerJournalTable.JournalNum))
            #        {
            #            // The journal cannot be edited because it has no line. Please use the advanced method
            #            throw error("@GLS54498");
            #        }
            #    }
            #
            #    journalFormTable.parmIsProcessingPaymentOnApprovedJounal(false);
            #
            #    super();
            #
            #    ledgerJournalTable_ds.reread();
            #}
            #
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #JournalLines_Edit
          AutoDeclaration     #Yes
          HelpText            #@SYS109639
          ElementPosition     #1288490187
          HierarchyParent     #JournalLines_WorkflowApproved
          Text                #@SYS453
          DataSource          #LedgerJournalTable
          MenuItemName        #LedgerJournalTransDaily
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #/// <summary>
            #/// Handles the clicked event of the edit item of the line button.
            #/// </summary>
            #/// <remarks>
            #/// This method prompts the user to check that it is okay to place
            #/// the journal back into a "not submitted" state. Also performs a table update.
            #/// </remarks>
            #public void clicked()
            #{
            #    ;
            #
            #    if (Box::okCancel("@SYS109636", DialogButton::Ok) == DialogButton::Ok)
            #    {
            #        // Set the ledgerJournalTable.WorkflowApprovalStatus
            #        ledgerJournalTable.initWFApprovalStatus(ledgerJournalTable.ledgerJournalName(), true);
            #
            #        // Update the record.
            #        ledgerJournalTable_ds.write();
            #    }
            #    else
            #    {
            #        return;
            #    }
            #
            #    super();
            #
            #    ledgerJournalTable_ds.reread();
            #
            #    element.showProperJournalLinesButton();
            #
            #    if (ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::None ||
            #        ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::NotSubmitted)
            #    {
            #        // Workflow status change requires refresh of workflow controls.
            #        element.updateWorkflowControls();
            #    }
            #}
            #
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #JournalLines_GeneratePayments
          AutoDeclaration     #Yes
          HelpText            #@SYS109640
          ElementPosition     #1717986916
          HierarchyParent     #JournalLines_WorkflowApproved
          Text                #@SYS24287
          DataSource          #LedgerJournalTable
          MenuItemName        #LedgerJournalTransDaily
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #/// <summary>
            #/// Handles the Lines->Generate Payments button's clicked event.
            #/// </summary>
            #public void clicked()
            #{
            #    ;
            #
            #    journalFormTable.parmIsProcessingPaymentOnApprovedJounal(true);
            #    journalFormTable.parmIsWFApprovedModeSelected(true);
            #
            #    super();
            #
            #    ledgerJournalTable_ds.reread();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #JournalLines_Review
          AutoDeclaration     #Yes
          HelpText            #@SYS109638
          ElementPosition     #858993458
          HierarchyParent     #JournalLines_WorkflowApproved
          Text                #@SYS60543
          DataSource          #LedgerJournalTable
          MenuItemName        #LedgerJournalTransDaily
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #/// <summary>
            #/// Handles the Lines->Review button's clicked event.
            #/// </summary>
            #public void clicked()
            #{
            #    ;
            #
            #    journalFormTable.parmIsProcessingPaymentOnApprovedJounal(false);
            #    journalFormTable.parmIsWFApprovedModeSelected(true);
            #
            #    super();
            #
            #    ledgerJournalTable_ds.reread();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #LedgerJournalCreate_RU
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #JournalCreate_RU
          DataSource          #LedgerJournalTable
          MenuItemType        #Action
          MenuItemName        #LedgerJournalCreate_RU
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    element.changeAllOpenPosted_RU(AllOpenPosted::Open);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #LedgerJournalCreateStorno_RU
          AutoDeclaration     #Yes
          ElementPosition     #1610612733
          HierarchyParent     #JournalCreate_RU
          DataSource          #LedgerJournalTable
          MenuItemType        #Action
          MenuItemName        #LedgerJournalCreateStorno_RU
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    element.changeAllOpenPosted_RU(AllOpenPosted::Posted);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #LedgerJournalPostTransfer
          AutoDeclaration     #Yes
          ElementPosition     #1288490187
          HierarchyParent     #PostJournal
          DataSource          #LedgerJournalTable
          MenuItemType        #Action
          MenuItemName        #LedgerJourPostTr
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #/// <summary>
            #/// Handles the clicked event of the button.
            #/// </summary>
            #/// <remarks>
            #/// The form is refreshed on this event so the correct control states are shown for the posted
            #/// journal.
            #/// </remarks>
            #void clicked()
            #{
            #    //  Cast the journalFormTable to a LedgerJournalFormTable.
            #    LedgerJournalFormTable ledgerJournalFormTable = journalFormTable;
            #    boolean multiSelected;
            #    ;
            #
            #    //  Check if multi-selection posting.
            #    if (ledgerJournalTable_ds.anyMarked() &&
            #       ledgerJournalFormTable.isMultiSelection())
            #    {
            #        ledgerJournalFormTable.multiSelectPost(true);
            #        multiSelected = true;
            #    }
            #    else
            #    {
            #        super();
            #    }
            #    //
            #    // For multi selection cases we redraw the window to remove posted journals.
            #    // A first is done to set focus so the form is set to the proper state.
            #    //
            #    if (multiSelected)
            #    {
            #        ledgerJournalTable_ds.research();
            #        ledgerJournalTable_ds.first();
            #        ledgerJournalTable_ds.mark(1);
            #        gridOverview.setFocus();
            #    }
            #    //
            #    // Re-read the record and then re-perform button initialization
            #    // so that the correct lines button is shown and that all of the
            #    // buttons are in their correct enabled state.
            #    //
            #    else
            #    {
            #        ledgerJournalTable_DS.reread();
            #        ledgerJournalTable_DS.active();
            #    }
            #
            #    if (LedgerParameters::isChineseVoucher_CN()
            #        && journalFormTable.journalTypeId() == LedgerJournalType::Daily)
            #    {
            #        ledgerJournalTable_DS.reread();
            #        ledgerJournalTable_DS.active();
            #    }
            #}
            #
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #LedgerJournalPreview
          AutoDeclaration     #Yes
          ElementPosition     #2013265915
          HierarchyParent     #PrintMenu
          MenuItemType        #Output
          MenuItemName        #LedgerJournalPreview
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #LedgerTransPerJournal
          ElementPosition     #1342177275
          HierarchyParent     #PrintMenu
          MenuItemType        #Output
          MenuItemName        #LedgerTransPerJournal
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #LedgerTransPreview_RU
          ElementPosition     #1717986916
          HierarchyParent     #PostJournal
          MenuItemName        #LedgerTransPreview_RU
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #Movements
          ElementPosition     #805306365
          HierarchyParent     #PrintMenu
          ShowShortCut        #No
          DataSource          #LedgerJournalTable
          MenuItemType        #Output
          MenuItemName        #LedgerJournalAccountMovement
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #Post
          AutoDeclaration     #Yes
          ElementPosition     #858993458
          HierarchyParent     #PostJournal
          DataSource          #LedgerJournalTable
          MenuItemType        #Action
          MenuItemName        #LedgerJourPost
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #/// <summary>
            #/// Handles the clicked event of the button.
            #/// </summary>
            #/// <remarks>
            #/// The form is refreshed on this event so that the correct control states are shown for the
            #/// posted journal.
            #/// </remarks>
            #void clicked()
            #{
            #    //  Cast the journalFormTable to a LedgerJournalFormTable.
            #    LedgerJournalFormTable ledgerJournalFormTable = journalFormTable;
            #    boolean multiSelected;
            #    ;
            #
            #    //  Check if multi-selection posting.
            #    if (ledgerJournalTable_ds.anyMarked() &&
            #       ledgerJournalFormTable.isMultiSelection())
            #    {
            #        ledgerJournalFormTable.multiSelectPost();
            #        multiSelected = true;
            #    }
            #    else
            #    {
            #        super();
            #    }
            #
            #    //
            #    // For multi selection cases we redraw the window to remove posted journals.
            #    // A first is done to set focus so the form is set to the proper state.
            #    //
            #    if (multiSelected)
            #    {
            #        ledgerJournalTable_ds.research();
            #        ledgerJournalTable_ds.first();
            #        ledgerJournalTable_ds.mark(1);
            #        gridOverview.setFocus();
            #    }
            #    //
            #    // Re-read the record and then re-perform button initialization
            #    // so that the correct lines button is shown and that all of the
            #    // buttons are in their correct enabled state.
            #    //
            #    else
            #    {
            #        ledgerJournalTable_DS.reread();
            #        ledgerJournalTable_DS.active();
            #    }
            #
            #    if (LedgerParameters::isChineseVoucher_CN()
            #        && journalFormTable.journalTypeId() == LedgerJournalType::Daily)
            #    {
            #        ledgerJournalTable_DS.active();
            #    }
            #}
            #
            #
            #
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RAssetReportMB4
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #671088637
          HierarchyParent     #PrintMenu
          MenuItemType        #Action
          MenuItemName        #RAssetReportMB4
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RAssetReportMB8
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #939524092
          HierarchyParent     #PrintMenu
          MenuItemType        #Action
          MenuItemName        #RAssetReportMB8
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SADFinanceTable_PL
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #2145386494
          HierarchyParent     #ButtonGroup
          MultiSelect         #No
          NeedsRecord         #Yes
          DataSource          #LedgerJournalTable
          MenuItemName        #PlSADFinanceTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #WithholdingTaxSlip
          Visible             #No
          HelpText            #@SYS317663
          ElementPosition     #1610612730
          HierarchyParent     #PrintMenu
          MenuItemType        #Output
          MenuItemName        #TaxWithholdSlip_TH
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #editExchRate
          AutoDeclaration     #Yes
          HelpText            #@SYS324259
          ElementPosition     #1533916890
          HierarchyParent     #Currency
          DataSource          #LedgerJournalTable
          DataMethod          #editExchRate
          MinNoOfDecimals     #4
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #editExchRateSecond
          AutoDeclaration     #Yes
          HelpText            #@SYS324259
          ElementPosition     #1840700268
          HierarchyParent     #Currency
          DataSource          #LedgerJournalTable
          DataMethod          #editExchRateSecond
          MinNoOfDecimals     #4
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL SEGMENTEDENTRY
        PROPERTIES
          Name                #OffsetAccount
          AutoDeclaration     #Yes
          ElementPosition     #1288490187
          HierarchyParent     #OffsetAccountGroup
          DataSource          #LedgerJournalTable
          ReferenceField      #OffsetLedgerDimension
        ENDPROPERTIES
        
        METHODS
          SOURCE #jumpRef
            #public void jumpRef()
            #{
            #    dimOffsetAccountController.jumpRef();
            #}
          ENDSOURCE
          SOURCE #loadAutoCompleteData
            #public void loadAutoCompleteData(LoadAutoCompleteDataEventArgs _e)
            #{
            #    super(_e);
            #
            #    dimOffsetAccountController.loadAutoCompleteData(_e);
            #}
          ENDSOURCE
          SOURCE #loadSegments
            #public void loadSegments()
            #{
            #    super();
            #
            #    dimOffsetAccountController.parmControl(this);
            #    dimOffsetAccountController.loadSegments();
            #
            #    // Lock the main account segment if "Fixed offset account" is selected in Journal Names
            #    if (ledgerJournalTable.OffsetAccountType == LedgerJournalACType::Ledger)
            #    {
            #        dimOffsetAccountController.parmLockMainAccountSegment(ledgerJournalTable.FixedOffsetAccount);
            #    }
            #}
          ENDSOURCE
          SOURCE #lookup
            #public void lookup()
            #{
            #    switch (ledgerJournalTable.OffsetAccountType)
            #    {
            #        case LedgerJournalACType::Bank:
            #            BankAccountTable::lookupBankAccount(this);
            #            break;
            #        case LedgerJournalACType::Cust:
            #            CustTable::lookupCustomer(this);
            #            break;
            #        case LedgerJournalACType::FixedAssets:
            #            AssetTable::lookupAccountNum(this);
            #            break;
            #        case LedgerJournalACType::Project:
            #            ProjTable::lookupProjId(this, ledgerJournalTable);
            #            break;
            #        case LedgerJournalACType::Vend:
            #            VendTable::lookupVendor(this);
            #            break;
            #        case LedgerJournalACType::FixedAssets_RU:
            #            RAssetTable::lookupAccountNum(this);
            #            break;
            #        case LedgerJournalACType::RDeferrals:
            #            RDeferralsTable::lookupDeferrals(this, dateMax());
            #            break;
            #        case LedgerJournalACType::RCash:
            #            RCashTable::lookupAccountNum(this);
            #            break;
            #        case LedgerJournalACType::Employee_RU:
            #            EmployeeTable_RU::lookupAdvHolder(this);
            #            break;
            #        default:
            #            super();
            #            break;
            #    }
            #}
          ENDSOURCE
          SOURCE #segmentValueChanged
            #public void segmentValueChanged(SegmentValueChangedEventArgs _e)
            #{
            #    super(_e);
            #
            #    dimOffsetAccountController.segmentValueChanged(_e);
            #}
          ENDSOURCE
          SOURCE #validate
            #public boolean validate()
            #{
            #    boolean isValid;
            #
            #    isValid = super();
            #    isValid = dimOffsetAccountController.validate() && isValid;
            #
            #    return isValid;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #CurrencyCode
          ElementPosition     #613566756
          HierarchyParent     #Currency
          DataSource          #LedgerJournalTable
          DataField           #CurrencyCode
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #editTaxType
          ElementPosition     #1610612733
          HierarchyParent     #FiscalInformation_BR
          LookupButton        #Always
          Label               #@GLS205
          DataSource          #LedgerJournalTable_W
          DataMethod          #editTaxType
        ENDPROPERTIES
        
        METHODS
          SOURCE #lookup
            #public void lookup()
            #{
            #    TaxTable::lookupTaxTypeStr(this, FBTaxAssessment_BR::adjustableTaxes());
            #}
          ENDSOURCE
          SOURCE #validate
            #public boolean validate()
            #{
            #    boolean ret;
            #    TaxType_BR taxType;
            #
            #    ret = super();
            #
            #    taxType = str2enum(taxType, this.text());
            #
            #    if (conFind(FBTaxAssessment_BR::adjustableTaxes(), taxType) == 0)
            #    {
            #        ret = checkFailed("@SYS119633");
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #GroupBillOfExchange_BankAccountId
          ElementPosition     #1610612733
          HierarchyParent     #BillOfExchange
          DataSource          #LedgerJournalTable
          DataField           #BankAccountId
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #    ;
            #
            #    ret = super();
            #
            #    if (ledgerJournalTable.JournalType == LedgerJournalType::CustPaymRemittance)
            #    {
            #        if(ledgerJournalTable.BankAccountId)
            #        {
            #            journalLines.enabled(true);
            #        }
            #        else
            #        {
            #            journalLines.enabled(false);
            #        }
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #GroupPromissorynote_BankAccountId
          AutoDeclaration     #Yes
          ElementPosition     #1431655764
          HierarchyParent     #Promissorynote
          DataSource          #LedgerJournalTable
          DataField           #BankAccountId
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #    ;
            #
            #    ret = super();
            #
            #    if (ledgerJournalTable.JournalType == LedgerJournalType::VendPaymRemittance)
            #    {
            #        if(ledgerJournalTable.BankAccountId)
            #        {
            #            journalLines.enabled(true);
            #        }
            #        else
            #        {
            #            journalLines.enabled(false);
            #        }
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #InUseUserId
          AllowEdit           #No
          ElementPosition     #1073741822
          HierarchyParent     #User
          DataSource          #LedgerJournalTable
          DataMethod          #InUseUserId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #JournalName
          AutoDeclaration     #Yes
          ElementPosition     #390451572
          HierarchyParent     #GridOverview
          DataSource          #LedgerJournalTable
          DataField           #JournalName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #JournalNum
          AutoDeclaration     #Yes
          AllowEdit           #No
          Skip                #Yes
          ElementPosition     #1431655764
          HierarchyParent     #Identification
          DataSource          #LedgerJournalTable
          DataField           #JournalNum
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #LedgerJournalTable_DocumentNum
          ElementPosition     #1431655764
          HierarchyParent     #DocumentNum
          DataSource          #LedgerJournalTable
          DataField           #DocumentNum
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #LedgerJournalTable_GroupBlockId
          ElementPosition     #1610612733
          HierarchyParent     #Blocked
          DataSource          #LedgerJournalTable
          DataField           #GroupBlockId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #LedgerJournalTable_JournalName
          Skip                #Yes
          ElementPosition     #858993458
          HierarchyParent     #Journal
          DataSource          #LedgerJournalTable
          DataField           #JournalName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #LedgerJournalTable_JournalNum
          AutoDeclaration     #Yes
          AllowEdit           #No
          Skip                #Yes
          ElementPosition     #585677358
          HierarchyParent     #GridOverview
          DataSource          #LedgerJournalTable
          DataField           #JournalNum
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #LedgerJournalTable_Log
          AllowEdit           #No
          Width               #Column width
          ElementPosition     #1840700268
          HierarchyParent     #History
          MultiLine           #Yes
          DataSource          #LedgerJournalTable
          DataField           #Log
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #LedgerJournalTable_Name
          ElementPosition     #780903144
          HierarchyParent     #GridOverview
          DataSource          #LedgerJournalTable
          DataField           #Name
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #LedgerJournalTable_Name_2
          ElementPosition     #1717986916
          HierarchyParent     #Journal
          DataSource          #LedgerJournalTable
          DataField           #Name
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #M_I004displayVoucher
          ElementPosition     #890717647
          HierarchyParent     #GridOverview
          DataSource          #LedgerJournalTable
          DataMethod          #M_I004displayVoucher
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #RejectedBy
          ElementPosition     #1431655764
          HierarchyParent     #Approvalprocedure
          Label               #@sys22205
          DataSource          #LedgerJournalTable
          DataField           #RejectedBy
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #ReportedAsReadyBy
          ElementPosition     #715827882
          HierarchyParent     #Approvalprocedure
          DataSource          #LedgerJournalTable
          DataField           #ReportedAsReadyBy
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #UserBlockIdName
          AllowEdit           #No
          Skip                #Yes
          ElementPosition     #1610612733
          HierarchyParent     #User
          DataSource          #LedgerJournalTable
          DataMethod          #UserBlockIdName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL UTCDATETIMEEDIT
        PROPERTIES
          Name                #LedgerJournalTable_PostedDateTime
          ElementPosition     #1533916890
          HierarchyParent     #History
          DataSource          #LedgerJournalTable
          DataField           #PostedDateTime
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL WINDOW
        PROPERTIES
          Name                #BlockImage
          AutoDeclaration     #Yes
          AllowEdit           #No
          Width               #18
          Height              #12
          AlignControl        #No
          HelpText            #@SYS62410
          ElementPosition     #1561806288
          HierarchyParent     #GridOverview
          Imagemode           #Size to fit
          BackStyle           #Transparent
          Label               #@SYS10653
          DataSource          #LedgerJournalTable
          DataMethod          #LockImage
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: CLS

; Microsoft Dynamics AX Class: SysSetupFormRun unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSetupFormRun
    PROPERTIES
      Name                #SysSetupFormRun
      Extends             #FormRun
      RunOn               #Client
      Origin              #{2D0F0283-0000-1000-B5DF-784DC362FB4F}
      LegacyId            #643
    ENDPROPERTIES
    
    METHODS
      SOURCE #addAboutButton
        #private void addAboutButton()
        #{
        #    FormActionPaneControl actionPane;
        #    FormActionPaneTabControl actionPaneTab;
        #    FormCommandButtonControl cmdAbout;
        #    FormButtonGroupControl btngrp;
        #    #define.taskAbout(259)
        #
        #    actionPane = this.design().controlNum(1);
        #    if(!actionPane || !(actionPane is FormActionPaneControl) ||
        #    actionPane.style() == ActionPaneStyle::Strip)
        #    {
        #        return;
        #    }
        #
        #    actionPaneTab = actionPane.controlNum(1);
        #    if(!actionPaneTab ||
        #       !(actionPaneTab is FormActionPaneTabControl))
        #    {
        #        return;
        #    }
        #
        #    btngrp = actionPaneTab.addControl(FormControlType::ButtonGroup,"ButtonGroup");
        #    btngrp.caption("About");
        #
        #    cmdAbout = btngrp.addControl(FormControlType::CommandButton, "About");
        #    cmdAbout.command(#taskAbout);
        #    cmdAbout.imageLocation(SysImageLocation::EmbeddedResource);
        #    cmdAbout.normalImage("412");
        #    cmdAbout.big(NoYes::Yes);
        #    cmdAbout.saveRecord(NoYes::No);
        #
        #
        #
        #}
        #
        #
      ENDSOURCE
      SOURCE #caller_RU
        #/// <summary>
        #/// Inventory Reports
        #/// Find RunbaseDialog class on child forms (or something else).
        #/// </summary>
        #/// <returns>
        #/// Caller object for the current SysFormRun
        #/// </returns>
        #/// <remarks>
        #/// See \Classes\InventJournalPrintForm_RU\main method.
        #/// </remarks>
        #public Object caller_RU()
        #{
        #    Object      object;
        #
        #    if (this.args())
        #    {
        #        object = this.args().caller();
        #    }
        #
        #    return object;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #public class SysSetupFormRun extends FormRun
        #{
        #    SysWorkflowFormControls     workflowControls;
        #    // <GEERU>
        #    // Event listeners list
        #    List listeners_W;
        #    // </GEERU>
        #
        ##if.never
        #    #define.CurrentVersion(1)
        #    #localmacro.CurrentList
        #    #endmacro
        ##endif
        #}
      ENDSOURCE
      SOURCE #docCursor
        #Common docCursor()
        #{
        #    if (infolog.docuHandlingActive())
        #    {
        #        return super();
        #    }
        #    else
        #    {
        #        return null;
        #    }
        #}
      ENDSOURCE
      SOURCE #getActiveWorkflowConfiguration
        #public Common getActiveWorkflowConfiguration()
        #{
        #    Common workflowConfiguration;
        #
        #    if (workflowControls)
        #        workflowConfiguration = workflowControls.getActiveWorkflowVersion();
        #
        #    return workflowConfiguration;
        #}
      ENDSOURCE
      SOURCE #getActiveWorkflowTrackingStatus
        #public Common getActiveWorkflowTrackingStatus()
        #{
        #    Common trackingStatusTable;
        #
        #    if (workflowControls)
        #        trackingStatusTable = workflowControls.getActiveWorkflowTrackingStatus();
        #
        #    return trackingStatusTable;
        #}
      ENDSOURCE
      SOURCE #getActiveWorkflowWorkItem
        #public Common getActiveWorkflowWorkItem()
        #{
        #    Common workItem;
        #
        #    if (workflowControls)
        #        workItem = workflowControls.getActiveWorkflowWorkItem();
        #
        #    return workItem;
        #}
      ENDSOURCE
      SOURCE #init
        #public void init()
        #{
        #    super();
        #
        #    if (this.isWorkflowEnabled())
        #    {
        #        workflowControls = SysWorkflowFormControls::construct(this);
        #        workflowControls.initControls();
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #loadUserSetting
        #/// <summary>
        #/// Loads the user settings when a form is created.
        #/// </summary>
        #/// <remarks>
        #/// To override this method on a form, right-click the Methods node under the form, click Override
        #/// Method, and then click loadUserSetting.For information about best practices dealing with forms and
        #/// code, see <see cref="No Code in Forms" />.
        #/// </remarks>
        #public void loadUserSetting()
        #{
        #    SysSaveSetup    sysSaveSetup;
        #    Args            args = this.args();
        #    formName        formName;
        #
        #    if (args)
        #    {
        #        formName = args.name();
        #    }
        #
        #    super();
        #
        #    switch (formName)
        #    {
        #        case formstr(smmPhone):
        #            break;
        #        default:
        #            sysSaveSetup = SysSaveSetup::construct(this);
        #            sysSaveSetup.loadFormSetup();
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #loadWorkflowConfiguration
        #public Common loadWorkflowConfiguration()
        #{
        #    Common ret;
        #
        #    ret = super();
        #
        #    if (ret.RecId == 0)
        #    {
        #        if (this.isWorkflowEnabled() && workflowControls != null)
        #        {
        #            ret = Workflow::findWorkflowConfigurationToActivate(workflowControls.getWorkflowDocumentTable(), this.workflowType());
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #void new(xArgs args)
        #{;
        #    //BP deviation documented - derivation of formRun class has to call new formRun method.
        #    super(args);
        #}
      ENDSOURCE
      SOURCE #run
        #public void run()
        #{
        #    this.addAboutButton();
        #    super();
        #}
      ENDSOURCE
      SOURCE #saveUserSetting
        #/// <summary>
        #/// Saves the user settings.
        #/// </summary>
        #/// <remarks>
        #/// To override this method on a form, right-click the Methods node under the form, click Override
        #/// Method, and then click saveUserSetting.For information about best practices dealing with forms and
        #/// code, see <see cref="No Code in Forms" /> .
        #/// </remarks>
        #public void saveUserSetting()
        #{
        #    SysSaveSetup    sysSaveSetup = SysSaveSetup::construct(this);
        #    ;
        #    sysSaveSetup.saveFormSetup();
        #    super();
        #}
      ENDSOURCE
      SOURCE #task
        #public int task(int _p1)
        #{
        #    #task
        #    FormDataSource formDataSource;
        #
        #    int ret;
        #
        #    if (_p1 == #taskFilter)
        #    {
        #        formDataSource = this.objectSet();
        #        if (formDataSource &&
        #            formDataSource.queryRun() &&
        #            formDataSource.queryRun().args() &&
        #            !formDataSource.queryRun().args().caller())
        #        {
        #            formDataSource.queryRun().args().caller(this);
        #        }
        #    }
        #
        #    ret = super(_p1);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #updateWorkflowControls
        #public void updateWorkflowControls()
        #{
        #    if (workflowControls)
        #        workflowControls.updateControls();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #BankReconciliation
  PROPERTIES
    Name                #BankReconciliation
    Origin              #{F739DD65-BCC2-4A12-BA2A-350C9281CA00}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    LedgerDimensionDefaultAccountController ledgerDimensionController;
      #    DimensionDefaultingController           dimensionDefaultingController;
      #    BankAccountStatement                    bankAccountStatement;
      #    QueryBuildRange                         criteriaOpen;
      #    QueryBuildRange                         accountStatementDate;
      #    QueryBuildRange                         accountStatement;
      #    QueryBuildRange                         bankTransDate;
      #    QueryBuildRange                         reconciled;
      #    BankTransTypeGroup                      bankTransTypeGroup;
      #    Map                                     taxAmountCache;
      #    Map                                     bankAccountTransMap;
      #    NumberSeqFormHandler                    numberSeqFormHandler;
      #    SysFormSplitter_Y                       fs;
      #}
    ENDSOURCE
    SOURCE #bankAccountStatement
      #BankAccountStatement bankAccountStatement()
      #{
      #    return bankAccountStatement;
      #}
    ENDSOURCE
    SOURCE #bookRefresh
      #void bookRefresh()
      #{
      #    FormRun callerForm = element.args().caller();
      #    ;
      #
      #    if (callerForm)
      #    {
      #        callerForm.bookRefresh();
      #    }
      #
      #    bankAccountTrans_ds.research();
      #}
    ENDSOURCE
    SOURCE #close
      #void close()
      #{
      #    if (numberSeqFormHandler)
      #    {
      #        numberSeqFormHandler.formMethodClose();
      #    }
      #
      #    super();
      #}
    ENDSOURCE
    SOURCE #firstField
      #void firstField(int flags=1)
      #{
      #    overview_Grid.setFocus();
      #}
    ENDSOURCE
    SOURCE #init
      #void init()
      #{
      #    super();
      #
      #    ledgerDimensionController = LedgerDimensionDefaultAccountController::construct(bankAccountTrans_ds, fieldstr(BankAccountTrans, LedgerDimension));
      #    ledgerDimensionController.parmFilterLedgerPostingType(LedgerPostingType::LedgerJournal);
      #
      #    dimensionDefaultingController = DimensionDefaultingController::constructInTabWithValues(true, true, true, 0, this, tabFinancialDimensions, "@SYS138487");
      #    dimensionDefaultingController.parmAttributeValueSetDataSource(bankAccountTrans_ds, fieldstr(BankAccountTrans, DefaultDimension));
      #
      #    if (element.args().dataset() == tablenum(BankAccountStatement))
      #    {
      #        bankAccountStatement = element.args().record();
      #    }
      #    else
      #    {
      #        throw error(Error::missingRecord(this.name()));
      #    }
      #
      #    bankTransTypeGroup  = new BankTransTypeGroup(bankAccountStatement);
      #    taxAmountCache      = new Map(typeName2Type(extendedTypeStr(recId)), Types::Real);
      #
      #    if (!LedgerParameters::find().AcknowledgementDate_IT)
      #    {
      #        bankAccountTrans_AcknowledgementDate.visible(false);
      #    }
      #
      #    fs = new SysFormSplitter_Y(Splitter,Top,element);
      #}
    ENDSOURCE
    SOURCE #newBankAccountStatement
      #void newBankAccountStatement()
      #{
      #    endingBalance.realValue(bankAccountStatement.EndingBalance);
      #    openingBalance.realValue(bankAccountStatement.openingBalance());
      #    diffCleared.realValue(endingBalance.realValue() - openingBalance.realValue());
      #
      #    if (bankAccountStatement.ReconcileDate)
      #    {
      #        accountStatement.value(strfmt('(%1 == "%2")',
      #                                fieldstr(BankAccountTrans,AccountStatement),
      #                                bankAccountStatement.AccountStatementNum));
      #        accountStatement.status(RangeStatus::Hidden);
      #
      #        accountStatementDate.value(strfmt('(%1 == %2)',
      #                                    fieldstr(BankAccountTrans,AccountStatementDate),
      #                                    date2StrXpp(bankAccountStatement.AccountStatementDate)
      #                                    ));
      #        accountStatementDate.status(RangeStatus::Hidden);
      #
      #        reconciled.value(SysQuery::value(NoYes::Yes));
      #    }
      #    else
      #    {
      #        accountStatement.value(strfmt('( (%1 == "%2") || (%3 == "" ) )',
      #            fieldstr(BankAccountTrans,AccountStatement),
      #            bankAccountStatement.AccountStatementNum,
      #            fieldstr(BankAccountTrans,AccountStatement)));
      #
      #        accountStatement.status(RangeStatus::Hidden);
      #
      #        accountStatementDate.value(strfmt('( (%1 == %2) || (%3 == %4) )',
      #                                    fieldstr(BankAccountTrans,AccountStatementDate),
      #                                    date2StrXpp(bankAccountStatement.AccountStatementDate),
      #                                    fieldstr(BankAccountTrans,AccountStatementDate),
      #                                    0));
      #        accountStatementDate.status(RangeStatus::Hidden);
      #
      #        reconciled.value(SysQuery::value(NoYes::No));
      #    }
      #}
      #
    ENDSOURCE
    SOURCE #setAllowCorrection
      #void setAllowCorrection()
      #{
      #    if (bankAccountTrans.Manual)
      #    {
      #        bankAccountTrans_ds.object(fieldnum(BankAccountTrans, AmountCorrect)).allowEdit(false);
      #        bankAccountTrans_AmountCorrected.allowEdit(false);
      #        dimensionDefaultingController.updateValues(NoYesUnchanged::Yes);
      #    }
      #    else
      #    {
      #        bankAccountTrans_ds.object(fieldnum(BankAccountTrans, AmountCorrect)).allowEdit(bankAccountTrans.Included);
      #        bankAccountTrans_AmountCorrected.allowEdit(bankAccountTrans.Included);
      #    }
      #}
    ENDSOURCE
    SOURCE #setAllowEdit
      #void setAllowEdit()
      #{
      #    // Allow the edit of Included only if the bankAccountTrans is not manual
      #    // and is not an already included pending cancellation
      #    bankAccountTrans_ds.object(fieldnum(BankAccountTrans, Included)).allowEdit(
      #        !bankAccountTrans.Manual &&
      #        (bankAccountTrans.Included == NoYes::Yes || bankAccountTrans.CancelPending == NoYes::No));
      #    bankAccountTrans_ds.object(fieldnum(BankAccountTrans, Included)).skip(bankAccountTrans.Manual);
      #
      #    bankAccountTrans_ds.object(fieldnum(BankAccountTrans, AmountCur)).allowEdit(bankAccountTrans.Manual);
      #
      #    bankAccountTrans_ds.object(fieldnum(BankAccountTrans, BankTransAmountCur)).allowEdit(bankAccountTrans.Manual);
      #
      #    bankAccountTrans_ds.object(fieldnum(BankAccountTrans, BankTransCurrencyCode)).allowEdit(bankAccountTrans.Manual);
      #
      #    bankAccountTrans_ds.object(fieldnum(BankAccountTrans, TransDate)).allowEdit(bankAccountTrans.Manual);
      #
      #    if (LedgerParameters::find().AcknowledgementDate_IT)
      #    {
      #        bankAccountTrans_ds.object(fieldnum(BankAccountTrans, AcknowledgementDate)).allowEdit(bankAccountTrans.Manual);
      #    }
      #
      #    bankAccountTrans_ds.object(fieldnum(BankAccountTrans, LedgerDimension)).allowEdit(bankAccountTrans.Manual);
      #
      #    bankAccountTrans_ds.object(fieldnum(BankAccountTrans, Txt)).allowEdit(bankAccountTrans.Manual);
      #
      #    bankAccountTrans_ds.object(fieldnum(BankAccountTrans, TaxGroup)).allowEdit(bankAccountTrans.Manual);
      #
      #    bankAccountTrans_ds.object(fieldnum(BankAccountTrans, TaxItemGroup)).allowEdit(bankAccountTrans.Manual);
      #
      #    bankAccountTrans_ds.allowDelete((bankAccountTrans.Manual && !bankAccountTrans.Reconciled));
      #    bankAccountTrans_ds.allowEdit(!bankAccountTrans.Reconciled);
      #    bankAccountTrans_ds.allowCreate(!bankAccountTrans.Reconciled);
      #
      #    element.setAllowCorrection();
      #    cheques.enabled(bankAccountTrans.ChequeNum != '');
      #    bankDeposit.enabled(bankAccountTrans.DepositNum != '');
      #}
      #
    ENDSOURCE
    SOURCE #setButtonAccess
      #void setButtonAccess()
      #{
      #    bankAccountReconcile.enabled(diffCleared.realValue() == 0 && ! bankAccountStatement.ReconcileDate);
      #    bankMarkChequeReconcile.enabled(!bankAccountStatement.ReconcileDate);
      #    cheques.enabled(bankAccountTrans.RecId != 0);
      #    originalDocument.enabled(bankAccountTrans.RecId != 0);
      #    buttonVoucher.enabled(bankAccountTrans.RecId != 0);
      #}
      #
    ENDSOURCE
    SOURCE #setLedgerAccountNum
      #void setLedgerAccountNum(BankAccountTrans _bankAccountTrans)
      #{
      #    _bankAccountTrans.LedgerDimension = BankTransType::find(_bankAccountTrans.BankTransType).LedgerDimension;
      #}
    ENDSOURCE
    SOURCE #updateAmountCleared
      #void updateAmountCleared()
      #{
      #    AmountCur   clearedAmount;
      #    AmountCur   missingAmount;
      #
      #    clearedAmount = bankTransTypeGroup.createBankGroupSums();
      #    tmpBankTransTypeSum.setTmpData(bankTransTypeGroup.bankTransTypeSum());
      #    tmpBankTransTypeSum_ds.research();
      #
      #    missingAmount = (endingBalance.realValue() - openingBalance.realValue() - clearedAmount);
      #    diffCleared.realValue(missingAmount);
      #
      #    element.setButtonAccess();
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #BankAccountTrans
          Table               #BankAccountTrans
          Index               #AcctTransDate
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD Voucher
            PROPERTIES
              AllowEdit           #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD AmountCur
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #public void modified()
                #{
                #    super();
                #
                #    bankAccountTrans.calcAmountMST();
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD AmountMST
            PROPERTIES
              AllowEdit           #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD CurrencyCode
            PROPERTIES
              AllowEdit           #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD AccountStatement
            PROPERTIES
              AllowEdit           #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD AccountStatementDate
            PROPERTIES
              AllowEdit           #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD BankTransType
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #void modified()
                #{
                #    super();
                #
                #    element.setLedgerAccountNum(bankAccountTrans);
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD PaymReference
            PROPERTIES
              AllowEdit           #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD PaymentMode
            PROPERTIES
              AllowEdit           #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD DepositNum
            PROPERTIES
              AllowEdit           #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD Reconciled
            PROPERTIES
              AllowEdit           #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD Included
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #public void modified()
                #{
                #    super();
                #
                #    if (bankAccountTrans.Included)
                #    {
                #        bankAccountTrans.AccountStatement       = bankAccountStatement.AccountStatementNum;
                #        bankAccountTrans.AccountStatementDate   = bankAccountStatement.AccountStatementDate;
                #    }
                #    else
                #    {
                #        bankAccountTrans.AccountStatement       = Global::strMin();
                #        bankAccountTrans.AccountStatementDate   = Global::dateNull();
                #    }
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD AmountCorrect
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #void modified()
                #{
                #    super();
                #
                #    element.setLedgerAccountNum(bankAccountTrans);
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD Manual
            PROPERTIES
              AllowEdit           #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD ChequeNum
            PROPERTIES
              AllowEdit           #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD Cancel
            PROPERTIES
              AllowEdit           #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          REFERENCEFIELD LedgerDimension
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #public void modified()
                #{
                #    super();
                #
                #    if (bankAccountTrans.Manual)
                #    {
                #        bankAccountTrans.DefaultDimension = MainAccountLegalEntity::findByMainAccountLegalEntity(
                #                                            DimensionStorage::getMainAccountFromLedgerDimension(bankAccountTrans.LedgerDimension).RecId, CompanyInfo::find().RecId).DefaultDimension;
                #    }
                #}
              ENDSOURCE
              SOURCE #resolveReference
                #public Common resolveReference(FormReferenceControl _formReferenceControl)
                #{
                #    return ledgerDimensionController.resolveReference();
                #}
              ENDSOURCE
            ENDMETHODS
          ENDREFERENCEFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #validateWrite
          #public boolean validateWrite()
          #{
          #    boolean ret;
          #    ;
          #
          #    ret = super();
          #
          #    if (numberSeqFormHandler && bankAccountTrans.Manual)
          #    {
          #        numberSeqFormHandler.formMethodDataSourceValidateWrite();
          #    }
          #
          #    return ret;
          #}
          #
        ENDSOURCE
        SOURCE #cursorNotify
          #public void cursorNotify(int _event)
          #{
          #    BankAccountTrans        trans;
          #    Set                     setRecId;
          #
          #    super(_event);
          #
          #    if (_event == 0 || _event == 1)
          #    {
          #        trans = bankAccountTrans_DS.getFirst(0,false);
          #        while (trans)
          #        {
          #            if (! taxAmountCache.exists(trans.RecId))
          #            {
          #                if (! setRecId)
          #                {
          #                    setRecId = new Set(typeName2Type(extendedTypeStr(recId)));
          #                }
          #                setRecId.add(trans.RecId);
          #            }
          #
          #            trans = bankAccountTrans_DS.getNext();
          #        }
          #
          #        if (setRecId)
          #        {
          #            taxAmountCache = Map::create(BankAccountTrans::taxAmountDisplayCache(setRecId.pack(), taxAmountCache.pack()));
          #        }
          #    }
          #}
        ENDSOURCE
        SOURCE #taxAmount
          #//BP Deviation Documented
          #display TaxAmount taxAmount(BankAccountTrans _bankAccountTrans)
          #{
          #    BankAccountTrans trans;
          #    ;
          #    if (! bankAccountTransMap)
          #        bankAccountTransMap = new Map(typeName2Type(extendedTypeStr(recId)), Types::Record);
          #
          #    if (taxAmountCache.exists(_bankAccountTrans.RecId))
          #    {
          #        if (bankAccountTransMap.exists(_bankAccountTrans.RecId))
          #        {
          #            trans = bankAccountTransMap.lookup(_bankAccountTrans.RecId);
          #            if (_bankAccountTrans.TransDate     != trans.TransDate ||
          #                _bankAccountTrans.AmountCur     != trans.AmountCur ||
          #                _bankAccountTrans.TaxGroup      != trans.TaxGroup ||
          #                _bankAccountTrans.TaxItemGroup  != trans.TaxItemGroup)
          #            {
          #                bankAccountTransMap.insert(_bankAccountTrans.RecId, _bankAccountTrans);
          #                taxAmountCache.insert(_bankAccountTrans.RecId, _bankAccountTrans.taxAmount());
          #            }
          #        }
          #        else
          #        {
          #            bankAccountTransMap.insert(_bankAccountTrans.RecId, _bankAccountTrans);
          #        }
          #    }
          #    else
          #    {
          #        taxAmountCache.insert(_bankAccountTrans.RecId, _bankAccountTrans.taxAmount());
          #        bankAccountTransMap.insert(_bankAccountTrans.RecId, _bankAccountTrans);
          #    }
          #    return taxAmountCache.lookup(_bankAccountTrans.RecId);
          #}
        ENDSOURCE
        SOURCE #active
          #int active()
          #{
          #    int ret;
          #
          #    ret = super();
          #
          #    dimensionDefaultingController.activated();
          #
          #    if (ret)
          #    {
          #        element.setAllowEdit();
          #    }
          #    return ret;
          #}
        ENDSOURCE
        SOURCE #create
          #void create(boolean append = false)
          #{
          #    if (!numberSeqFormHandler)
          #    {
          #
          #        numberSeqFormHandler = NumberSeqFormHandler::newForm(BankParameters::numRefBankReconcileVoucher().NumberSequenceId,
          #                                                             element,
          #                                                             bankAccountTrans_ds,
          #                                                             fieldnum(BankAccountTrans, Voucher));
          #        if (!numberSeqFormHandler.parmNumberSequenceId())
          #        {
          #            numberSeqFormHandler = null;
          #            throw error(strfmt("@SYS26165","@SYS24040"));
          #        }
          #    }
          #
          #    if (numberSeqFormHandler)
          #    {
          #        numberSeqFormHandler.formMethodDataSourceCreatePre();
          #    }
          #
          #    super(append);
          #
          #    bankAccountTrans_bankTransTypeGrid.setFocus();
          #}
        ENDSOURCE
        SOURCE #delete
          #void delete()
          #{
          #    Voucher curVoucher;
          #
          #    if (bankAccountTrans.Manual)
          #    {
          #        curVoucher = bankAccountTrans.Voucher;
          #    }
          #
          #    super();
          #
          #    dimensionDefaultingController.deleted();
          #
          #    if (curVoucher)
          #    {
          #        if (numberSeqFormHandler && curVoucher == numberSeqFormHandler.lastUncommitedNumber())
          #        {
          #            numberSeqFormHandler.formMethodDataSourceDelete();
          #        }
          #        else
          #        {
          #            NumberSeq::releaseNumber(BankParameters::numRefBankReconcileVoucher().NumberSequenceId, curVoucher);
          #        }
          #    }
          #
          #    element.updateAmountCleared();
          #}
        ENDSOURCE
        SOURCE #executeQuery
          #void executeQuery()
          #{
          #    switch (allReconciled.selection())
          #    {
          #        case 0 :
          #            criteriaOpen.value('0..1');
          #            break;
          #
          #        case 1 :
          #            criteriaOpen.value('0');
          #            break;
          #
          #        case 2 :
          #            criteriaOpen.value('1');
          #            break;
          #    }
          #
          #    super();
          #}
        ENDSOURCE
        SOURCE #init
          #void init()
          #{
          #    super();
          #
          #    criteriaOpen            = this.query().dataSourceNo(1).addRange(fieldnum(BankAccountTrans, Included));
          #    accountStatementDate    = this.query().dataSourceNo(1).addRange(fieldnum(BankAccountTrans, AccountStatementDate));
          #    accountStatement        = this.query().dataSourceNo(1).addRange(fieldnum(BankAccountTrans, AccountStatement));
          #    reconciled              = this.query().dataSourceNo(1).addRange(fieldnum(BankAccountTrans, Reconciled));
          #    bankTransDate           = this.query().dataSourceNo(1).addRange(fieldnum(BankAccountTrans, TransDate));
          #}
        ENDSOURCE
        SOURCE #initValue
          #void initValue()
          #{
          #    ;
          #    super();
          #
          #    if (numberSeqFormHandler)
          #    {
          #        numberSeqFormHandler.formMethodDataSourceCreate();
          #    }
          #
          #    bankAccountTrans.TransDate              = (bankAccountStatement.AccountStatementDate <= systemdateget() ?
          #                                               bankAccountStatement.AccountStatementDate : systemdateget());
          #    bankAccountTrans.CurrencyCode           = bankAccountStatement.CurrencyCode;
          #    bankAccountTrans.Manual                 = NoYes::Yes;
          #    bankAccountTrans.Included               = NoYes::Yes;
          #    bankAccountTrans.AccountStatement       = bankAccountStatement.AccountStatementNum;
          #    bankAccountTrans.AccountStatementDate   = bankAccountStatement.AccountStatementDate;
          #    bankAccountTrans.AcknowledgementDate    = bankAccountTrans.TransDate;
          #}
        ENDSOURCE
        SOURCE #linkActive
          #void linkActive()
          #{
          #    ;
          #
          #    if (numberSeqFormHandler)
          #    {
          #        numberSeqFormHandler.formMethodDataSourceLinkActive();
          #    }
          #
          #    element.newBankAccountStatement();
          #
          #    super();
          #
          #    element.updateAmountCleared();
          #}
        ENDSOURCE
        SOURCE #write
          #void write()
          #{
          #    boolean             beforeIncluded      = bankAccountTrans.orig().Included;
          #    AmountCur           beforeAmountCur     = bankAccountTrans.orig().AmountCur;
          #    AmountCur           beforeAmountCorrect = bankAccountTrans.orig().AmountCorrect;
          #    BankTransactionType beforeBankTransType = bankAccountTrans.orig().BankTransType;
          #
          #    ttsbegin;
          #
          #    super();
          #
          #    dimensionDefaultingController.writing();
          #
          #    if (numberSeqFormHandler && bankAccountTrans.Manual)
          #    {
          #        numberSeqFormHandler.formMethodDataSourceWrite();
          #    }
          #
          #    if (beforeAmountCur     != bankAccountTrans.AmountCur       ||
          #        beforeAmountCorrect != bankAccountTrans.AmountCorrect   ||
          #        beforeBankTransType != bankAccountTrans.BankTransType   ||
          #        beforeIncluded      != bankAccountTrans.Included)
          #    {
          #        element.updateAmountCleared();
          #    }
          #
          #    ttscommit;
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #TmpBankTransTypeSum
          Table               #TmpBankTransTypeSum
          Index               #Group
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS23703
    ENDPROPERTIES
    
    CONTAINER
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #ActionPane
          ElementPosition     #858993458
          Style               #Strip
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #ActionPane
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1610612733
          HierarchyParent     #ActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #NewDeleteGroup
          ElementPosition     #1073741822
          HierarchyParent     #ActionPaneTab
          DataSource          #BankAccountTrans
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #Overview_Grid
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741822
          HierarchyParent     #Overview
          DataSource          #BankAccountTrans
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #TypeSums
          Width               #Column width
          Height              #100
          ElementPosition     #1431655764
          HierarchyParent     #BankTransTypeGroup
          DataSource          #TmpBankTransTypeSum
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Amount
          ElementPosition     #920350134
          HierarchyParent     #General
          DataSource          #BankAccountTrans
          DataGroup           #Amount
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Balances
          AllowEdit           #No
          Skip                #Yes
          ElementPosition     #1288490187
          HierarchyParent     #Top
          Caption             #@SYS13865
          Columns             #3
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Bank
          ElementPosition     #613566756
          HierarchyParent     #General
          DataSource          #BankAccountTrans
          DataGroup           #Bank
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #BankTransTypeGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #1717986916
          FrameType           #None
          DataSource          #TmpBankTransTypeSum
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupLedger
          ElementPosition     #1073741822
          HierarchyParent     #GroupOverviewBottom
          FrameType           #None
          DataSource          #BankAccountTrans
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupOverviewBottom
          Top                 #Bottom edge
          ElementPosition     #1610612733
          HierarchyParent     #Overview
          FrameType           #None
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
          AlignChild          #No
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupSalesTax
          ElementPosition     #1610612733
          HierarchyParent     #GroupOverviewBottom
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Payment
          ElementPosition     #1227133512
          HierarchyParent     #General
          DataSource          #BankAccountTrans
          DataGroup           #Payment
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #SalesTax
          ElementPosition     #1840700268
          HierarchyParent     #General
          DataSource          #BankAccountTrans
          DataGroup           #SalesTax
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Splitter
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #5
          ElementPosition     #429496729
          FrameType           #Raised 3D
          BackgroundColor     #Window background
          HideIfEmpty         #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #mouseDown
            #public int mouseDown(int _x,int _y,int _button,boolean _ctrl,boolean _shift)
            #{
            #return fs.mouseDown(_x, _y, _button, _ctrl, _shift);
            #}
          ENDSOURCE
          SOURCE #mouseMove
            #public int mouseMove(int _x,int _y,int _button,boolean _ctrl,boolean _shift)
            #{
            #return fs.mouseMove(_x, _y, _button, _ctrl, _shift);
            #}
          ENDSOURCE
          SOURCE #mouseUp
            #public int mouseUp(int _x,int _y,int _button,boolean _ctrl,boolean _shift)
            #{
            #return fs.mouseUp(_x, _y, _button, _ctrl, _shift);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Top
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1288490187
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Voucher
          ElementPosition     #1533916890
          HierarchyParent     #General
          DataSource          #BankAccountTrans
          DataGroup           #Voucher
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUBUTTON
        PROPERTIES
          Name                #Printout
          HelpText            #@SYS6845
          ElementPosition     #1908874352
          HierarchyParent     #ButtonGroup
          Text                #@SYS920
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #Tab
          Width               #Column width
          Height              #Column height
          ElementPosition     #1717986916
          HierarchyParent     #Top
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #General
          ElementPosition     #1288490187
          HierarchyParent     #Tab
          Caption             #@SYS2952
          DataSource          #BankAccountTrans
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Overview
          Width               #Column width
          Height              #Column height
          ElementPosition     #858993458
          HierarchyParent     #Tab
          Caption             #@SYS9039
          DataSource          #BankAccountTrans
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabFinancialDimensions
          AutoDeclaration     #Yes
          NeededPermission    #Manual
          ElementPosition     #1717986916
          HierarchyParent     #Tab
          Caption             #@SYS101181
          HideIfEmpty         #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #pageActivated
            #public void pageActivated()
            #{
            #    dimensionDefaultingController.pageActivated();
            #    tabFinancialDimensions.allowEdit(bankAccountTrans.Included ? true:false);
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #BankAccountTrans_Included
          ElementPosition     #390451572
          HierarchyParent     #Overview_Grid
          BackgroundColor     #Window background
          DataSource          #BankAccountTrans
          DataField           #Included
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #public void clicked()
            #{
            #    super();
            #
            #    BankAccountTrans_DS.write();
            #    element.setAllowCorrection();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #AllReconciled
          AutoDeclaration     #Yes
          HelpText            #@SYS50992
          ElementPosition     #858993458
          HierarchyParent     #Top
          Label               #@SYS50991
          EnumType            #AllNotReconciled
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #
            #    if (ret)
            #    {
            #        bankAccountTrans_ds.executeQuery();
            #    }
            #
            #    element.setButtonAccess();
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #DeleteButton
          ElementPosition     #1610612733
          HierarchyParent     #NewDeleteGroup
          Text                #@sys14425
          ButtonDisplay       #Text & Image left
          NormalImage         #10121
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          Primary             #Yes
          Command             #2832
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #NewButton
          ElementPosition     #1073741822
          HierarchyParent     #NewDeleteGroup
          ButtonDisplay       #Text & Image left
          NormalImage         #11045
          ImageLocation       #EmbeddedResource
          Primary             #Yes
          Command             #260
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL DATEEDIT
        PROPERTIES
          Name                #BankAccountTrans_AcknowledgementDate
          AutoDeclaration     #Yes
          ElementPosition     #976128930
          HierarchyParent     #Overview_Grid
          DataSource          #BankAccountTrans
          DataField           #AcknowledgementDate
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL DATEEDIT
        PROPERTIES
          Name                #BankAccountTrans_TransDateGrid
          ElementPosition     #780903144
          HierarchyParent     #Overview_Grid
          DataSource          #BankAccountTrans
          DataField           #TransDate
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #TmpBankTransTypeSum_Lines
          ElementPosition     #1431655764
          HierarchyParent     #TypeSums
          DataSource          #TmpBankTransTypeSum
          DataField           #Lines
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #BankAccountReconcile
          AutoDeclaration     #Yes
          ElementPosition     #477218588
          HierarchyParent     #ButtonGroup
          DataSource          #BankAccountTrans
          MenuItemType        #Action
          MenuItemName        #BankAccountReconcile
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    if (diffCleared.realValue() == 0 && !bankAccountStatement.ReconcileDate)
            #    {
            #        super();
            #
            #        element.bookRefresh();
            #
            #        element.newBankAccountStatement();
            #
            #        bankAccountTrans_ds.executeQuery();
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #BankDeposit
          AutoDeclaration     #Yes
          ElementPosition     #954437176
          HierarchyParent     #ButtonGroup
          DataSource          #BankAccountTrans
          MenuItemName        #BankDeposit
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #BankMarkChequeReconcile
          AutoDeclaration     #Yes
          ElementPosition     #715827882
          HierarchyParent     #ButtonGroup
          DataSource          #BankAccountTrans
          MenuItemType        #Action
          MenuItemName        #BankMarkChequeReconcile
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #
            #    bankAccountTrans_ds.research();
            #
            #    element.updateAmountCleared();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #BankReconciliation
          ElementPosition     #1610612733
          HierarchyParent     #Printout
          MenuItemType        #Output
          MenuItemName        #BankReconciliation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #BankReconciliationSummary
          ElementPosition     #1073741822
          HierarchyParent     #Printout
          MenuItemType        #Output
          MenuItemName        #BankReconciliationSummary
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ButtonVoucher
          AutoDeclaration     #Yes
          ElementPosition     #1670265058
          HierarchyParent     #ButtonGroup
          DataSource          #BankAccountTrans
          MenuItemName        #LedgerTransVoucher1
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #Cheques
          AutoDeclaration     #Yes
          ElementPosition     #1193046470
          HierarchyParent     #ButtonGroup
          DataSource          #BankAccountTrans
          MenuItemName        #BankChequeTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #OriginalDocument
          AutoDeclaration     #Yes
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroup
          DataSource          #BankAccountTrans
          MenuItemName        #Originaldocuments
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #BankAccountTrans_AmountCorrected
          AutoDeclaration     #Yes
          HelpText            #@SYS53246
          ElementPosition     #2141891239
          HierarchyParent     #Overview_Grid
          Label               #@SYS53245
          DataSource          #BankAccountTrans
          DataMethod          #CorrectedAmountCur
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #BankAccountTrans_AmountCorrectGrid
          ElementPosition     #2136298834
          HierarchyParent     #Overview_Grid
          DataSource          #BankAccountTrans
          DataField           #AmountCorrect
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #BankAccountTrans_AmountCurGrid
          AutoDeclaration     #Yes
          ElementPosition     #2119521619
          HierarchyParent     #Overview_Grid
          DataSource          #BankAccountTrans
          DataField           #AmountCur
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #DiffCleared
          AutoDeclaration     #Yes
          HelpText            #@SYS53042
          ElementPosition     #1717986916
          HierarchyParent     #Balances
          Label               #@SYS53063
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #EndingBalance
          AutoDeclaration     #Yes
          HelpText            #@SYS50987
          ElementPosition     #1288490187
          HierarchyParent     #Balances
          Label               #@SYS50986
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #OpeningBalance
          AutoDeclaration     #Yes
          HelpText            #@SYS53034
          ElementPosition     #858993458
          HierarchyParent     #Balances
          Label               #@SYS53035
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #RealEdit
          ElementPosition     #1717986916
          HierarchyParent     #GroupSalesTax
          DataSource          #BankAccountTrans
          DataMethod          #taxAmount
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #TmpBankTransTypeSum_ClearedAmountCur
          ElementPosition     #1789569705
          HierarchyParent     #TypeSums
          DataSource          #TmpBankTransTypeSum
          DataField           #ClearedAmountCur
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL SEGMENTEDENTRY
        PROPERTIES
          Name                #BankAccountTrans_LedgerAccountNum
          ElementPosition     #1073741822
          HierarchyParent     #GroupLedger
          DataSource          #BankAccountTrans
          ReferenceField      #LedgerDimension
        ENDPROPERTIES
        
        METHODS
          SOURCE #jumpRef
            #public void jumpRef()
            #{
            #    ledgerDimensionController.jumpRef();
            #}
          ENDSOURCE
          SOURCE #loadAutoCompleteData
            #public void loadAutoCompleteData(LoadAutoCompleteDataEventArgs _e)
            #{
            #    ledgerDimensionController.loadAutoCompleteData(_e);
            #
            #    super(_e);
            #}
          ENDSOURCE
          SOURCE #loadSegments
            #public void loadSegments()
            #{
            #
            #    super();
            #
            #    ledgerDimensionController.parmControl(this);
            #    ledgerDimensionController.loadSegments();
            #}
          ENDSOURCE
          SOURCE #segmentValueChanged
            #public void segmentValueChanged(SegmentValueChangedEventArgs _e)
            #{
            #    super(_e);
            #
            #    ledgerDimensionController.segmentValueChanged(_e);
            #}
          ENDSOURCE
          SOURCE #validate
            #public boolean validate()
            #{
            #    boolean isValid;
            #
            #    isValid = super();
            #    isValid = ledgerDimensionController.validate() && isValid;
            #
            #    return isValid;
            #
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #BankAccountTrans_bankTransTypeGrid
          AutoDeclaration     #Yes
          ElementPosition     #585677358
          HierarchyParent     #Overview_Grid
          DataSource          #BankAccountTrans
          DataField           #BankTransType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #BankAccountTrans_ChequeNum
          ElementPosition     #1171354716
          HierarchyParent     #Overview_Grid
          DataSource          #BankAccountTrans
          DataField           #ChequeNum
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #BankAccountTrans_DepositNum
          ElementPosition     #1366580502
          HierarchyParent     #Overview_Grid
          DataSource          #BankAccountTrans
          DataField           #DepositNum
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #BankAccountTrans_ManualTxt
          ElementPosition     #1610612733
          HierarchyParent     #GroupLedger
          DataSource          #BankAccountTrans
          DataField           #Txt
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #BankAccountTrans_TaxGroup
          ElementPosition     #858993458
          HierarchyParent     #GroupSalesTax
          DataSource          #BankAccountTrans
          DataField           #TaxGroup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #BankAccountTrans_TaxItemGroup
          ElementPosition     #1288490187
          HierarchyParent     #GroupSalesTax
          DataSource          #BankAccountTrans
          DataField           #TaxItemGroup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #GroupName
          ElementPosition     #1073741823
          HierarchyParent     #TypeSums
          DataSource          #TmpBankTransTypeSum
          DataMethod          #GroupName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #TmpBankTransTypeSum_BankTransactionTypeGroup
          ElementPosition     #715827882
          HierarchyParent     #TypeSums
          DataSource          #TmpBankTransTypeSum
          DataField           #BankTransactionTypeGroup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
        CONTROL #TabFinancialDimensions
          PROPERTIES
            Control             #TabFinancialDimensions
            EffectiveAccess     #Read
            ManagedBy           #Manual
          ENDPROPERTIES
          
        ENDCONTROL
        
    ENDFORM
    
  TABLES #Tables
  ENDTABLES
  
SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
    CONTROL #TabFinancialDimensions
      PROPERTIES
        Control             #TabFinancialDimensions
        EffectiveAccess     #Update
        ManagedBy           #Manual
      ENDPROPERTIES
      
    ENDCONTROL
    
ENDFORM

TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
    CONTROL #TabFinancialDimensions
      PROPERTIES
        Control             #TabFinancialDimensions
        EffectiveAccess     #Update
        ManagedBy           #Manual
      ENDPROPERTIES
      
    ENDCONTROL
    
ENDFORM

TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
    CONTROL #TabFinancialDimensions
      PROPERTIES
        Control             #TabFinancialDimensions
        EffectiveAccess     #Update
        ManagedBy           #Manual
      ENDPROPERTIES
      
    ENDCONTROL
    
ENDFORM

TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: CLS

; Microsoft Dynamics AX Class: CustGroupDynamic_3_Again unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #CustGroupDynamic_3_Again
    PROPERTIES
      Name                #CustGroupDynamic_3_Again
      Origin              #{11A36796-8517-4EB6-A3CB-5F968B64E452}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #public class CustGroupDynamic_3_Again
        #{
        #
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args _args)
        #{
        #    DictTable dictTable;
        #
        #    Form form;
        #    FormBuildDesign design;
        #    FormBuildDataSource  dataSource;
        #    FormBuildActionPaneControl actionPane;
        #    FormBuildActionPaneTabControl actionPaneTab;
        #    FormBuildButtonGroupControl defaultButtonGroup;
        #    FormBuildButtonGroupControl manuallyButtonGroup;
        #    FormBuildCommandButtonControl cmdNew;
        #    FormBuildCommandButtonControl cmdDel;
        #    FormBuildMenuButtonControl dropDownPosting;
        #    FormBuildFunctionButtonControl btnItemPosting;
        #    FormBuildFunctionButtonControl btnForecast;
        #    FormBuildGridControl grid;
        #    FormBuildGroupControl grpBody;
        #    Args args;
        #    FormRun formRun;
        #    #Task
        #
        #    dictTable = new dictTable(tableNum(CustGroup));
        #
        #    form = new form();
        #    form.name("CustGroupDynamic");
        #
        #    dataSource = form.addDataSource(dictTable.name());
        #    dataSource.table(dictTable.id());
        #
        #    design = form.addDesign("Design");
        #    design.caption("Customer groups");
        #    design.style(FormStyle::SimpleList);
        #    design.titleDatasource(dataSource.id());
        #
        #    actionPane = design.addControl(FormControlType::ActionPane, "ActionPane");
        #    actionPane.style(ActionPaneStyle::Strip);
        #    actionPaneTab = actionPane.addControl(FormControlType::ActionPaneTab,"ActionPaneTab");
        #    defaultButtonGroup = actionPaneTab.addControl(FormControlType::ButtonGroup, "NewDeleteGroup");
        #    manuallyButtonGroup = actionPaneTab.addControl(FormControlType::ButtonGroup, "ButtonGroup");
        #
        #    cmdNew = defaultButtonGroup.addControl(FormControlType::CommandButton, "NewButton");
        #    cmdNew.buttonDisplay(FormButtonDisplay::TextAndImageLeft);
        #    cmdNew.normalImage("11045");
        #    cmdNew.imageLocation(SysImageLocation::EmbeddedResource);
        #    cmdNew.primary(NoYes::Yes);
        #    cmdNew.command(#taskNew);
        #
        #    cmdDel = defaultButtonGroup.addControl(FormControlType::CommandButton, "DeleteButton");
        #    cmdDel.buttonDisplay(FormButtonDisplay::TextAndImageLeft);
        #    cmdDel.normalImage("10121");
        #    cmdDel.imageLocation(SysImageLocation::EmbeddedResource);
        #    cmdDel.primary(NoYes::Yes);
        #    cmdDel.command(#taskDeleteRecord);
        #
        #    dropDownPosting = manuallyButtonGroup.addControl(FormControlType::MenuButton, "MenuButtonPosting");
        #    dropDownPosting.helpText("Set up related data from the group.");
        #    dropDownPosting.text("Setup");
        #
        #    btnItemPosting = dropDownPosting.addControl(FormControlType::MenuFunctionButton,"Posting");
        #    btnItemPosting.text("Item posting");
        #    btnItemPosting.saveRecord(NoYes::No);
        #    btnItemPosting.dataSource(dataSource.id());
        #    btnItemPosting.menuItemName(menuitemDisplayStr(InventPosting));
        #
        #
        #    btnForecast = manuallyButtonGroup.addControl(FormControlType::MenuFunctionButton, "SakesForecast");
        #    btnForecast.text("Forecast");
        #    btnForecast.saveRecord(NoYes::No);
        #    btnForecast.menuItemName(menuitemDisplayStr(ForecastSalesGroup));
        #
        #    grpBody = design.addControl(FormControlType::Group, "Body");
        #    grpBody.heightMode(FormHeight::ColumnHeight);
        #    grpBody.columnspace(0);
        #    grpBody.style(GroupStyle::BorderlessGridContainer);
        #
        #    grid = grpBody.addControl(FormControlType::Grid,"Grid");
        #    grid.dataSource(dataSource.name());
        #    grid.widthMode(FormWidth::ColumnWidth);
        #
        #    grid.heightMode(FormHeight::ColumnHeight);
        #
        #    grid.addDataField(dataSource.id(), fieldNum(CustGroup,CustGroup));
        #    grid.addDataField(dataSource.id(), fieldNum(CustGroup,Name));
        #    grid.addDataField(dataSource.id(), fieldNum(CustGroup,PaymTermId));
        #    grid.addDataField(dataSource.id(), fieldNum(CustGroup,ClearingPeriod));
        #    grid.addDataField(dataSource.id(), fieldNum(CustGroup,BankCustPaymIdTable));
        #    grid.addDataField(dataSource.id(), fieldNum(CustGroup,TaxGroupId));
        #
        #    args = new args();
        #    args.object(form);
        #
        #    formRun = classFactory.formRunClass(args);
        #    formRun.init();
        #    formRun.run();
        #
        #    formRun.detach();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: CustGroupDynamic_3 unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #CustGroupDynamic_3
    PROPERTIES
      Name                #CustGroupDynamic_3
      Origin              #{B572FD61-7674-4909-96E9-F89E98861674}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #public class CustGroupDynamic_3
        #{
        #
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args _args)
        #{
        #    DictTable dictTable;
        #    Form form;
        #    FormBuildDesign design;
        #    FormBuildDataSource ds;
        #    FormBuildActionPaneControl actionPane;
        #    FormBuildActionPaneTabControl actionPaneTab;
        #    FormBuildButtonGroupControl btngrp1;
        #    FormBuildButtonGroupControl btngrp2;
        #    FormBuildCommandButtonControl cmdNew;
        #    FormBuildCommandButtonControl cmdDel;
        #    FormBuildMenuButtonControl mbPosting;
        #    FormBuildFunctionButtonControl mibPosting;
        #    FormBuildFunctionButtonControl mibForecast;
        #    FormBuildGridControl grid;
        #    FormBuildGroupControl grpBody;
        #    Args args;
        #    FormRun formRun;
        #    #Task
        #
        #    dictTable = new dictTable(tableNum(CustGroup));
        #
        #    form = new form();
        #    form.name("CustGroupDynamic");
        #
        #    ds = form.addDataSource(dictTable.name());
        #    ds.table(dictTable.id());
        #
        #
        #    design = form.addDesign("Design");
        #    design.caption("Customer groups");
        #    design.style(FormStyle::SimpleList);
        #    design.titleDatasource(ds.id());
        #
        #
        #    actionPane = design.addControl(FormControlType::ActionPane, "ActionPane");
        #    actionPane.style(ActionPaneStyle::Strip);
        #    actionPaneTab = actionPane.addControl(FormControlType::ActionPaneTab, "ActionPaneTab");
        #    btngrp1 = actionPaneTab.addControl(FormControlType::ButtonGroup, "NewDeleteGroup");
        #    btngrp2 = actionPaneTab.addControl(FormControlType::ButtonGroup, "ButtonGroup");
        #
        #    //DEFAULT BUTTONS
        #    cmdNew = btngrp1.addControl(FormControlType::CommandButton, "NewButton");
        #    cmdNew.buttonDisplay(FormButtonDisplay::TextAndImageLeft);
        #    cmdNew.normalImage("11045");
        #    cmdNew.imageLocation(SysImageLocation::EmbeddedResource);
        #    cmdNew.primary(NoYes::Yes);
        #    cmdNew.command(#taskNew);
        #
        #    cmdDel = btngrp1.addControl(FormControlType::CommandButton, "NewButton");
        #    cmdDel.text("Delete");
        #    cmdDel.buttonDisplay(FormButtonDisplay::TExtAndimageLeft);
        #    cmdDel.normalImage("10121");
        #    cmdDel.imageLocation(SysImageLocation::EmbeddedResource);
        #    cmdDel.saveRecord(NoYes::Yes);
        #    cmdDel.primary(NoYes::Yes);
        #    cmdDel.command(#taskDeleteRecord);
        #
        #    //SEPARATOR
        #    mbPosting = btngrp2.addControl(FormControlType::MenuButton, "MenuButtonPosting");
        #    mbPosting.helpText("Set up related data for the group.");
        #    mbPosting.text("Setup");
        #
        #    //MANUAlLY BUTTONS
        #    mibPosting = mbPosting.addControl(FormControlType::MenuFunctionButton, "Posting");
        #    mibPosting.text("Item posting");
        #    mibPosting.saveRecord(NoYes::No);
        #    mibPosting.dataSource(ds.id());
        #    mibPosting.menuItemName(menuitemDisplayStr(InventPosting));
        #
        #    mibForecast = btngrp2.addControl(FormControlType::MenuFunctionButton, "SakesForecast");
        #    mibForecast.text("Forecast");
        #    mibForecast.saveRecord(NoYes::No);
        #    mibForecast.menuItemName(menuitemDisplayStr(ForecastSalesGroup));
        #
        #    grpBody = design.addControl(FormControlType::Group, "Body");
        #    grpBody.heightMode(FormHeight::ColumnHeight);
        #    grpBody.columnspace(0);
        #    grpBody.style(GroupStyle::BorderlessGridContainer);
        #
        #    grid = grpBody.addControl(FormControlType::Grid, "Grid");
        #    grid.dataSource(ds.name());
        #    grid.widthMode(FormWidth::ColumnWidth);
        #
        #    grid.heightMode(FormHeight::ColumnHeight);
        #
        #    grid.addDataField(ds.id(), fieldNum(CustGroup,CustGroup));
        #    grid.addDataField(ds.id(), fieldNum(CustGroup,Name));
        #    grid.addDataField(ds.id(), fieldNum(CustGroup,PaymTermId));
        #    grid.addDataField(ds.id(), fieldNum(CustGroup,ClearingPeriod));
        #    grid.addDataField(ds.id(), fieldNum(CustGroup,BankCustPaymIdTable));
        #    grid.addDataField(ds.id(), fieldNum(CustGroup,TaxGroupId));
        #
        #
        #    args = new Args();
        #    args.object(form);
        #
        #    formRun = classFactory.formRunClass(args);
        #    formRun.init();
        #    formRun.run();
        #
        #    formRun.detach();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: CustSelect_2 unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #CustSelect_2
    PROPERTIES
      Name                #CustSelect_2
      Extends             #RunBase
      Origin              #{493D736F-6F54-42CD-8E9F-4F1960B5B8A8}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class CustSelect_2 extends RunBase
        #{
        #    DialogField fieldAccount;
        #    DialogField fieldName;
        #    DialogField fieldGroup;
        #    DialogField fieldCurrency;
        #    DialogField fieldPaymTermId;
        #    DialogField fieldPaymMode;
        #}
      ENDSOURCE
      SOURCE #dialog
        #protected Object dialog()
        #{
        #    Dialog dialog;
        #    DialogGroup groupCustomer;
        #    DialogGroup groupPayment;
        #
        #    dialog = super();
        #
        #    dialog.caption("Customer information");
        #    dialog.allowUpdateOnSelectCtrl(true);
        #
        #    fieldAccount = dialog.addField(extendedTypeStr(CustAccount),"Customer account");
        #
        #    fieldName = dialog.addField(extendedTypeStr(CustName));
        #    fieldName.enabled(false);
        #
        #    dialog.addTabPage("Details");
        #    //info(dialog.addTabPage("Details").name());
        #
        #    groupCustomer = dialog.addGroup("Setup");
        #    fieldGroup = dialog.addField(extendedTypeStr(CustGroupId));
        #    fieldCurrency = dialog.addField(extendedTypeStr(CurrencyCode));
        #    fieldGroup.enabled(false);
        #    fieldCurrency.enabled(false);
        #
        #    groupPayment = dialog.addGroup("Payment");
        #    fieldPaymTermId = dialog.addField(extendedTypeStr(CustPaymTermId));
        #    fieldPaymMode = dialog.addField(extendedTypeStr(CustPaymMode));
        #    fieldPaymTermId.enabled(false);
        #    fieldPaymMode.enabled(false);
        #
        #    return dialog;
        #}
      ENDSOURCE
      SOURCE #dialogPostRun
        #public void dialogPostRun(DialogRunbase dialog)
        #{
        #    dialog.formRun().controlMethodOverload(true);
        #    dialog.formRun().controlMethodOverloadObject(this);
        #    super(dialog);
        #}
      ENDSOURCE
      SOURCE #dialogSeelectCtrl
        #public void dialogSeelectCtrl()
        #{
        #    CustTable custTable;
        #
        #    custTable = custTable::find(fieldAccount.value());
        #    fieldName.value(custTable.name());
        #    fieldGroup.value(custTable.CustGroup);
        #    fieldCurrency.value(custTable.currency);
        #    fieldPaymTermId.value(custTable.PaymTermId);
        #    fieldPaymMode.value(custTable.PaymMode);
        #}
      ENDSOURCE
      SOURCE #pack
        #public container pack()
        #{
        #    return conNull();
        #}
      ENDSOURCE
      SOURCE #TabPg_1_pageActivated
        #public void TabPg_1_pageActivated()
        #{
        #    info('Tab page activated');
        #}
      ENDSOURCE
      SOURCE #unpack
        #public boolean unpack(container _packedClass)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args _args)
        #{
        #    CustSelect_2 custSelect = new CustSelect_2();
        #
        #    if(custSelect.prompt())
        #    {
        #        custSelect.run();
        #    }
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: CustCreate_1 unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #CustCreate_1
    PROPERTIES
      Name                #CustCreate_1
      Extends             #RunBase
      Origin              #{530C503D-DAD0-4F7F-B4DD-68BFF5689E33}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #public class CustCreate_1 extends RunBase
        #{
        #    DialogField fieldAccount;
        #    DialogField fieldName;
        #    DialogField fieldGroup;
        #    DialogField fieldCurrency;
        #    DialogField fieldPaymTermId;
        #    DialogField fieldPaymMode;
        #
        #    CustAccount custAccount;
        #    CustName custName;
        #    CustGroupId custGroupId;
        #    CurrencyCode currencyCode;
        #    CustPaymTermId paymTermId;
        #    CustPaymMode paymMode;
        #
        #}
      ENDSOURCE
      SOURCE #dialog
        #protected Object dialog()
        #{
        #    Dialog dialog;
        #    DialogGroup groupCustomer;
        #    DialogGroup groupPayment;
        #
        #    dialog = super();
        #
        #    dialog.caption("Customer information");
        #
        #
        #    fieldAccount = dialog.addField(extendedTypeStr(CustVendAC), "Customer account");
        #    fieldName = dialog.addField(extendedTypeStr(custName));
        #
        #    dialog.addTabPage("Details");
        #
        #    groupCustomer = dialog.addGroup("Setup");
        #    fieldGroup = dialog.addField(extendedTypeStr(custGroupId));
        #    fieldCurrency = dialog.addField(extendedTypeStr(currencyCode));
        #
        #    groupPayment = dialog.addGroup("Payment");
        #    fieldPaymTermId = dialog.addField(extendedTypeStr(CustPaymTermId));
        #    fieldPaymMode = dialog.addField(extendedTypeStr(CustPaymMode));
        #
        #    return dialog;
        #
        #}
      ENDSOURCE
      SOURCE #getFromDialog
        #public boolean getFromDialog()
        #{
        #    custAccount = fieldAccount.value();
        #    custName = fieldName.value();
        #    custGroupId = fieldGroup.value();
        #    currencyCode = fieldCurrency.value();
        #    PaymMode = fieldPaymMode.value();
        #    return super();
        #
        #}
      ENDSOURCE
      SOURCE #pack
        #public container pack()
        #{
        #    return conNull();
        #}
      ENDSOURCE
      SOURCE #run
        #public void run()
        #{
        #    info("You have entered curstomer information:");
        #    info(strFmt("Account: %1",custAccount));
        #    info(strFmt("Name: %1", custName));
        #    info(strFmt("Group: %1", custGroupId));
        #    info(strFmt("Currency: %1", currencyCode));
        #    info(strFmt("Terms of payment: %1", PaymTermId));
        #    info(strFmt("Method of payment: %1",paymMode));
        #}
      ENDSOURCE
      SOURCE #unpack
        #public boolean unpack(container _packedClass)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args _args)
        #{
        #    CustCreate custCreate = new CustCreate();
        #
        #    if(custCreate.prompt())
        #    {
        #        custCreate.run();
        #    }
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: PRN

; Microsoft Dynamics AX Project : CookBookAx2012_Capture2 unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #CookBookAx2012_Capture2
  PRIVATE
  PROPERTIES
    Name                #CookBookAx2012_Capture2
    Origin              #{338ECC89-446B-4334-B054-B2F187586BF3}
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    BEGINNODE
      FILETYPE 0
      UTILTYPE 3
      UTILOBJECTID 0
      NODETYPE 296
      NAME #SysCheckList_Budget
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 4767
      NODETYPE 329
      NAME #SysCheckList
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 1030609
      NODETYPE 329
      NAME #SysCheckList_Budget
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 1030608
      NODETYPE 329
      NAME #SysCheckListItem_Budget
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 1030607
      NODETYPE 329
      NAME #SysCheckListItem_BudgetCode
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 1030606
      NODETYPE 329
      NAME #SysCheckListItem_BudgetModel
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 1030605
      NODETYPE 329
      NAME #SysCheckListInterfaceBudget
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 11
      UTILOBJECTID 0
      NODETYPE 201
      NAME #LedgerJournalTable
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 643
      NODETYPE 329
      NAME #SysSetupFormRun
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 11
      UTILOBJECTID 0
      NODETYPE 201
      NAME #BankReconciliation
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 1030603
      NODETYPE 329
      NAME #CustGroupDynamic_3_Again
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 1030602
      NODETYPE 329
      NAME #CustGroupDynamic_3
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 1030601
      NODETYPE 329
      NAME #CustSelect_2
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 1030600
      NODETYPE 329
      NAME #CustCreate_1
    ENDNODE
  ENDPROJECT
  

***Element: END
